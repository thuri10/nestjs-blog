I"áI<p><code class="language-plaintext highlighter-rouge">vm1.exe</code> implements a simple 8-bit virtual machine (VM) to try and stop reverse engineers from retrieving the flag. The VM`s RAM contains the encrypted flag and some bytecode to decrypt it. Can you figure out how the VM works and write your own to decrypt the flag?. A copy of the VM‚Äôs RAM has been provided in ram.bin (this data is identical to the ram content of the malware‚Äôs VM before execution and contains both the custom assembly code and encrypted flag).</p>

<p>Main function analysis</p>

<p><img src="/assets/images/mal/vmq.png" alt="Main Function" /></p>

<p>From the main function, <strong>HeapAlloc</strong> allocates a memory block of size <strong>0x1FB</strong> bytes. The pointer of the allocated memory block is called <code class="language-plaintext highlighter-rouge">allocated_memblock</code> as shown in the image.</p>

<p>The program does a <strong>memcpy</strong> of the content stored in the <code class="language-plaintext highlighter-rouge">rambin</code> offset to newly allocated memory block.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="kt">void</span> <span class="o">*</span><span class="nf">memcpy</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">memcpy</code> function copies data from the source address to destination address of size 0x1fb. The destination address of this program is allocate_memblock. The content of the <code class="language-plaintext highlighter-rouge">rambin</code> file and content at the rambin offset are the same as examined below.</p>

<p><img src="/assets/images/mal/rambin.png" alt="Rambin" />
<img src="/assets/images/mal/ida_hex.png" alt="IDA HEX" /></p>

<p>Next step is analyzing <strong>sub_4022E0</strong> function. The disassembled function graph looks like the one below.</p>

<p><img src="/assets/images/mal/vmflow.png" alt="sub_4022E0 control flow loop" /></p>

<p>From the disassembly above, the binary does some byte operations. The first graph block is doing a bitwise <code class="language-plaintext highlighter-rouge">AND</code> operation, which is responsible for setting both <code class="language-plaintext highlighter-rouge">SF</code> and <code class="language-plaintext highlighter-rouge">ZF</code> to zero.First it sets the value of eax register to 1, and then do a test operation. Because the conditional <strong>‚Äújump if zero‚Äù</strong> is not true, we continue our execution to the next control block.</p>

<p>For decompilation of our binary we use ghidra.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td> --><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">FUN_004022e0</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">byte</span> <span class="n">bVar1</span><span class="p">;</span>
  <span class="n">uint</span> <span class="n">uVar2</span><span class="p">;</span>
  <span class="n">byte</span> <span class="n">bVar3</span><span class="p">;</span>
  <span class="n">byte</span> <span class="n">counter</span><span class="p">;</span>

  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">do</span> <span class="p">{</span>
    <span class="cm">/* 0 */</span>
    <span class="n">uVar2</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">counter</span><span class="p">;</span>
      <span class="cm">/* 2 */</span>
    <span class="n">bVar1</span> <span class="o">=</span> <span class="n">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">bVar3</span> <span class="o">=</span> <span class="n">counter</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
    <span class="n">uVar2</span> <span class="o">=</span> <span class="n">FUN_00402270</span><span class="p">((</span><span class="n">uint</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)(</span><span class="n">allocated_memblock</span> <span class="o">+</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">uVar2</span><span class="p">),</span>
                         <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)(</span><span class="n">allocated_memblock</span> <span class="o">+</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar1</span><span class="p">),</span>
                         <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)(</span><span class="n">allocated_memblock</span> <span class="o">+</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar3</span><span class="p">));</span>
  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">uVar2</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">uVar2</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The above c-code like is more easier to understand.The assembly equivalent of this operation is as the one shown in the first memory block of the function.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre><span class="nl">loc_4022EA:</span>
<span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="mi">1</span>
<span class="nf">test</span>    <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
<span class="nf">jz</span>      <span class="nv">short</span> <span class="nv">loc_402367</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Function <strong>FUN_00402270</strong> is called and three arguments are passed as parameters.The control graph below shows various operation executed by the binary depending on the argument passed to the function.</p>

<p><img src="/assets/images/mal/vmflow2.png" alt="control flow loop" /></p>

<p>From the above graph, the function does a compare on the arguments passed with either 1, 2 or 3. If the condition is fulfilled, that operation branch is executed as shown in the image above.</p>

<p>Example: <strong><em>if the argument value passed is 1, control flow branch to loc_4022E address as shown in the graph</em></strong></p>

<p>For better understanding of the control flow, we decompile the function using ghidra, because <strong>idafree</strong> does not support x86 decompilation.The ‚ÄúC-like style‚Äù of the code looks like the one below.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td> --><td class="rouge-code"><pre>
<span class="kt">int</span> <span class="nf">FUN_00402270</span><span class="p">(</span><span class="kt">int</span> <span class="n">value1</span><span class="p">,</span><span class="kt">int</span> <span class="n">value2</span><span class="p">,</span><span class="kt">int</span> <span class="n">param_3</span><span class="p">)</span>

<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">value1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">*</span><span class="p">(</span><span class="n">undefined</span> <span class="o">*</span><span class="p">)(</span><span class="n">allocated_memblock</span> <span class="o">+</span> <span class="n">value2</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined</span><span class="p">)</span><span class="n">param_3</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">value1</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">value1</span> <span class="o">=</span> <span class="n">allocated_memblock</span> <span class="o">+</span> <span class="n">value2</span><span class="p">;</span>
      <span class="n">DAT_00404240</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">value1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">value1</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">value1</span> <span class="o">&amp;</span> <span class="mh">0xffffff00</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">value1</span> <span class="o">=</span> <span class="n">allocated_memblock</span> <span class="o">+</span> <span class="n">value2</span><span class="p">;</span>
      <span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)(</span><span class="n">allocated_memblock</span> <span class="o">+</span> <span class="n">value2</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">value1</span> <span class="o">^</span> <span class="n">DAT_00404240</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">CONCAT31</span><span class="p">((</span><span class="n">int3</span><span class="p">)((</span><span class="n">uint</span><span class="p">)</span><span class="n">value1</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Decompilation of ghidra is not optimal, therefore decompiled code contains some cast which can be fixed by setting correct data types in the functional signatures. Being an easy VM, we implement the logic in python for decryption of contents <strong><em>ram.bin</em></strong> file.</p>

<p>Fully implemented solution code is below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td> --><td class="rouge-code"><pre><span class="c1">#implement decryption routine function in python
#solution.py
</span><span class="k">def</span> <span class="nf">fun_00402270</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="p">,</span> <span class="n">value3</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">dat_420</span>
    <span class="k">if</span> <span class="n">value1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">membytes</span><span class="p">[</span><span class="n">value2</span><span class="p">]</span> <span class="o">=</span> <span class="n">value3</span>
    <span class="k">elif</span> <span class="n">value1</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">dat_420</span> <span class="o">=</span> <span class="n">membytes</span><span class="p">[</span><span class="n">value2</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">value1</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">membytes</span><span class="p">[</span><span class="n">value2</span><span class="p">]</span> <span class="o">=</span> <span class="n">membytes</span><span class="p">[</span><span class="n">value2</span><span class="p">]</span> <span class="o">^</span> <span class="n">dat_420</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="bp">True</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">membytes</span>
    <span class="n">membytes</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1">#open the encypted file and read bytes
</span>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'ram.bin'</span><span class="p">,</span><span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">rambin</span><span class="p">:</span>
        <span class="n">membytes</span><span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">rambin</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>

    <span class="n">counter</span>  <span class="o">=</span><span class="mi">0</span>
    <span class="n">uvar2</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">bvar1</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">bvar3</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">uvar2_response</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">while</span> <span class="n">uvar2_response</span><span class="p">:</span>
        <span class="n">counter</span> <span class="o">+=</span><span class="mi">3</span>
        <span class="n">uvar2_response</span> <span class="o">=</span> <span class="n">fun_00402270</span><span class="p">(</span><span class="n">membytes</span><span class="p">[</span><span class="n">counter</span><span class="o">+</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">uvar2</span><span class="p">],</span> <span class="n">membytes</span><span class="p">[</span><span class="n">counter</span><span class="o">+</span><span class="mh">0xff</span> <span class="o">+</span> <span class="n">bvar1</span><span class="p">],</span> <span class="n">membytes</span><span class="p">[</span><span class="n">counter</span><span class="o">+</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">bvar3</span><span class="p">])</span>
    <span class="k">print</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">membytes</span><span class="p">[:</span><span class="mi">26</span><span class="p">]])</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running the above script in the terminal gets us our flag</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>vx@archie:vm<span class="nv">$ </span>python3 x.py
<span class="o">[</span><span class="s1">'F'</span>, <span class="s1">'L'</span>, <span class="s1">'A'</span>, <span class="s1">'G'</span>, <span class="s1">'{'</span>, <span class="s1">'V'</span>, <span class="s1">'M'</span>, <span class="s1">'S'</span>, <span class="s1">'-'</span>, <span class="s1">'A'</span>, <span class="s1">'R'</span>, <span class="s1">'E'</span>, <span class="s1">'-'</span>, <span class="s1">'F'</span>, <span class="s1">'O'</span>, <span class="s1">'R'</span>, <span class="s1">'-'</span>, <span class="s1">'M'</span>, <span class="s1">'A'</span>, <span class="s1">'L'</span>, <span class="s1">'W'</span>, <span class="s1">'A'</span>, <span class="s1">'R'</span>, <span class="s1">'E'</span>, <span class="s1">'}'</span>, <span class="s1">'\x00'</span><span class="o">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>After a successful decryption of the rambin contents, the <code class="language-plaintext highlighter-rouge">sub_4022E0</code> function return the pointer to the flag to main function as shown in the image below.</p>

<p><img src="/assets/images/mal/retflag.png" alt="Return value of sub_4022E0" /></p>

<p>Therefore main function calculates MD5 hash of the flag and outputs to message dialogbox using <strong>MessageBoxA</strong> function.</p>

<p>The correct flag for the vm challenge is <code class="language-plaintext highlighter-rouge">FLAG{VMS-ARE-FOR-MALWARE}</code></p>
:ET