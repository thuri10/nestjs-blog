I"˝8<p>This post is a writeup of <strong>‚Äústrings‚Äù</strong> challenges by MalwareTech. The challenges can be downloaded from the author‚Äôs website <a href="https://www.malwaretech.com/challenges/windows-reversing">challenges</a>.</p>

<p>The goal of <strong>‚Äústrings‚Äù</strong> challenges is to understand implementation of strings in malware through static analysis. Strings are very useful in storing the configurations, decryption keys, data and C2 server addresses.</p>

<p>For analysis, I will use <code class="language-plaintext highlighter-rouge">IDApro free</code> for analysis. The author of the challenges provides a set of rules to follow while solving.</p>

<p><strong>Rules &amp; Information</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre>- You are not require to run strings1.exe, this challenge is static analysis only.
- Do not use a debugger or dumper to retrieve the decrypted flag from memory, this is cheating.
- Analysis can be done using the free version of IDA Pro (you don‚Äôt need the debugger).
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="challenge1--strings1">challenge1- Strings1</h2>

<p><code class="language-plaintext highlighter-rouge">Description</code></p>

<blockquote>
  <p>strings1.exe contains an un-encrypted flag stored within the executable. When run, the program will output an MD5 hash of the flag but not the original. Can you extract the flag?</p>
</blockquote>

<p>Knowing the binary is a windows PE, drag binary into IDA for analysis. Initial analysis of the binary is fast because binary is relatively small. The disassembled code is as one shown in the image.</p>

<p><img src="/assets/images/mal/strings1.png" alt="Strings IDA" /></p>

<p>From the analysis of disassembled code, we take flag as input and print out md5 of the flag. The <strong>md5_hash</strong> function is responsible for calculating the MD5 hash of the flag and <code class="language-plaintext highlighter-rouge">MessageBoxA</code> is responsible for displaying the md5hash of the flag in a modal dialog box.</p>

<p>The correct flag is <strong><code class="language-plaintext highlighter-rouge">FLAG{CAN-I-MAKE-IT-ANYMORE-OBVIOUS}</code></strong></p>

<p>Inputting the above flag in the authors website we get a correct message.</p>

<blockquote>
  <p>Correct flag for strings1!</p>
</blockquote>

<h2 id="challenge2--strings2">Challenge2- Strings2</h2>

<blockquote>
  <p>strings2.exe contains an un-encrypted flag stored within the executable. When run, the program will output an MD5 hash of the flag but not the original. Can you extract the flag?</p>
</blockquote>

<p>Goal of the second challenge is to understand stack strings. Stack strings is where strings are copied in single bytes at a time, this helps malware avoid detection algorithms of common strings.</p>

<p>Load second binary into IDA for analysis. The main function of the binary looks like the one shown in the image below.</p>

<p><img src="/assets/images/mal/strings2.png" alt="Strings IDA" /></p>

<p>From above disassembled code, the flag string is pushed in single bytes, and then passed to the md5_char function. m5_char function is responsible for calculating the MD5sum of the flag as previous seen in <code class="language-plaintext highlighter-rouge">challenge1</code>. Concatenating the bytes we get our second flag.</p>

<p>The flag is <strong><code class="language-plaintext highlighter-rouge">FLAG{STACK-STRINGS-ARE-BEST-STRINGS}</code></strong></p>

<h2 id="challenge3---strings3">Challenge3 - Strings3</h2>

<blockquote>
  <p>strings3.exe contains an un-encrypted flag stored within the executable. When run, the program will output an MD5 hash of the flag but not the original. Can you extract the flag?</p>
</blockquote>

<p>Goal of the challenge is understanding how malware uses resources section of the PE. Drag the <code class="language-plaintext highlighter-rouge">strings3</code> binary into IDA and disassemble the main function. The disassembled code looks the one in the image below.</p>

<p><img src="/assets/images/mal/resourcestrings3.png" alt="Strings IDA" /></p>

<p>Looking at the above function is we have a new function, <code class="language-plaintext highlighter-rouge">FindResourceA</code>. Looking at the windows documentation, FindResourceA function is responsible determination of a resource with the specified type and name in the specified module as shown in the code snip below.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="n">HRSRC</span> <span class="nf">FindResourceA</span><span class="p">(</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span> <span class="n">HMODULE</span> <span class="n">hModule</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">LPCSTR</span>  <span class="n">lpName</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">LPCSTR</span>  <span class="n">lpType</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the disassembly above, the name of the resource we are referencing is <strong>rc.rc</strong>. After the execution of FindResourceA function it returns an handle to the specified resource`s information block. In x86 assembly code the return values of functions are put in <strong>eax</strong> register.</p>

<p>From the above code we can reconstruct the c-style code of the FindResource function.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">FindResourceA</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">"rc.rc"</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The handle module is 0 which is then stored in eax register and then used for calculation of the UID of the resource as shown in assembly below.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="nf">mov</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">var_8</span><span class="p">],</span> <span class="nb">eax</span>
<span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">1</span>
<span class="nf">shl</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">8</span>
<span class="nf">xor</span> <span class="nb">edx</span><span class="p">,</span> <span class="nb">edx</span>
<span class="nf">inc</span> <span class="nb">edx</span>
<span class="nf">shl</span> <span class="nb">edx</span><span class="p">,</span> <span class="mi">4</span>
<span class="nf">or</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">edx</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the above assembly code, the value of eax is 0. The first line saves eax value to a memory register.</p>

<p>Second line increments eax register value by 1. Therefore the new value of eax register is eax=1.</p>

<p>Third line, shifts the bits value of eax register to the left by 8 times. we calculate the new value using python.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span><span class="mi">8</span>
<span class="mi">256</span>
<span class="o">&gt;&gt;&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>value of 1 shifted to the left 8 times becomes 256 as shown above.</p>

<p>Fourth line, is we are clearing the edx register through xor operation. Therefore the value of edx is 0.</p>

<p>Line 5 we increment the value of edx by 1. The new value stored in edx register is 1, <strong>edx=1</strong> .</p>

<p>Line 6 we shift the value of edx register by 4 positions to the left.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span><span class="mi">4</span>
<span class="mi">16</span>
<span class="o">&gt;&gt;&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the calculation above, the new value od edx register is 16. <strong>edx=16</strong>. Therefore for the last line we are doing a bitwise inclusive <strong>OR</strong> operation of value at eax and edx register.</p>

<p>The values for <code class="language-plaintext highlighter-rouge">eax</code> and <code class="language-plaintext highlighter-rouge">edx</code> registers are 256 and 16 respectively.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="mi">256</span> <span class="o">|</span> <span class="mi">16</span>
<span class="mi">272</span>
<span class="o">&gt;&gt;&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The result of the bits operation are therefore stored on the eax register. The new <strong>eax</strong> value is 272. Finally the value of eax register is the stored in memory address referenced below by <strong>UID</strong></p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="nf">mov</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">UID</span><span class="p">],</span> <span class="nb">eax</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/images/mal/strings3.png" alt="Strings IDA" /></p>

<p>The analysis of the disassembled code above, shows the binary loads a resource from the executable referenced by <code class="language-plaintext highlighter-rouge">uID</code>. The function structure for the LoadStringA functions looks like the one below.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">LoadStringA</span><span class="p">(</span>
  <span class="p">[</span><span class="n">in</span><span class="p">,</span> <span class="n">optional</span><span class="p">]</span> <span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="n">UINT</span>      <span class="n">uID</span><span class="p">,</span>
  <span class="p">[</span><span class="n">out</span><span class="p">]</span>          <span class="n">LPSTR</span>     <span class="n">lpBuffer</span><span class="p">,</span>
  <span class="p">[</span><span class="n">in</span><span class="p">]</span>           <span class="kt">int</span>       <span class="n">cchBufferMax</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">uID</code> integer value of the resource to be loaded is 272. For viewing the executable resources you can use <code class="language-plaintext highlighter-rouge">ResourcesEditor</code> tool or python3 <code class="language-plaintext highlighter-rouge">pefile</code> library as shown in the code below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">pefile</span>
<span class="n">pe</span> <span class="o">=</span> <span class="n">pefile</span><span class="p">.</span><span class="n">PE</span><span class="p">(</span><span class="s">"./strings3.exe_"</span><span class="p">)</span>
<span class="n">pe</span><span class="p">.</span><span class="n">print_info</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The above 2 line of python3 code print all the information about the executable. As shown below is our resources section and references the string uid we are loading.</p>

<p><img src="/assets/images/mal/string3rc.png" alt="PE Resources" /></p>

<p>From the image above, <code class="language-plaintext highlighter-rouge">FLAG{RESOURCES-ARE-POPULAR-FOR-MALWARE}</code> string is loaded into the buffer through <code class="language-plaintext highlighter-rouge">LoadStringA</code> function referenced by uid <code class="language-plaintext highlighter-rouge">272</code>. The pointer to the string is then passed to md5 function which is used for calculating md5 value of the string and then displayed in the modal box.</p>

<p>The correct flag is <strong>FLAG{RESOURCES-ARE-POPULAR-FOR-MALWARE}</strong>.</p>

<p>For learning more about resource section of Portable Executable, check <a href="https://www.youtube.com/watch?v=3PcgwKffytI">PE resources</a> by <a href="https://twitter.com/struppigel">@struppigel</a> .</p>
:ET