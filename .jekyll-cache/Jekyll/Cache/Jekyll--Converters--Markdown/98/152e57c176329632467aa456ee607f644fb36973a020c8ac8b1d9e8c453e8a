I"\9<p>Redline malware is an Information Stealer written in c#, targeting windows victims. It is used for gathering victims information ranging from the Browser cookies, saved credentials, Discord tokens, OS information, Languages, VPN profiles, Installed Programs and Network configurations.</p>

<p>The malware is capable of downloading additional malware from its C2 servers.</p>

<h2 id="stage1---loader-analysis">Stage1 - Loader Analysis</h2>

<p>The first stage of sample malware is used for assembling and executing an additional payload. The sample used throughout this post is <code class="language-plaintext highlighter-rouge">RedlineStealer</code> malware which can be downloaded from <a href="https://bazaar.abuse.ch">MalwareBaazar</a>.</p>

<p>The sha256 hash of the sample is <code class="language-plaintext highlighter-rouge">72b7f772e019def30abcf817ae7a3004a84215daef67588eaa1fde3839df2fa2</code>. First step is loading sample in <code class="language-plaintext highlighter-rouge">Detect it Easy</code> tool to check whether is packed or not.</p>

<p><img src="/assets/images/redline/redliner.png" alt="red liner" /></p>

<p>From the initial Analysis, the sample is not packed and is a <code class="language-plaintext highlighter-rouge">.NET</code> Family malware. Vast amount of <code class="language-plaintext highlighter-rouge">.NET</code> family programming languages functionality has given malware authors power to write simple yet powerful tools therefore leading to an increase in malware distributed.</p>

<h2 id="payload-extraction">Payload Extraction</h2>

<p>For Analysis of compiled binaries, <code class="language-plaintext highlighter-rouge">IDA</code> and <code class="language-plaintext highlighter-rouge">ghidra</code> are main first tools of choice to an analyst. For analysis of .NET binaries is different, use <code class="language-plaintext highlighter-rouge">dnSpy</code> which helps debug the functionality of the sample.</p>

<p>For extraction of our payload, we will do both manual and dynamic extraction of the second stage binary. Both methods have their own advantages and disadvantages as highlighted below.</p>

<h3 id="method1---manual-extraction">Method1 - Manual Extraction</h3>

<p>This method is we extract payload from the encrypted string arrays <code class="language-plaintext highlighter-rouge">s</code> as shown in the image below. Malware uses anti-analysis techniques to prevent it from being analyzed.</p>

<p><img src="/assets/images/redline/stringarray.png" alt="" /></p>

<p>From image above, we de-obfuscate malware by replacing the strings with the target strings as shown in the program. After replacing all the strings,we write a small python program to convert the base64 encoded string to PE binary.</p>

<p>The python script to decode the base64 encoded string to binary.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">base64</span>

<span class="c1">#s string array is our binary
</span><span class="n">string_encoded</span> <span class="o">=</span> <span class="s">" "</span>
<span class="n">decoded</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">string_encoded</span><span class="p">)</span>
<span class="nb">open</span><span class="p">(</span><span class="s">'stage2.exe'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">).</span><span class="n">write</span><span class="p">(</span><span class="n">decoded</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Our dumped files are valid binaries, but do not contain all features because the malware is using Reflection method to load additional assembly code. Reflection is a method used to load other assemblies at runtime of the program. This enables the malware to add extra features and validation of the program.</p>

<h3 id="method2---dynamic-extraction">Method2 - Dynamic Extraction</h3>

<p>The second method <code class="language-plaintext highlighter-rouge">Dynamic</code> is more powerful compared to the manual method.This enables us to inspect the program behavior at runtime. For extraction of the second stage payload we put a breakpoint on the line <code class="language-plaintext highlighter-rouge">22</code> as shown in image below.</p>

<p><img src="/assets/images/redline/breakpoint.png" alt="" /></p>

<p>On <code class="language-plaintext highlighter-rouge">dnspy</code> debugger put a breakpoint on line 22, Run the program until the execution hits the breakpoint.</p>

<p><img src="/assets/images/redline/righclick_array.png" alt="" /></p>

<p>By examining the values in image above,we can examine the array we passing to the object method. Looking at the bytes data of the above array, the first two bytes are magic number of PE file <code class="language-plaintext highlighter-rouge">4D5A</code> or ascii <code class="language-plaintext highlighter-rouge">MZ</code>. From the first two bytes we can make an assumption the buffer is our second stage binary. Right click the buffer memory to save the sample.</p>

<h2 id="stage2---payload-analysis">Stage2 - Payload Analysis</h2>

<p>This is the second stage analysis of our extracted malware file, The extracted binary is <code class="language-plaintext highlighter-rouge">.NET</code> binary. Opening the binary in debugger, entrypoint of the binary looks as shown in the image below. The main function executes the <code class="language-plaintext highlighter-rouge">WriteLine</code> function.</p>

<p><img src="/assets/images/redline/dumpedfile.png" alt="" /></p>

<p>FMalware does environment check before communication to configured C2 servers.</p>

<h3 id="language-culture-check">Language Culture check</h3>

<p>The malware checks the language, Timezone, CultureInfo and region country of the Victims Machine. The cultureInfo class provides information about a specific culture, known as <code class="language-plaintext highlighter-rouge">locale</code>. The information includes the formatting of the dates, writing system, numbers and calendar used.
<img src="/assets/images/redline/languagecheck.png" alt="" /></p>

<p>The malware check if victims region country is within the array of the strings shown above and if the does not contain <code class="language-plaintext highlighter-rouge">EnglishName</code>.</p>

<h3 id="network-communication-analysis">Network Communication Analysis</h3>

<p>The second part of our analysis is determining IP address in which the malware is communicating to.The Ip address of the malware seems to be encrypted as shown in the image below. <code class="language-plaintext highlighter-rouge">StringDecrypt</code> function takes two arguments, the IP address and Key and decrypts the <code class="language-plaintext highlighter-rouge">address</code>
<img src="/assets/images/redline/connection.png" alt="" /></p>

<p>The arguments variables of the malware are shown in the image below. The arguments includes the IP address and Key used for encryption of the data.</p>

<p><img src="/assets/images/redline/args_key.png" alt="" /></p>

<p>With the encrypted <code class="language-plaintext highlighter-rouge">IP</code> and <code class="language-plaintext highlighter-rouge">key</code> we can decrypt the address used for providing the connection.</p>

<h3 id="ip-address-decryption">IP address Decryption</h3>

<p>The <code class="language-plaintext highlighter-rouge">StringDecrypt</code> is a multistage decryption method which employs both <code class="language-plaintext highlighter-rouge">base64</code> encoding and bitwise <code class="language-plaintext highlighter-rouge">xor</code> logic for decryption of the data.</p>

<p><img src="/assets/images/redline/decrypt_method.png" alt="Decrypt Strings" /></p>

<p>From the logic above, reimplement the logic in <code class="language-plaintext highlighter-rouge">python</code> and recover the encrypted data.</p>

<p>The python code used for decrypting the code is,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre><span class="c1"># -*- coding: utf-8 -*-
</span><span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">pwn</span>
<span class="n">ip_addr</span> <span class="o">=</span><span class="sa">b</span><span class="s">"AiE1CyQDBVA/JR4OPwIKGSoZGkU6NyVa"</span>
<span class="n">key</span> <span class="o">=</span><span class="sa">b</span><span class="s">"Outshines"</span>

<span class="n">ip_addr_decode</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">ip_addr</span><span class="p">)</span>
<span class="n">result_encoded</span> <span class="o">=</span><span class="n">pwn</span><span class="p">.</span><span class="n">xor</span><span class="p">(</span><span class="n">ip_addr_decode</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">result_encoded</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running above code we get C2 server address</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre> <span class="nv">$ </span>python3 base.py
b<span class="s1">'101.99.93.70:54437'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="strings-conciliation-methods">Strings Conciliation methods</h3>

<p>The malware employs strings concilation methods to slow down analysis. It adds some junk strings to the target strings which is replaced during the runtime of the malware with an empty string.</p>

<p><img src="/assets/images/redline/stringreplace.png" alt="" /></p>

<p>Example of string concilation tactic is above function. The junk string added to the string array is <code class="language-plaintext highlighter-rouge">MANGO</code> which is replaced with an empty string.
The string from the char array is <code class="language-plaintext highlighter-rouge">coMANGOokies.sqMANGOlite</code> , replacing the <code class="language-plaintext highlighter-rouge">MANGO</code> string with an empty string, we get <code class="language-plaintext highlighter-rouge">cookies.sqlite</code> which is a file used for storing cookies by Firefox browser.</p>

<h2 id="information-harvesting">Information Harvesting</h2>

<p>The Malware harvest a lot of Victims data and sends back to the configured c2 server. The malware is simple but effective in collecting a lot of user information. The information collected by malware includes cookies, user tokens, system configurations, graphic cards, processor count, Network information, application installed, credit wallet information and many more.</p>

<p>Below is explanation of the capabilities of the malware.</p>

<h3 id="browser">Browser</h3>

<p>The malware is capable of stealing the user`s credentials and cookies of from browser session.</p>

<p><img src="/assets/images/redline/browsers.png" alt="" /></p>

<p>The malware is also capable of enumerating chrome and Opera Mini if installed on the Victim`s machine. It also gets the version of the installed browser as shown in the image below.
<img src="/assets/images/redline/chrome_scan.png" alt="" /></p>

<h3 id="filezilla">FileZilla</h3>

<p>Filezilla is a professional software that makes transfer of files from one computer to another easier via FTP, SFTP, FTPs protocols and other cloud services such as Amazon S3.
<img src="/assets/images/redline/filezillacredentials.png" alt="" />
The malware scans for the saved credentials used by Victim in transferring files to other machines. The malware collects <code class="language-plaintext highlighter-rouge">host, Port, User, Pass</code> of the machines</p>

<h3 id="programs-enumeration">Programs Enumeration</h3>

<p>Malware is also capable of collecting all installed applications on the machine using <code class="language-plaintext highlighter-rouge">ListofPrograms</code> function as shown in the below. After enumerating all the installed applications, the malware sends data back to the C2 server.</p>

<p><img src="/assets/images/redline/program_exfil.png" alt="" /></p>

<p>The malware enumerates installed application through use of registry. Querying of registry is an effective way of finding out all installed applications in Windows. The malware gets the program name and version as shown by <code class="language-plaintext highlighter-rouge">text</code> and <code class="language-plaintext highlighter-rouge">text2</code> strings.</p>

<p><img src="/assets/images/redline/programenumeration_registry.png" alt="" /></p>

<h3 id="vpn-information-gathering">VPN information Gathering</h3>

<p>The malware scans for Victim`s configuration files and profiles of various VPNs installed on the device. The malware scans File configs NordVPN, OpenVpn configs and ProtonVPN profiles.</p>

<p><img src="/assets/images/redline/vpns.png" alt="" /></p>

<h3 id="exfilitration">Exfilitration</h3>

<p>For the exfiltration of the data, the malware creates a folder in <code class="language-plaintext highlighter-rouge">APPdata</code> folder called <code class="language-plaintext highlighter-rouge">Yandex\YAddon</code>. The data collected is uploaded in chunks to c2 server.</p>

<p><img src="/assets/images/redline/exfil_folder.png" alt="" /></p>

<h2 id="references">References</h2>

<ol>
  <li>https://www.natlawreview.com/article/privacy-tip-315-redline-malware-used-to-steal-saved-credentials</li>
  <li>https://www.zdnet.com/article/fortinet-warns-of-cybercriminals-using-omicron-variant-news-to-distribute-redline-stealer</li>
  <li>https://www.proofpoint.com/us/blog/threat-insight/new-redline-stealer-distributed-using-coronavirus-themed-email-campaign</li>
</ol>
:ET