I"∞n<p>This is an article of my adventures with golang <strong>gopacket</strong> library. As I was working on a personal project, I came across <a href="https://github.com/google/gopacket">gopacket</a> library which provides capabilities for decoding packets in Go. The capabilities provided by the library motivated me to try malware traffic analysis with the library instead of using Wireshark. This article focuses on analyzing the <code class="language-plaintext highlighter-rouge">QKBOT</code> malware traffic .</p>

<h2 id="what-is-gopacket">What is gopacket</h2>

<p>Gopacket is a library developed by google that provides capabilities for decoding packets in Go language, it enables one to decode the Layers structures of the packets, Network flows, create packets, e.t.c . Library can be used for various purposes ranging from:</p>

<ul>
  <li>Networking tools by Network Administrators</li>
  <li>Offensive tooling by RED teams i.e Packet Sniffers</li>
  <li>Defensive analysis capabilities by Blue Teams i.e IP monitoring</li>
</ul>

<p>The ability to manually craft packets can enable one to test systems network connectivity( up or down),vulnerabilities on systems by replaying packets over network.</p>

<p>Below are scenarios where <strong>gopacket</strong> can be used by different users.</p>

<h2 id="defensive-capabilities">Defensive capabilities</h2>

<p>To understand how gopacket can be used by defenders, we will analyze a packet of malware traffic from <a href="https://www.malware-traffic-analysis.net/2022/04/14/index.html">malware-traffic-analysis website</a>.</p>

<p>For this case I will use <a href="https://www.malware-traffic-analysis.net/2022/04/14/index.html">QBOT Pcap</a> provided in April 2022.</p>

<blockquote>
  <p>Before starting analysis of malware of any software one needs to have a clear objective of what HE/She wants to achieve. Our goal can be analyzing malware for various key words, IP addresses or any other IOCs.</p>
</blockquote>

<h3 id="1-keywords-filtering">1. keywords Filtering</h3>

<p>First we can write a simple program to analyze our packets using keywords which can be contained in the Application layer of the TCP Model of our packets.</p>

<blockquote>
  <p>The keywords can range from HTTP Methods, File extensions and Known domain names. The keywords can be <strong>‚ÄúGET‚Äù</strong> http method, <strong>‚Äú.zip‚Äù</strong> or <strong>‚Äú.exe‚Äù</strong> to check the file names extensions.</p>
</blockquote>

<p>Example code of searching our packet using keyword values is shown below.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
 <span class="s">"fmt"</span>
 <span class="s">"strings"</span>

 <span class="s">"github.com/google/gopacket"</span>
 <span class="s">"github.com/google/gopacket/pcap"</span>
<span class="p">)</span>

<span class="c">//declare variable to hold our pcap file</span>
<span class="k">var</span> <span class="n">pcapFile</span> <span class="kt">string</span> <span class="o">=</span><span class="s">"cobalt-strike.pcap"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">//read the packet file</span>
 <span class="n">handle</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">pcap</span><span class="o">.</span><span class="n">OpenOffline</span><span class="p">(</span><span class="n">pcapFile</span><span class="p">)</span>
 <span class="k">var</span> <span class="n">filter</span> <span class="kt">string</span>  <span class="o">=</span> <span class="s">"tcp"</span>
 <span class="n">err</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">SetBPFFilter</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="n">packetSource</span>  <span class="o">:=</span> <span class="n">gopacket</span><span class="o">.</span><span class="n">NewPacketSource</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">handle</span><span class="o">.</span><span class="n">LinkType</span><span class="p">())</span>
 <span class="k">for</span> <span class="n">packet</span> <span class="o">:=</span><span class="k">range</span> <span class="n">packetSource</span><span class="o">.</span><span class="n">Packets</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">app</span> <span class="o">:=</span> <span class="n">packet</span><span class="o">.</span><span class="n">ApplicationLayer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">app</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
   <span class="k">if</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">Payload</span><span class="p">()),</span> <span class="s">"zip"</span><span class="p">){</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">Payload</span><span class="p">()))</span>
   <span class="p">}</span>
  <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For the above code we are doing Berkeley Filter of only TCP traffic.
It is possible to filter both <strong>Stream type</strong> and <strong>PORT</strong> using BPF.</p>

<p>The results from the code above are.</p>

<p><img src="/assets/images/packets/packet_name-filter.png" alt="Filter GET HTTP Method" /></p>

<p>From running the above code we are able to get file attachment name ‚Äú<strong>iseerroaemtefspidnle.zip</strong>‚Äù which is part of the artifacts of the malware provided.</p>

<p>The attachments files name are matched by the IOC provided</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>TRAFFIC TO DOWNLOAD THE INITIAL ZIP ARCHIVE:
<span class="p">
-</span> 208.91.198.131 port 443 - https://geobram.com/ist/iseerroaemtefspidnle
<span class="p">-</span> 208.91.198.131 port 443 - https://geobram.com/ist/NO_2950435796.zip
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The ‚Äú<em>GET</em>‚Äù method is used for getting an available resource, therefore meaning the zip file is downloaded to the victim‚Äôs machine.</p>

<h3 id="2-packet-network-flows">2. Packet Network Flows</h3>

<p><strong>gopacket</strong> enables one to follow the network flow in certain port or even stream. This enables one to track network activity of a given IP address. This is very useful when there is a spike of network activity in a given port or range of ports but source is not known.</p>

<p>Example code used for Filtering the C2 traffic flow for a given port is as shown in the code snippet below.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
 <span class="s">"fmt"</span>

 <span class="s">"github.com/google/gopacket"</span>
 <span class="s">"github.com/google/gopacket/layers"</span>
 <span class="s">"github.com/google/gopacket/pcap"</span>
<span class="p">)</span>

<span class="c">//declare variable to hold our pcap file</span>
<span class="k">var</span> <span class="n">pcapFile</span> <span class="kt">string</span> <span class="o">=</span><span class="s">"cobalt-strike.pcap"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">//read the packet file</span>
 <span class="n">handle</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">pcap</span><span class="o">.</span><span class="n">OpenOffline</span><span class="p">(</span><span class="n">pcapFile</span><span class="p">)</span>
 <span class="k">var</span> <span class="n">filter</span> <span class="kt">string</span>  <span class="o">=</span> <span class="s">"tcp and port 65400"</span>
 <span class="n">err</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">SetBPFFilter</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="n">packetSource</span>  <span class="o">:=</span> <span class="n">gopacket</span><span class="o">.</span><span class="n">NewPacketSource</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">handle</span><span class="o">.</span><span class="n">LinkType</span><span class="p">())</span>
 <span class="k">for</span> <span class="n">packet</span> <span class="o">:=</span><span class="k">range</span> <span class="n">packetSource</span><span class="o">.</span><span class="n">Packets</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">tcp</span> <span class="o">:=</span> <span class="n">packet</span><span class="o">.</span><span class="n">TransportLayer</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">layers</span><span class="o">.</span><span class="n">TCP</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">tcp</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
   <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">packet</span><span class="o">.</span><span class="n">NetworkLayer</span><span class="p">()</span><span class="o">.</span><span class="n">NetworkFlow</span><span class="p">())</span>
  <span class="p">}</span>
 <span class="p">}</span>
 <span class="k">return</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Below is the results of filtering the captured pcap file at port 65400. For Filtering section can be any PORT or even can be left blank.</p>

<p><img src="/assets/images/packets/networkcomm.png" alt="Network communication flow" /></p>

<p>From the above we can confirm the IP address of the above packet matches the one in the <strong>QABOT C2 traffic IOCs</strong>.</p>

<p>Only one IP address is shown because it the only communicating in that PORT. It is also possible to filter the packet metadata and timestamp for each packet send across.</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>QAKBOT C2 TRAFFIC:
<span class="p">
-</span> 47.158.25.67 port 443 - attempted TCP connections
<span class="p">-</span> 45.46.53.140 port 2222 - HTTPS traffic
<span class="p">-</span> port 443 - www.openssl.org - connectivity check (not inherently malicious)
<span class="p">-</span> 23.111.114.52 port 65400 - TCP traffic
<span class="p">-</span> 75.99.168.194 port 443 - HTTPS traffic
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From above analysis, it is possible to write your own packet analysis tools and bundle them into third-party tools as plugins.</p>

<h2 id="offensive-capabilities">Offensive capabilities</h2>

<p>Golang has a lot of potential in developing offensive cyber capabilities ranging from developing vulnerabilities scanners, shellcodes and encoders, proxies and fuzzing tools.</p>

<p>For this section i will focus on use of gopacket to sniff for PORT or stream.
This is the <strong>OpenLive</strong> function which is a wrapper to the <strong>pcapOpenLive</strong>. The function takes an argument of device, which is our interface. the interface can <strong>‚Äúeth0‚Äù</strong> for ethernet.
Takes a maximum size to read which is defined by snaplen.
if the device set by the user is not found, the functions sets its to default in which is the index 0.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">func</span> <span class="n">OpenLive</span><span class="p">(</span><span class="n">device</span> <span class="kt">string</span><span class="p">,</span> <span class="n">snaplen</span> <span class="kt">int32</span><span class="p">,</span> <span class="n">promisc</span> <span class="kt">bool</span><span class="p">,</span> <span class="n">timeout</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span> <span class="p">(</span><span class="n">handle</span> <span class="o">*</span><span class="n">Handle</span><span class="p">,</span> <span class="n">_</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">var</span> <span class="n">pro</span> <span class="kt">int</span>
 <span class="k">if</span> <span class="n">promisc</span> <span class="p">{</span>
  <span class="n">pro</span> <span class="o">=</span> <span class="m">1</span>
 <span class="p">}</span>

 <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">pcapOpenLive</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="kt">int</span><span class="p">(</span><span class="n">snaplen</span><span class="p">),</span> <span class="n">pro</span><span class="p">,</span> <span class="n">timeoutMillis</span><span class="p">(</span><span class="n">timeout</span><span class="p">))</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
 <span class="p">}</span>
 <span class="n">p</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="n">timeout</span>
 <span class="n">p</span><span class="o">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">device</span>

 <span class="n">ifc</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">net</span><span class="o">.</span><span class="n">InterfaceByName</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="c">// The device wasn't found in the OS, but could be "any"</span>
  <span class="c">// Set index to 0</span>
  <span class="n">p</span><span class="o">.</span><span class="n">deviceIndex</span> <span class="o">=</span> <span class="m">0</span>
 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">p</span><span class="o">.</span><span class="n">deviceIndex</span> <span class="o">=</span> <span class="n">ifc</span><span class="o">.</span><span class="n">Index</span>
 <span class="p">}</span>

 <span class="c">//---------continue source code-------------</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This is a simple implementation of to show on how to capture live packets in a given port and machine.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
 <span class="s">"fmt"</span>

 <span class="s">"github.com/google/gopacket"</span>
 <span class="s">"github.com/google/gopacket/pcap"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
 <span class="n">interface_point</span> <span class="kt">string</span> <span class="o">=</span><span class="s">"wlp4s0"</span>
 <span class="n">snaplen_time</span> <span class="kt">int32</span> <span class="o">=</span> <span class="m">1600</span>
 <span class="n">promiscuous</span> <span class="kt">bool</span> <span class="o">=</span> <span class="no">true</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="c">// Open an Interface to capture packets, with time in milliseconds</span>
 <span class="n">handle</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">pcap</span><span class="o">.</span><span class="n">OpenLive</span><span class="p">(</span><span class="n">interface_point</span><span class="p">,</span> <span class="n">snaplen_time</span><span class="p">,</span> <span class="n">promiscuous</span><span class="p">,</span> <span class="n">pcap</span><span class="o">.</span><span class="n">BlockForever</span><span class="p">)</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="k">var</span> <span class="n">filter</span> <span class="kt">string</span>  <span class="o">=</span> <span class="s">"tcp and port 3000"</span>
 <span class="n">err</span> <span class="o">=</span> <span class="n">handle</span><span class="o">.</span><span class="n">SetBPFFilter</span><span class="p">(</span><span class="n">filter</span><span class="p">)</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="n">packetSource</span> <span class="o">:=</span> <span class="n">gopacket</span><span class="o">.</span><span class="n">NewPacketSource</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">handle</span><span class="o">.</span><span class="n">LinkType</span><span class="p">())</span>
 <span class="k">for</span> <span class="n">packet</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">packetSource</span><span class="o">.</span><span class="n">Packets</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">//Print captured packets</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">packet</span><span class="p">)</span>
 <span class="p">}</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="networking">Networking</h2>

<p>Golang has a lot of network packages which can be used from building tools from proxies, load balancers and scanners. This provides it an opportunity to build small utilities to help solve network issues.</p>

<p>The <strong>FindAllDevs</strong> function enumerates all the interfaces on the current machine.</p>

<p>Implementation of FindAllDevs in the pcap package</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">func</span> <span class="n">FindAllDevs</span><span class="p">()</span> <span class="p">(</span><span class="n">ifs</span> <span class="p">[]</span><span class="n">Interface</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">alldevsp</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">pcapFindAllDevs</span><span class="p">()</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
 <span class="p">}</span>
 <span class="k">defer</span> <span class="n">alldevsp</span><span class="o">.</span><span class="n">free</span><span class="p">()</span>

 <span class="k">for</span> <span class="n">alldevsp</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">iface</span> <span class="n">Interface</span>
  <span class="n">iface</span><span class="o">.</span><span class="n">Name</span> <span class="o">=</span> <span class="n">alldevsp</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>
  <span class="n">iface</span><span class="o">.</span><span class="n">Description</span> <span class="o">=</span> <span class="n">alldevsp</span><span class="o">.</span><span class="n">description</span><span class="p">()</span>
  <span class="n">iface</span><span class="o">.</span><span class="n">Addresses</span> <span class="o">=</span> <span class="n">findalladdresses</span><span class="p">(</span><span class="n">alldevsp</span><span class="o">.</span><span class="n">addresses</span><span class="p">())</span>
  <span class="n">iface</span><span class="o">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">alldevsp</span><span class="o">.</span><span class="n">flags</span><span class="p">()</span>
  <span class="n">ifs</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">ifs</span><span class="p">,</span> <span class="n">iface</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="k">return</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the implementation of the interface, we can parse Name, description, Addresses from the interface information of the Interface found.</p>

<p>Below is a simple program which can be used as an replacement for <strong>ipconfig</strong> in ubuntu.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
 <span class="s">"fmt"</span>
 <span class="s">"log"</span>

 <span class="s">"github.com/google/gopacket/pcap"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="c">// Find all devices</span>
 <span class="n">devices</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">pcap</span><span class="o">.</span><span class="n">FindAllDevs</span><span class="p">()</span>
 <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
 <span class="p">}</span>

 <span class="c">// Print device information</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Devices found:"</span><span class="p">)</span>
 <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">device</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">devices</span> <span class="p">{</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Name: "</span><span class="p">,</span> <span class="n">device</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Description: "</span><span class="p">,</span> <span class="n">device</span><span class="o">.</span><span class="n">Description</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">address</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">device</span><span class="o">.</span><span class="n">Addresses</span> <span class="p">{</span>
   <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"- IP address: "</span><span class="p">,</span> <span class="n">address</span><span class="o">.</span><span class="n">IP</span><span class="p">)</span>
   <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"- Subnet mask: "</span><span class="p">,</span> <span class="n">address</span><span class="o">.</span><span class="n">Netmask</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To compile the above code, run the following bash command</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>go build devices.go   //choose a suitable <span class="k">for </span>you program
</pre></td></tr></tbody></table></code></pre></div></div>

<p>After a Successful Build, you can add the program to your environment path. Running the program outputs the following output.</p>

<p><img src="/assets/images/packets/network.png" alt="Conculsion" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Golang net packages and gopacket library provides one ability to write network application ranging from small utilities to scanners.</p>

<blockquote>
  <p>Bundle the interface scanner with a network scanner to get all the interfaces exposed in a given network range.</p>
</blockquote>

<h2 id="references">References</h2>

<ol>
  <li>https://twitter.com/malware_traffic/status/1513556366346137605</li>
  <li>Black Hat GO book (Go Programming for Hackers and pentesters) by Tom Steele, Chris Patten, and Dan Kottmann.</li>
</ol>
:ET